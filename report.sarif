{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"ca456a40af80bfdbb73a276717ffceaa2e3ce107b6e7462f73631a1863aa4ed762f92c0a43d279723dcd774432f93d3cd489dcfffabd21f76b2d278213c65068_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":164,"snippet":{"text":"        ctrl = $(\"#\" + campo.name);"},"startColumn":24,"startLine":164}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"43b31d95cd3975ca2ac01ddc7fff803646450dfc04dbe4632b47948d8a3a9ce07cb171ce4507ac864a2e70ddc350c56a8694eee3abc4d8b1aed1332b2c80c90f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":473,"snippet":{"text":"        var elementos = $(xml).find(\"Filas\");"},"startColumn":27,"startLine":473}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"345ab4e75982b7a2f7bf94118e8648bafbd376559b497b93892406e8c3d2f331722601ec799b1f345e25d488ee7d43304e9ffe91169f5f1a86209036bffcc98c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":474,"snippet":{"text":"        $(elementos).find(\"Fila\").each(function () {"},"startColumn":11,"startLine":474}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b8e9148baf5ffe99f35a4c063a6508aedf082fe6c024df26a1ad9a18549c8bdb918173880c48b391ef812e3be9debccab028619dfbcf20f076f9ee7085a113ee_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":139,"endLine":485,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"' \" + seleccionado + \">\" + descripcion + \"</option>\");"},"startColumn":13,"startLine":485}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"a58a10f2aa0ba8a7dba74a2e278444861165de032a07da7651d75e7303e30ae880dc0a6895feb2073f7ffdb148717058178eb2d92583fa84df050c0365cd258e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":485,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"' \" + seleccionado + \">\" + descripcion + \"</option>\");"},"startColumn":15,"startLine":485}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"98c43f2a0e80f2c97709650a6c028c52594e01a767d1ded2a749fe511759c8b65cf7dc65852ffc59a514218cb7c1bb84cab96e8c42f1eee162ec906151c11d72_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":495,"snippet":{"text":"        var elementos = $(xml).find(\"Filas\");"},"startColumn":27,"startLine":495}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ac997e998cf1b09a2ba848c9b7e1e233f2f28623c28a46bad8a63d9bde606aa805b3cf470423969a45c9ed7fa37fc32802589e0db16efe23ec254d353ed48686_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":496,"snippet":{"text":"        $(elementos).find(\"Fila\").each(function () {"},"startColumn":11,"startLine":496}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"53a9845a6a9ed607af56a0ed6290617fdeb9df6b9a0be6b8e63309b87cf952c464293ba9dd9a53ec1732a924d63697353f2bb907416de7369b368ab9ae2cfda1_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":132,"endLine":499,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"'>\" + clave + \"-\" + descripcion + \"</option>\");"},"startColumn":13,"startLine":499}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"5a5e0440183c7517f6c433351f1e42bd2a3ff317b2fb29ea4b8083c65d8094502d4de8b1353c0c4f42edb943989d860f89ba03e013f03e8c62fb9bd7ce1510f0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":499,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"'>\" + clave + \"-\" + descripcion + \"</option>\");"},"startColumn":15,"startLine":499}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":12,"endLine":505,"snippet":{"text":"    $(combo).find(\"option\").remove().end();"},"startColumn":7,"startLine":505}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"158dc04a1e224fc378189ab9a4230eee816ae532303a009b7869f018201b468a50cc00cd91e1991b7e19d411aafbcafc9d4aa524a348fdc6f6953245a8a3e2f6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":508,"snippet":{"text":"            $(combo).append(\"<option value=''>\" + textoBlanco + \"</option>\");"},"startColumn":13,"startLine":508}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":508,"snippet":{"text":"            $(combo).append(\"<option value=''>\" + textoBlanco + \"</option>\");"},"startColumn":15,"startLine":508}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":511,"snippet":{"text":"            $(combo).append(\"<option value=''></option>\");"},"startColumn":15,"startLine":511}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0dd2ad9347d56f51da00d62f0db109fcbf4d7d56cf28d69fb58b680e070c76daaf7789372d7ba611f7e3a15e13113f0932d1674a34235341757b5b0c6a13b1e9_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":517,"snippet":{"text":"    if ($(comboLetrados).find(\"option\").length <= 2) {"},"startColumn":11,"startLine":517}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0dd2ad9347d56f51da00d62f0db109fcbf4d7d56cf28d69fb58b680e070c76daaf7789372d7ba611f7e3a15e13113f0932d1674a34235341757b5b0c6a13b1e9_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":44,"endLine":525,"snippet":{"text":"                cargarCombo($(comboLetrados), xml, true);"},"startColumn":31,"startLine":525}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ed82af67b35a1ab300b64ae3c1367f3e7667f55e8e5c47e0ec8d6b279b1d44c1b7a16ed217bba13414475ee95298fba0cabbb5910e0ee4ec23330237bf00803c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":28,"endLine":544,"snippet":{"text":"    if ($(comboProcuradores).find(\"option\").length <= 2) {"},"startColumn":11,"startLine":544}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ed82af67b35a1ab300b64ae3c1367f3e7667f55e8e5c47e0ec8d6b279b1d44c1b7a16ed217bba13414475ee95298fba0cabbb5910e0ee4ec23330237bf00803c_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":552,"snippet":{"text":"                cargarCombo($(comboProcuradores), xml, true);"},"startColumn":31,"startLine":552}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"1c735e355c4cd7e067d792781736d747abc4f6f6fc7299bd41697556f557ff8c418985d118d14d5176929031d12fb868997c78e0f3b88c50d0f5c6326dce0f3d_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":11,"endLine":710,"snippet":{"text":"    $(form).ajaxSubmit(ajaxSubmitOptions);"},"startColumn":7,"startLine":710}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"bec0c64665da09fe069697dcd89e7f35b178659d8d75e8d3f8e6d1530d06d5dd4d072598c4dddfc514d93c7b4508c991e3b2fc3eaaf486d5d7325fc674ee03fa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":34,"endLine":782,"snippet":{"text":"    var div = $(\"#\" + overlayName);"},"startColumn":23,"startLine":782}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"03cacfaa946a50c8e5b3b6ddcbedd06fe0172993da43ca7ef9948a7bb4f34ad030f4738cb1c98f8867838667cf8b31a593dbe4e9aab2f31400c78cdc8087377f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1221,"snippet":{"text":"    $(element).unbind(eventName);"},"startColumn":7,"startLine":1221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"03cacfaa946a50c8e5b3b6ddcbedd06fe0172993da43ca7ef9948a7bb4f34ad030f4738cb1c98f8867838667cf8b31a593dbe4e9aab2f31400c78cdc8087377f_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1222,"snippet":{"text":"    $(element).bind(eventName, event);"},"startColumn":7,"startLine":1222}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ac7de6d013bf3ff66d6f8e7a050ed7bffec7e130d66f56bbe74d393285499f0585898a473a9dcb2ae16d5137b4fcd0e9a4eab9a836606e9d2ff5140004b774fa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1226,"snippet":{"text":"    $(element).unbind(eventName);"},"startColumn":7,"startLine":1226}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"7c8a88a722ede13fe5c3975799b8a79347010f06444a07e8c48d2c6f130978080335649b8818248aa35a387331d7617dbce7c2f3bd9fe99a8c38ca9d3a4a05e5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":1394,"snippet":{"text":"                $(dtlCTRL).insertAfter(this);"},"startColumn":17,"startLine":1394}}}],"message":{"text":"User controlled data in a jQuery's `.insertAfter(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"7c8a88a722ede13fe5c3975799b8a79347010f06444a07e8c48d2c6f130978080335649b8818248aa35a387331d7617dbce7c2f3bd9fe99a8c38ca9d3a4a05e5_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":1540,"snippet":{"text":"                $(dtlCTRL).insertAfter(this);"},"startColumn":17,"startLine":1540}}}],"message":{"text":"User controlled data in a jQuery's `.insertAfter(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"aeba154c32dc01ac2d3094c6bc254a9f8102ccb2e5226991e17ad798c61270f01fd56985ab4dd583270f1eb30d2a9a33323ff45aeec3b96a8d3493eb921ce8b9_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":1836,"snippet":{"text":"        wnd.document.write($(this).html());"},"startColumn":28,"startLine":1836}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"2c3bd8b2d615512c95a8278820ef6d4daed6b2d8218a7e0f27e4c9d7dadc0256490771461968105f5b9e19348529f7a9a402470dfc0033592fd3ff79b4e731e7_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":1845,"snippet":{"text":"                    $(ui.panel).siblings(\".ui-tabs-panel\").empty();"},"startColumn":23,"startLine":1845}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"e9f56cd8963b137a19c41fab4793dee88fca1ff20672cc4ff1db7773fc6fe36faab996e87fb011ca0c9cbf2e28d9cdd757a1d014832b69b82a562bf135c726b0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":1979,"snippet":{"text":"    var messages = $(xml).find(\"*>MessageList>*\");"},"startColumn":22,"startLine":1979}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"5cfdbc314ffd2d9d5186ad1bb9f64a303febcb1cb4e19f40ed5b28e827fa0b0dd0637956fd37c79d3ed6a569fa285e13392d0edf1d6360a3d5bb0dd76bfbcf9c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":2954,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":2947,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6638,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":6637,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6783,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":6782,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":10005,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":10004,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"1324f5acbf839dd8826817f8f28f72a8727dabc90618e8b62772cf6d03d762518ba42002e93d940206d180708d287aa60e7983508966981b7a800d2fc898b4f6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":15112,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":15094,"startLine":1}}}],"message":{"text":"User controlled data in a jQuery's `.globalEval(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"989a0bbf54b4843d5bf6e2fff28004da44a03d0e22335f33099c1d232a2e8f43ed46c854a31cb1b3f636a116aca222f1067b6c4396de2c029aa27f8383c70f3e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":16175,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":16174,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"224f71505b94090b8bd7b0609debb72a3169116d28877850919f4c79cb6e649937be7fd0a6bc141fadd7f38c8f509a0824161f682f6a01b6faef336e23c158af_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":16289,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":16283,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"8fce374d7d943980a49b49ffd4cf5619a21108b05054413c7df7f844c1229390520b42c3f3f4ca60d8a9deb09f8c411c3d3025b0ba8a98382e8097b0152be6c3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":17281,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":17278,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"9ea275d969008f3555ff9e427fd2da1df838e95cd7b65832695885dfd886fa6eeff048b157bc5c3bef310496c124378deb7de8b7bfc56847807b669c6899c653_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20431,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":20429,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"06d26f4c487616185887ef984245f362ba0198ffbd6bf1e9c8a244ef71af746776df9d6b429085ef40d9cef5aa2a75b73b438ad260af6a9ff20edd5faf39e671_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":64,"snippet":{"text":"\t\t\tvar num = '0';\n\t\t\tnum = $this[$this.is('input, select, textarea') ? 'val' : 'html']();"},"startColumn":4,"startLine":63}}}],"message":{"text":"`num` is assigned twice; the first assignment is useless"},"properties":{},"ruleId":"opengrep-rules.javascript.lang.correctness.useless-assignment"},{"fingerprints":{"matchBasedId/v1":"d356f406e74a4099fb48769b3c9b7a6bc8af0dc7b164cf0b9fa66d429db67a1e55a24cc06bc37f99e6621ea7f53faba6510f38ccbb5ee8dcc6218c94b44d201c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":33,"endLine":132,"snippet":{"text":"\t\t\t\t$destination = $(destination);"},"startColumn":22,"startLine":132}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"cc109a322c4e3218cb3d6db9f17d33e3e55ac0bcb1aee5a35ef9d59035542128adb5ffc9fdeff08860bc398bec98805864cba95f21176a2949dd939bee4ba199_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":51,"endLine":205,"snippet":{"text":"\t\treturn window['parse' + settings.parseType](num);"},"startColumn":10,"startLine":205}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"1bb36950eb7cf41ba43519df4bbe6626c6fe8215545fa05fa357244ad4956011a86033244f81571a9d35fb14a7a6ea336d1a002a346dceb4ea888657a676c0d5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":236,"snippet":{"text":"\t\t\treturn new RegExp(\"[^\\\\d\" + settings.decimalSymbol + \"-]\", \"g\");"},"startColumn":11,"startLine":236}}}],"message":{"text":"RegExp() called with a `settings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"96145e0c8e8adb65588e9b6ab67794a4728c99d3ca9b6af30c961d9094691ff7782ae12d66f9ac90d688f98d9800e743705e85606990e8ad948dae0113d6a5b4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":239,"snippet":{"text":"\t\t\tvar symbol = settings.symbol.replace('$', '\\\\$').replace('.', '\\\\.');"},"startColumn":17,"startLine":239}}}],"message":{"text":"`settings.symbol.replace` method will only replace the first occurrence when used with a string argument ('$'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization"},{"fingerprints":{"matchBasedId/v1":"1bb36950eb7cf41ba43519df4bbe6626c6fe8215545fa05fa357244ad4956011a86033244f81571a9d35fb14a7a6ea336d1a002a346dceb4ea888657a676c0d5_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":240,"snippet":{"text":"\t\t\treturn new RegExp(symbol + \"|[^\\\\d\" + settings.decimalSymbol + \"-]\", \"g\");"},"startColumn":11,"startLine":240}}}],"message":{"text":"RegExp() called with a `settings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"bde714c7884370f32d5c8259d4a4f9a1b25a584867fde86b810f8cfea2d8eb3e3e48ec4edf1987ed4cccff09d4c30a7375d1142ca2a32bee44244a9838bbf6e0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":220,"snippet":{"text":"                            outElem.push({ regex: new RegExp(prevalidator.validator), cardinality: prevalidator.cardinality, optionality: isOptional, newBlockMarker: isOptional == true ? newBlockMarker : false, offset: 0 });"},"startColumn":51,"startLine":220}}}],"message":{"text":"RegExp() called with a `element` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"bde714c7884370f32d5c8259d4a4f9a1b25a584867fde86b810f8cfea2d8eb3e3e48ec4edf1987ed4cccff09d4c30a7375d1142ca2a32bee44244a9838bbf6e0_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":76,"endLine":224,"snippet":{"text":"                        outElem.push({ regex: new RegExp(maskdef.validator), cardinality: maskdef.cardinality, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0 });"},"startColumn":47,"startLine":224}}}],"message":{"text":"RegExp() called with a `element` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"3f5bfad0ac1f4d5ce6ca7d82dd12bd00997730770a6784312c4b7a4eb8ca890dda2bff360f774b3552f91f7a724a73c1898a07f89d2a8761c17a50f267039f3e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":416,"snippet":{"text":"            var input = $(el);"},"startColumn":27,"startLine":416}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"01c9be4a7b2d4d3b79122789afa00d12e832ee3573437277db0e0705bcda6d8b38b7f8d1041055a4730921d467a52d7f4d6ba8d222657665f2c8a4707ce99846_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":148,"snippet":{"text":"\t\t\t\t\tinlineSettings[attrName] = eval(attrValue);"},"startColumn":33,"startLine":148}}}],"message":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"properties":{},"ruleId":"opengrep-rules.javascript.browser.security.eval-detected"},{"fingerprints":{"matchBasedId/v1":"17b314cfa6c7ae4b9333f47ae9413f3d118fbf16f270acf44556b45181af68a6db12d8ac1add3c718a0b68603fd4880b0503e411aa20ad11a4c4681004e89453_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":158,"snippet":{"text":"\t\tvar inst = this._newInst($(target), inline);"},"startColumn":30,"startLine":158}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"30f1c19b945004f6b36ec1c11f2559477fb7b7be71ac80367cda7ca10224caf78a22175403f7fa65e97feaccbdd9d9bba45ac9d89910e523d40c07c910ad783f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":23,"endLine":180,"snippet":{"text":"\t\tvar input = $(target);"},"startColumn":17,"startLine":180}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"d34475a77b5c0175ea211266a6bdf5dcb9fd541940d0fbfe054bbe4897433f23661dfebb2a571c8af9ab1c907e59419b1e538a59d37c47e98adde7417365240c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":204,"snippet":{"text":"\t\t\tinst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');"},"startColumn":65,"startLine":204}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"a1839bee1ae813618c93ac8cf4a7dc15ed97f308276aecef24f4b06d35fa91ac305832c480166b6efe54cc7e3bea515e2a6b9642ca24be39639413306773df7c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":216,"snippet":{"text":"\t\t\tinst.trigger = $(this._get(inst, 'buttonImageOnly') ?"},"startColumn":31,"startLine":216}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6,"endLine":217,"snippet":{"text":"\t\t\t\t$('<img/>').addClass(this._triggerClass)."},"startColumn":5,"startLine":217}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":18,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":36,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":55,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6,"endLine":219,"snippet":{"text":"\t\t\t\t$('<button type=\"button\"></button>').addClass(this._triggerClass)."},"startColumn":5,"startLine":219}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e11cad28e03f7a02952b9b51362a0fc004f061fe1fa7b8dc637cb2285858581e5a56c028d2c29ed2e9c00dbc400a04deb450b4ee135fc7803ca5d818cc5900d_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":61,"endLine":221,"snippet":{"text":"\t\t\t\t$('<button type=\"button\"></button>').addClass(this._triggerClass).\n\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr(\n\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":5,"startLine":219}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":22,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":11,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":41,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":31,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":44,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":23,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":12,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_3"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":39,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":29,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_4"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":47,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"4df3b779aec663f344a5f81dabd21ce1117df37977b3dd7228dabaa32fe2c891074132ffff5777e005631e8b30fa6dc193e5088e35380b0e7580972e9f187e6a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":261,"snippet":{"text":"\t\tvar divSpan = $(target);"},"startColumn":19,"startLine":261}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"e89a8751d370d1eaf61d71ae242933b3cee9f27282a9943ef015e36681d5a45f0e2d9a9f769dada97e499f4d972d42ce22a4be69534a331acb1d04660e62d8e5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":39,"endLine":292,"snippet":{"text":"\t\t\t$('body').append(this._dialogInput);"},"startColumn":4,"startLine":292}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"3d1d1aa567e6b414142a621519e569cc98700c67e61b4331ebb6b09b3e74d7702ae24c7bc4d81c723526661c45629c5eb90e49a07e7ded95299a481555322fac_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":326,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":326}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b72f0299593830d45bd12eb2317143994b514dc59e1ad3692c4bd8d490cce022244a82cc2049c54852a137e134de2b2578e005a3a3e45c04829a858d72c3eccd_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":348,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":348}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e1de83fe64eb53e5231ea8ac414e9a4352386774ffc9f72416c723bf0e0b3ace127e3b675c4ef1f2ba896b1ef4c527ebe9ae468dddde3ef4753ceff7d7fceb3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":371,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":371}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"8da6ed86fefe04c80f953e9be1b77af915a8bad8dee299fb576101b5636835048c9d59a5fad7c5453198d870661680b52ac5b1d6fba9e0bbfe90b01f31843850_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":445,"snippet":{"text":"\t\t\tthis._attachments($(target), inst);"},"startColumn":24,"startLine":445}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"f3b594e3fcde07a395d2a946e5ca4a361a1a5145cb57bfcf755bb4e6639bebe01e38f9c9106b13877e514d40f2e5c7ad8d4c38f9e9328ef3c5f547ea65a5be93_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":10,"endLine":615,"snippet":{"text":"\t\t$(input).parents().each(function() {"},"startColumn":5,"startLine":615}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"f3b594e3fcde07a395d2a946e5ca4a361a1a5145cb57bfcf755bb4e6639bebe01e38f9c9106b13877e514d40f2e5c7ad8d4c38f9e9328ef3c5f547ea65a5be93_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":644,"snippet":{"text":"\t\t\tinst.dpDiv.zIndex($(input).zIndex()+1);"},"startColumn":24,"startLine":644}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"368a552acb2fdf2734b105772d1a8cb6e135ef9e7e48d149eb92f0dc92ee2ea4037bde0fdfd1e093ba49a6e1fd4ecf8943693821cd6df5e824425691efab7f94_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":648,"snippet":{"text":"\t\t\t\tinst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);"},"startColumn":5,"startLine":648}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"960993d2d11787d9cfd46a6c32f689dc1843f4304e8e3ec9fd2f22a4030ef4850b016868f2c9d272f3cd92cfc3d98abaff0d0b1f3d3305cf4a1fd6bb0d23f739_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":692,"snippet":{"text":"\t\tinst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +\n\t\t\t'Class']('ui-datepicker-multi');"},"startColumn":3,"startLine":691}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"fae5590e492a6c868699ee981f7325ca176c7f2bf71c96c68a81e407c9e745eaa80c3c1244cc98cffd592aadb8d1e677eef8fc62e49b393583b5e3742919c0ff_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":33,"endLine":694,"snippet":{"text":"\t\tinst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +\n\t\t\t'Class']('ui-datepicker-rtl');"},"startColumn":3,"startLine":693}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"d588d85dcac52842f2f5d403e07266e9a7d5b594c9212cc201954fdbc05be2de723b735905bcc6bea6c81bc3c8764b2ee7adf56765558d346a10ef51bfc602a5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":740,"snippet":{"text":"        var position = $(obj).offset();"},"startColumn":26,"startLine":740}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"477a565a1e8453cd86a8464dbdca62dbb310799cca69cec9d61fd3d556ac7dbc400827d567f4d3489f48d9616166b3b132773f5f05e8cd674f8c8a96a3474bf0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":761,"snippet":{"text":"\t\t\t\tinst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :\n\t\t\t\t\t(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);"},"startColumn":5,"startLine":760}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"f6f26a371efe15d23a01d28b362e773ae46a3d113e5b8ddd466f7138e002caaec85e414090aad830104f582028a73ada935a4f3d04b9faa4ea3eaa704f7fe028_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":34,"endLine":774,"snippet":{"text":"\t\t\t\t\t$('body').append(this.dpDiv);"},"startColumn":6,"startLine":774}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"923b17c8e34774e1228b0005da6730df24c24e3cdf7c344f8ea6bcba602f85049fa3f8da5125a88f9ef04f0a00269c021ba36ce58848031e450dd82cb90a9261_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":790,"snippet":{"text":"\t\tvar $target = $(event.target);"},"startColumn":19,"startLine":790}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"2e5cba4061433529ecf47cea4558844f07663a5e7cc3070127e30121426923f156079862b2ff1df903569116981d1fdf2e487a76cde04cc55059efd099a9cc40_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":801,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":801}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"27af7193c883c166d9394113dc0acdc215b410b1537b47673a83fe3a743679db0679ee525aa058914cb2241e0ed8856f3ef204effa1d8875cebb9321b61b2757_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":814,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":814}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"9c97d8c391650a4cddf0671eea71764d963259045ea4dc2fd10770d8e894115f07e11784383e1183422b15f6d3b63e7edcbfcaf70ccb85c0d37ebb9c8d8f63d4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":833,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":833}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"d0eb8baad67fa12a2c26065cd8afa4ebb64536e1de65a20adeb49c991298d61d442f1454f01fc5c5c88f3106e6710dd2880af300078e4b08db5ce9e46addb906_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":845,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":845}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"c496c2ff2bb1537ff5e8faf68da5ecff6f4f5ec0d577431226759ee02a90a80b1649d23c4e964b2260379d420df3f6ef965f6cabfe9fe1b262746e39fe5d8c0b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":854,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":854}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"2747d9cf085df0816f230ada632409ad87f295a614cc27d0ed8c12a6757e26317d16714abe0462af05da09e1c791d1ac3ec51c146ed13a844ac831816ec5ecfa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":11,"endLine":855,"snippet":{"text":"\t\tif ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {"},"startColumn":9,"startLine":855}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"570c69893893d219eb57accf18592f154cc870c8948fbf05bc8c1504383d1483ec3699780e9c06f6191cefb6d7c5ff374ef801fb2c92201e147ff4a0a47d4c1c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":859,"snippet":{"text":"\t\tinst.selectedDay = inst.currentDay = $('a', td).html();"},"startColumn":40,"startLine":859}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"a630509dccc90d0cfc61071a9ea1f694c9bdad083c2296ee2a0d7be4434b03612ad2ec893238ef204b950ef300ea795c7ad16665fa961530ffe0caafdd626f6c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":868,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":868}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6fa476d7d103b2f53b3354ae0e37ac62959fa6bd93ca35f4540fede5247c9b6b877fc5038db4e3801b772f526da7124683706ebf07c297fb2764779f6bbadb65_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":875,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":875}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e198d099d5701ff76371c421c33060cd55fe9f4e528612efc694c5e886344330d94e0ea0746fb438586d47b40a675d3423e8050cea665044eb8e001799ab846_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":904,"snippet":{"text":"\t\t\t$(altField).each(function() { $(this).val(dateStr); });"},"startColumn":6,"startLine":904}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"bb938eb1ba5cc6535031e625f3c91b4020b39d476fc569259f91404a1cf56c088dd80e2904b856a9aba137b8a6e17611f76111e1784e2cc0f2b061e9be4701d3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"menu.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":12,"snippet":{"text":"        $(lastSelection).hide();"},"startColumn":11,"startLine":12}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"7727af07672285f3d27f8c9ef982070f64aa53e630a801c2f65fc04303ad36f567c60c3c3f2b8d1fd916f8b163c3dece386388725278fd5a090d01f08fd80237_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"menu.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":22,"endLine":14,"snippet":{"text":"    $(\".\" + selection).toggle();"},"startColumn":13,"startLine":14}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"}],"tool":{"driver":{"name":"Opengrep OSS","rules":[{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production."},"help":{"markdown":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production.\n\n<b>References:</b>\n - [https://ajv.js.org/options.html#allerrors](https://ajv.js.org/options.html#allerrors)\n","text":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production."},"id":"opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true","name":"opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true","properties":{"precision":"very-high","tags":["CWE-400: Uncontrolled Resource Consumption","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"help":{"markdown":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/function/angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"id":"opengrep-rules.javascript.angular.security.detect-angular-element-methods","name":"opengrep-rules.javascript.angular.security.detect-angular-element-methods","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-element-methods"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"help":{"markdown":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/function/angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"id":"opengrep-rules.javascript.angular.security.detect-angular-element-taint","name":"opengrep-rules.javascript.angular.security.detect-angular-element-taint","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-element-taint"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use of $window.location.href can lead to open-redirect if user input is used for redirection."},"help":{"markdown":"Use of $window.location.href can lead to open-redirect if user input is used for redirection.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of $window.location.href can lead to open-redirect if user input is used for redirection."},"id":"opengrep-rules.javascript.angular.security.detect-angular-open-redirect","name":"opengrep-rules.javascript.angular.security.detect-angular-open-redirect","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used."},"help":{"markdown":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used."},"id":"opengrep-rules.javascript.angular.security.detect-angular-resource-loading","name":"opengrep-rules.javascript.angular.security.detect-angular-resource-loading","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-resource-loading"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."},"help":{"markdown":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."},"id":"opengrep-rules.javascript.angular.security.detect-angular-sce-disabled","name":"opengrep-rules.javascript.angular.security.detect-angular-sce-disabled","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-sce-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API."},"help":{"markdown":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method","name":"opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsCss](https://docs.angularjs.org/api/ng/service/$sce#trustAsCss)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml](https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary."},"help":{"markdown":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary.\n\n<b>References:</b>\n - [https://www.cvedetails.com/cve/CVE-2020-28168/](https://www.cvedetails.com/cve/CVE-2020-28168/)\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n","text":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary."},"id":"opengrep-rules.javascript.apollo.security.apollo-axios-ssrf","name":"opengrep-rules.javascript.apollo.security.apollo-axios-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.apollo.security.apollo-axios-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."},"help":{"markdown":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n - [https://eprint.iacr.org/2016/759.pdf](https://eprint.iacr.org/2016/759.pdf)\n - [https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf](https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf)\n - [https://datatracker.ietf.org/doc/html/rfc9106#section-4](https://datatracker.ietf.org/doc/html/rfc9106#section-4)\n","text":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."},"id":"opengrep-rules.javascript.argon2.security.unsafe-argon2-config","name":"opengrep-rules.javascript.argon2.security.unsafe-argon2-config","properties":{"precision":"very-high","tags":["CWE-916: Use of Password Hash With Insufficient Computational Effort","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.argon2.security.unsafe-argon2-config"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."},"help":{"markdown":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/dompurify](https://www.npmjs.com/package/dompurify)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."},"id":"opengrep-rules.javascript.audit.detect-replaceall-sanitization","name":"opengrep-rules.javascript.audit.detect-replaceall-sanitization","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.audit.detect-replaceall-sanitization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."},"help":{"markdown":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."},"id":"opengrep-rules.javascript.aws-lambda.security.detect-child-process","name":"opengrep-rules.javascript.aws-lambda.security.detect-child-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.detect-child-process"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"help":{"markdown":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"id":"opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object","name":"opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object","properties":{"precision":"very-high","tags":["CWE-943: Improper Neutralization of Special Elements in Data Query Logic","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.knex-sqli","name":"opengrep-rules.javascript.aws-lambda.security.knex-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.knex-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mysql2](https://www.npmjs.com/package/mysql2)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.mysql-sqli","name":"opengrep-rules.javascript.aws-lambda.security.mysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.mysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://node-postgres.com/features/queries](https://node-postgres.com/features/queries)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.pg-sqli","name":"opengrep-rules.javascript.aws-lambda.security.pg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.pg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`\n\n<b>References:</b>\n - [https://sequelize.org/master/manual/raw-queries.html](https://sequelize.org/master/manual/raw-queries.html)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"},"id":"opengrep-rules.javascript.aws-lambda.security.sequelize-sqli","name":"opengrep-rules.javascript.aws-lambda.security.sequelize-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.sequelize-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-eval","name":"opengrep-rules.javascript.aws-lambda.security.tainted-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"help":{"markdown":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-html-response","name":"opengrep-rules.javascript.aws-lambda.security.tainted-html-response","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-html-response"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-html-string","name":"opengrep-rules.javascript.aws-lambda.security.tainted-html-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-html-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.javascript.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."},"help":{"markdown":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."},"id":"opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection","name":"opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()"},"help":{"markdown":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()\n\n<b>References:</b>\n - [http://bluebirdjs.com/docs/getting-started.html](http://bluebirdjs.com/docs/getting-started.html)\n","text":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()"},"id":"opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution","name":"opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL."},"help":{"markdown":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/DOM_Based_XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS)\n","text":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL."},"id":"opengrep-rules.javascript.browser.security.dom-based-xss","name":"opengrep-rules.javascript.browser.security.dom-based-xss","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.dom-based-xss"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.javascript.browser.security.eval-detected","name":"opengrep-rules.javascript.browser.security.eval-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.eval-detected"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.browser.security.insecure-document-method","name":"opengrep-rules.javascript.browser.security.insecure-document-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insecure-document-method"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.browser.security.insecure-innerhtml","name":"opengrep-rules.javascript.browser.security.insecure-innerhtml","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insecure-innerhtml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS)."},"help":{"markdown":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS)."},"id":"opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation","name":"opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"help":{"markdown":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"id":"opengrep-rules.javascript.browser.security.js-open-redirect","name":"opengrep-rules.javascript.browser.security.js-open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.js-open-redirect"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"help":{"markdown":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"id":"opengrep-rules.javascript.browser.security.js-open-redirect-from-function","name":"opengrep-rules.javascript.browser.security.js-open-redirect-from-function","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.js-open-redirect-from-function"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a HTML string may result in XSS"},"help":{"markdown":"User controlled data in a HTML string may result in XSS\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"User controlled data in a HTML string may result in XSS"},"id":"opengrep-rules.javascript.browser.security.raw-html-concat","name":"opengrep-rules.javascript.browser.security.raw-html-concat","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.raw-html-concat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a HTML string may result in XSS"},"help":{"markdown":"User controlled data in a HTML string may result in XSS\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"User controlled data in a HTML string may result in XSS"},"id":"opengrep-rules.javascript.browser.security.raw-html-join","name":"opengrep-rules.javascript.browser.security.raw-html-join","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.raw-html-join"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."},"help":{"markdown":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."},"id":"opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration","name":"opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://github.com/cyrus-and/chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface)\n","text":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection","name":"opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."},"help":{"markdown":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.\n\n<b>References:</b>\n - [https://deno.land/manual/examples/subprocess#simple-example](https://deno.land/manual/examples/subprocess#simple-example)\n","text":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."},"id":"opengrep-rules.javascript.deno.security.audit.deno-dangerous-run","name":"opengrep-rules.javascript.deno.security.audit.deno-dangerous-run","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.deno.security.audit.deno-dangerous-run"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"help":{"markdown":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/csurf](https://www.npmjs.com/package/csurf)\n - [https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"id":"opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage","name":"opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."},"help":{"markdown":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n","text":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."},"id":"opengrep-rules.javascript.express.security.audit.express-check-directory-listing","name":"opengrep-rules.javascript.express.security.audit.express-check-directory-listing","properties":{"precision":"very-high","tags":["CWE-548: Exposure of Information Through Directory Listing","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-check-directory-listing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."},"help":{"markdown":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."},"help":{"markdown":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."},"help":{"markdown":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."},"help":{"markdown":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."},"help":{"markdown":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."},"help":{"markdown":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function."},"help":{"markdown":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.\n\n<b>References:</b>\n - [https://github.com/mmckegg/notevil](https://github.com/mmckegg/notevil)\n","text":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function."},"id":"opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage","name":"opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage","properties":{"precision":"very-high","tags":["CWE-1104: Use of Unmaintained Third Party Components","LOW CONFIDENCE","OWASP-A06:2021 - Vulnerable and Outdated Components","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."},"help":{"markdown":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."},"id":"opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked","name":"opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."},"help":{"markdown":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."},"id":"opengrep-rules.javascript.express.security.audit.express-libxml-noent","name":"opengrep-rules.javascript.express.security.audit.express-libxml-noent","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-libxml-noent"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it."},"help":{"markdown":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it."},"id":"opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent","name":"opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."},"help":{"markdown":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."},"id":"opengrep-rules.javascript.express.security.audit.express-open-redirect","name":"opengrep-rules.javascript.express.security.audit.express-open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination"},"help":{"markdown":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination"},"id":"opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal","name":"opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."},"help":{"markdown":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n","text":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."},"id":"opengrep-rules.javascript.express.security.audit.express-res-sendfile","name":"opengrep-rules.javascript.express.security.audit.express-res-sendfile","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-res-sendfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret","name":"opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "},"help":{"markdown":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. \n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "},"id":"opengrep-rules.javascript.express.security.audit.express-ssrf","name":"opengrep-rules.javascript.express.security.audit.express-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."},"help":{"markdown":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n","text":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."},"id":"opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization","name":"opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","HIGH CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n","text":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event","name":"opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."},"help":{"markdown":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n","text":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."},"id":"opengrep-rules.javascript.express.security.audit.remote-property-injection","name":"opengrep-rules.javascript.express.security.audit.remote-property-injection","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.remote-property-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."},"help":{"markdown":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.\n\n<b>References:</b>\n - [http://expressjs.com/en/4x/api.html#res.render](http://expressjs.com/en/4x/api.html#res.render)\n","text":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."},"id":"opengrep-rules.javascript.express.security.audit.res-render-injection","name":"opengrep-rules.javascript.express.security.audit.res-render-injection","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.res-render-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."},"help":{"markdown":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."},"id":"opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect","name":"opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"help":{"markdown":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"id":"opengrep-rules.javascript.express.security.audit.xss.direct-response-write","name":"opengrep-rules.javascript.express.security.audit.xss.direct-response-write","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.direct-response-write"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n<b>References:</b>\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n","text":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"help":{"markdown":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'."},"help":{"markdown":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'.\n\n<b>References:</b>\n - [https://github.com/janl/mustache.js/#variables](https://github.com/janl/mustache.js/#variables)\n","text":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://github.com/janl/mustache.js/#variables](https://github.com/janl/mustache.js/#variables)\n - [https://ractive.js.org/v0.x/0.7/mustaches#variables](https://ractive.js.org/v0.x/0.7/mustaches#variables)\n","text":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://pugjs.org/language/attributes.html#attributes](https://pugjs.org/language/attributes.html#attributes)\n","text":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes","name":"opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://pugjs.org/language/code.html#unescaped-buffered-code](https://pugjs.org/language/code.html#unescaped-buffered-code)\n - [https://pugjs.org/language/attributes.html#unescaped-attributes](https://pugjs.org/language/attributes.html#unescaped-attributes)\n","text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href","name":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."},"help":{"markdown":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n","text":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."},"id":"opengrep-rules.javascript.express.security.cors-misconfiguration","name":"opengrep-rules.javascript.express.security.cors-misconfiguration","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.cors-misconfiguration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"help":{"markdown":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.\n\n<b>References:</b>\n - [https://en.wikipedia.org/wiki/Mass_assignment_vulnerability](https://en.wikipedia.org/wiki/Mass_assignment_vulnerability)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"id":"opengrep-rules.javascript.express.security.express-data-exfiltration","name":"opengrep-rules.javascript.express.security.express-data-exfiltration","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-data-exfiltration"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."},"help":{"markdown":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.\n\n<b>References:</b>\n - [https://github.com/astro/node-expat](https://github.com/astro/node-expat)\n","text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."},"id":"opengrep-rules.javascript.express.security.express-expat-xxe","name":"opengrep-rules.javascript.express.security.express-expat-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-expat-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."},"help":{"markdown":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."},"id":"opengrep-rules.javascript.express.security.express-insecure-template-usage","name":"opengrep-rules.javascript.express.security.express-insecure-template-usage","properties":{"precision":"very-high","tags":["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-insecure-template-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret","name":"opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://phantomjs.org/page-automation.html](https://phantomjs.org/page-automation.html)\n","text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-phantom-injection","name":"opengrep-rules.javascript.express.security.express-phantom-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-phantom-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://pptr.dev/api/puppeteer.page](https://pptr.dev/api/puppeteer.page)\n","text":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-puppeteer-injection","name":"opengrep-rules.javascript.express.security.express-puppeteer-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-puppeteer-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach `sandbox`."},"help":{"markdown":"Make sure that unverified user data can not reach `sandbox`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `sandbox`."},"id":"opengrep-rules.javascript.express.security.express-sandbox-code-injection","name":"opengrep-rules.javascript.express.security.express-sandbox-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-sandbox-code-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach `$VM`."},"help":{"markdown":"Make sure that unverified user data can not reach `$VM`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `$VM`."},"id":"opengrep-rules.javascript.express.security.express-vm-injection","name":"opengrep-rules.javascript.express.security.express-vm-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-vm-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.express.security.express-vm2-injection","name":"opengrep-rules.javascript.express.security.express-vm2-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-vm2-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/wkhtmltopdf](https://www.npmjs.com/package/wkhtmltopdf)\n","text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection","name":"opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/wkhtmltopdf](https://www.npmjs.com/package/wkhtmltopdf)\n","text":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection","name":"opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n","text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-xml2json-xxe","name":"opengrep-rules.javascript.express.security.express-xml2json-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-xml2json-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."},"help":{"markdown":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."},"id":"opengrep-rules.javascript.express.security.injection.raw-html-format","name":"opengrep-rules.javascript.express.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.javascript.express.security.injection.tainted-sql-string","name":"opengrep-rules.javascript.express.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."},"help":{"markdown":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.\n\n<b>References:</b>\n - [https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it](https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it)\n","text":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."},"id":"opengrep-rules.javascript.express.security.require-request","name":"opengrep-rules.javascript.express.security.require-request","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.require-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."},"help":{"markdown":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\n","text":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."},"id":"opengrep-rules.javascript.express.security.x-frame-options-misconfiguration","name":"opengrep-rules.javascript.express.security.x-frame-options-misconfiguration","properties":{"precision":"very-high","tags":["CWE-451: User Interface (UI) Misrepresentation of Critical Information","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.x-frame-options-misconfiguration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup","name":"opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."},"help":{"markdown":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\n\n<b>References:</b>\n - [https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security](https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security)\n","text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."},"id":"opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection","name":"opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"},"help":{"markdown":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile\n\n<b>References:</b>\n - [https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile](https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile)\n","text":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"},"id":"opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash","name":"opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.javascript.jose.security.audit.jose-exposed-data","name":"opengrep-rules.javascript.jose.security.audit.jose-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.audit.jose-exposed-data"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.jose.security.hardcoded-jwt-secret","name":"opengrep-rules.javascript.jose.security.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.javascript.jose.security.jwt-none-alg","name":"opengrep-rules.javascript.jose.security.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n - [https://bugs.jquery.com/ticket/9521](https://bugs.jquery.com/ticket/9521)\n","text":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method","name":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n - [https://bugs.jquery.com/ticket/9521](https://bugs.jquery.com/ticket/9521)\n","text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector","name":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"help":{"markdown":"## Remediation\nAvoid using JQuery's html() function. If the string is plain text, use the text() function instead.\nOtherwise, use a function that escapes html such as edx's HtmlUtils.setHtml().\n\n\n<b>References:</b>\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html)\n - [https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks](https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks)\n - [https://api.jquery.com/text/#text-text](https://api.jquery.com/text/#text-text)\n","text":"## Remediation\nAvoid using JQuery's html() function. If the string is plain text, use the text() function instead.\nOtherwise, use a function that escapes html such as edx's HtmlUtils.setHtml().\n"},"id":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html","name":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"id":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify","name":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data","name":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret","name":"opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg","name":"opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/jwt-simple](https://www.npmjs.com/package/jwt-simple)\n - [https://cwe.mitre.org/data/definitions/287](https://cwe.mitre.org/data/definitions/287)\n - [https://cwe.mitre.org/data/definitions/345](https://cwe.mitre.org/data/definitions/345)\n - [https://cwe.mitre.org/data/definitions/347](https://cwe.mitre.org/data/definitions/347)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."},"id":"opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify","name":"opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","CWE-345: Insufficient Verification of Data Authenticity","CWE-347: Improper Verification of Cryptographic Signature","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs."},"help":{"markdown":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs.","text":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs."},"id":"opengrep-rules.javascript.lang.best-practice.assigned-undefined","name":"opengrep-rules.javascript.lang.best-practice.assigned-undefined","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.assigned-undefined"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found alert() call; should this be in production code?"},"help":{"markdown":"found alert() call; should this be in production code?","text":"found alert() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-alert","name":"opengrep-rules.javascript.lang.best-practice.javascript-alert","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-alert"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found confirm() call; should this be in production code?"},"help":{"markdown":"found confirm() call; should this be in production code?","text":"found confirm() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-confirm","name":"opengrep-rules.javascript.lang.best-practice.javascript-confirm","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-confirm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found debugger call; should this be in production code?"},"help":{"markdown":"found debugger call; should this be in production code?","text":"found debugger call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-debugger","name":"opengrep-rules.javascript.lang.best-practice.javascript-debugger","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-debugger"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found prompt() call; should this be in production code?"},"help":{"markdown":"found prompt() call; should this be in production code?","text":"found prompt() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-prompt","name":"opengrep-rules.javascript.lang.best-practice.javascript-prompt","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-prompt"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions."},"help":{"markdown":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.\n\n<b>References:</b>\n - [https://nodesecroadmap.fyi/chapter-2/dynamism.html](https://nodesecroadmap.fyi/chapter-2/dynamism.html)\n - [https://github.com/goldbergyoni/nodebestpractices#-38-require-modules-first-not-inside-functions](https://github.com/goldbergyoni/nodebestpractices#-38-require-modules-first-not-inside-functions)\n","text":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions."},"id":"opengrep-rules.javascript.lang.best-practice.lazy-load-module","name":"opengrep-rules.javascript.lang.best-practice.lazy-load-module","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.lazy-load-module"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort."},"help":{"markdown":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort.\n\n<b>References:</b>\n - [https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations](https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations)\n","text":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort."},"id":"opengrep-rules.javascript.lang.best-practice.zlib-async-loop","name":"opengrep-rules.javascript.lang.best-practice.zlib-async-loop","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.zlib-async-loop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex."},"help":{"markdown":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.","text":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex."},"id":"opengrep-rules.javascript.lang.correctness.eqeq-is-bad","name":"opengrep-rules.javascript.lang.correctness.eqeq-is-bad","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.eqeq-is-bad"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?"},"help":{"markdown":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?","text":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?"},"id":"opengrep-rules.javascript.lang.correctness.missing-template-string-indicator","name":"opengrep-rules.javascript.lang.correctness.missing-template-string-indicator","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.missing-template-string-indicator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)"},"help":{"markdown":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)\n\n<b>References:</b>\n - [https://discourse.threejs.org/t/replaceall-is-not-a-function/14585](https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)\n","text":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)"},"id":"opengrep-rules.javascript.lang.correctness.no-replaceall","name":"opengrep-rules.javascript.lang.correctness.no-replaceall","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.no-replaceall"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead."},"help":{"markdown":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/json-stable-stringify](https://www.npmjs.com/package/json-stable-stringify)\n - [https://stackoverflow.com/a/16168003](https://stackoverflow.com/a/16168003)\n","text":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead."},"id":"opengrep-rules.javascript.lang.correctness.no-stringify-keys","name":"opengrep-rules.javascript.lang.correctness.no-stringify-keys","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.no-stringify-keys"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"`$X` is assigned twice; the first assignment is useless"},"help":{"markdown":"`$X` is assigned twice; the first assignment is useless","text":"`$X` is assigned twice; the first assignment is useless"},"id":"opengrep-rules.javascript.lang.correctness.useless-assignment","name":"opengrep-rules.javascript.lang.correctness.useless-assignment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.useless-assignment"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."},"help":{"markdown":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\n - [https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback](https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback)\n - [https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/](https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/)\n - [https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html](https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html)\n","text":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."},"id":"opengrep-rules.javascript.lang.security.audit.code-string-concat","name":"opengrep-rules.javascript.lang.security.audit.code-string-concat","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.code-string-concat"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."},"help":{"markdown":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\n","text":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."},"id":"opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell","name":"opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."},"help":{"markdown":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"help":{"markdown":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n","text":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."},"help":{"markdown":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js)\n","text":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-require","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-require","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-require"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."},"help":{"markdown":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://www.regular-expressions.info/redos.html](https://www.regular-expressions.info/redos.html)\n","text":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."},"id":"opengrep-rules.javascript.lang.security.audit.detect-redos","name":"opengrep-rules.javascript.lang.security.audit.detect-redos","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-redos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."},"help":{"markdown":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.\n\n<b>References:</b>\n - [https://rules.sonarsource.com/javascript/RSPEC-2068](https://rules.sonarsource.com/javascript/RSPEC-2068)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management)\n","text":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."},"id":"opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key","name":"opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"help":{"markdown":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"id":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization","name":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.incomplete-sanitization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package.\n\n<b>References:</b>\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package."},"id":"opengrep-rules.javascript.lang.security.audit.md5-used-as-password","name":"opengrep-rules.javascript.lang.security.audit.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."},"help":{"markdown":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."},"id":"opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal","name":"opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"help":{"markdown":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.\n\n<b>References:</b>\n - [https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n","text":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"id":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment","name":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"help":{"markdown":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.\n\n<b>References:</b>\n - [https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n","text":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"id":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop","name":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."},"help":{"markdown":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."},"id":"opengrep-rules.javascript.lang.security.audit.spawn-shell-true","name":"opengrep-rules.javascript.lang.security.audit.spawn-shell-true","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.spawn-shell-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."},"help":{"markdown":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.\n\n<b>References:</b>\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mssql](https://www.npmjs.com/package/mssql)\n","text":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`"},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"help":{"markdown":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mysql2](https://www.npmjs.com/package/mysql2)\n - [https://www.npmjs.com/package/mysql](https://www.npmjs.com/package/mysql)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://node-postgres.com/features/queries](https://node-postgres.com/features/queries)\n","text":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."},"help":{"markdown":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\n\n<b>References:</b>\n - [https://www.developsec.com/2017/11/09/xss-in-a-script-tag/](https://www.developsec.com/2017/11/09/xss-in-a-script-tag/)\n - [https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68](https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68)\n","text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."},"id":"opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag","name":"opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"help":{"markdown":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"id":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method","name":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/134.html](https://cwe.mitre.org/data/definitions/134.html)\n","text":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."},"id":"opengrep-rules.javascript.lang.security.audit.unsafe-formatstring","name":"opengrep-rules.javascript.lang.security.audit.unsafe-formatstring","properties":{"precision":"very-high","tags":["CWE-134: Use of Externally-Controlled Format String","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unsafe-formatstring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."},"help":{"markdown":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/119.html](https://cwe.mitre.org/data/definitions/119.html)\n","text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."},"id":"opengrep-rules.javascript.lang.security.detect-buffer-noassert","name":"opengrep-rules.javascript.lang.security.detect-buffer-noassert","properties":{"precision":"very-high","tags":["CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-buffer-noassert"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "},"help":{"markdown":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\n","text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "},"id":"opengrep-rules.javascript.lang.security.detect-child-process","name":"opengrep-rules.javascript.lang.security.detect-child-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-child-process"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."},"help":{"markdown":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."},"id":"opengrep-rules.javascript.lang.security.detect-disable-mustache-escape","name":"opengrep-rules.javascript.lang.security.detect-disable-mustache-escape","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-disable-mustache-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."},"help":{"markdown":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\n","text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."},"id":"opengrep-rules.javascript.lang.security.detect-eval-with-expression","name":"opengrep-rules.javascript.lang.security.detect-eval-with-expression","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-eval-with-expression"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."},"help":{"markdown":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."},"id":"opengrep-rules.javascript.lang.security.detect-insecure-websocket","name":"opengrep-rules.javascript.lang.security.detect-insecure-websocket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-insecure-websocket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."},"help":{"markdown":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md)\n","text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."},"id":"opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override","name":"opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."},"help":{"markdown":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."},"id":"opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes","name":"opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."},"help":{"markdown":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."},"id":"opengrep-rules.javascript.lang.security.html-in-template-string","name":"opengrep-rules.javascript.lang.security.html-in-template-string","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.html-in-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"help":{"markdown":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n - [https://en.wikipedia.org/wiki/Mass_assignment_vulnerability](https://en.wikipedia.org/wiki/Mass_assignment_vulnerability)\n","text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"id":"opengrep-rules.javascript.lang.security.insecure-object-assign","name":"opengrep-rules.javascript.lang.security.insecure-object-assign","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.insecure-object-assign"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."},"help":{"markdown":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."},"id":"opengrep-rules.javascript.lang.security.spawn-git-clone","name":"opengrep-rules.javascript.lang.security.spawn-git-clone","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.spawn-git-clone"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input."},"help":{"markdown":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input.\n\n<b>References:</b>\n - [https://github.com/microsoft/monaco-editor/issues/801](https://github.com/microsoft/monaco-editor/issues/801)\n","text":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input."},"id":"opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport","name":"opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext."},"help":{"markdown":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext.\n\n<b>References:</b>\n - [https://nodejs.org/api/crypto.html#deciphersetauthtagbuffer-encoding](https://nodejs.org/api/crypto.html#deciphersetauthtagbuffer-encoding)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext."},"id":"opengrep-rules.javascript.node-crypto.security.aead-no-final","name":"opengrep-rules.javascript.node-crypto.security.aead-no-final","properties":{"precision":"very-high","tags":["CWE-310: CWE CATEGORY: Cryptographic Issues","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.aead-no-final"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead."},"help":{"markdown":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead.\n\n<b>References:</b>\n - [https://nodejs.org/api/crypto.html#cryptocreatecipheralgorithm-password-options](https://nodejs.org/api/crypto.html#cryptocreatecipheralgorithm-password-options)\n - [https://nodejs.org/api/crypto.html#cryptocreatedecipheralgorithm-password-options](https://nodejs.org/api/crypto.html#cryptocreatedecipheralgorithm-password-options)\n","text":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead."},"id":"opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv","name":"opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv","properties":{"precision":"very-high","tags":["CWE-1204: Generation of Weak Initialization Vector (IV)","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries."},"help":{"markdown":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries.\n\n<b>References:</b>\n - [https://www.securesystems.de/blog/forging_ciphertexts_under_Galois_Counter_Mode_for_the_Node_js_crypto_module/](https://www.securesystems.de/blog/forging_ciphertexts_under_Galois_Counter_Mode_for_the_Node_js_crypto_module/)\n - [https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options](https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries."},"id":"opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length","name":"opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length","properties":{"precision":"very-high","tags":["CWE-310: CWE CATEGORY: Cryptographic Issues","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.node-expat.security.audit.expat-xxe","name":"opengrep-rules.javascript.node-expat.security.audit.expat-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-expat.security.audit.expat-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret","name":"opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.phantom.security.audit.phantom-injection","name":"opengrep-rules.javascript.phantom.security.audit.phantom-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.phantom.security.audit.phantom-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"help":{"markdown":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools","name":"opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"help":{"markdown":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?"},"help":{"markdown":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?","text":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?"},"id":"opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state","name":"opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `sandbox`."},"help":{"markdown":"Make sure that unverified user data can not reach `sandbox`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `sandbox`."},"id":"opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection","name":"opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."},"help":{"markdown":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\n\n<b>References:</b>\n - [https://github.com/Leonidas-from-XIV/node-xml2js/issues/415](https://github.com/Leonidas-from-XIV/node-xml2js/issues/415)\n - [https://github.com/isaacs/sax-js](https://github.com/isaacs/sax-js)\n","text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."},"id":"opengrep-rules.javascript.sax.security.audit.sax-xxe","name":"opengrep-rules.javascript.sax.security.audit.sax-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sax.security.audit.sax-xxe"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"help":{"markdown":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n","text":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"id":"opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection","name":"opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""},"help":{"markdown":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n - [https://nodejs.org/api/tls.html#tls_tls_default_min_version](https://nodejs.org/api/tls.html#tls_tls_default_min_version)\n","text":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html"},"help":{"markdown":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html\n\n<b>References:</b>\n - [https://sequelize.org/master/manual/raw-queries.html](https://sequelize.org/master/manual/raw-queries.html)\n","text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html"},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"help":{"markdown":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n","text":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"help":{"markdown":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n - [https://nodejs.org/api/tls.html#tls_tls_default_min_version](https://nodejs.org/api/tls.html#tls_tls_default_min_version)\n","text":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."},"help":{"markdown":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."},"id":"opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript","name":"opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript","properties":{"precision":"very-high","tags":["CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `exec` method it can result in Remote Code Execution"},"help":{"markdown":"If unverified user data can reach the `exec` method it can result in Remote Code Execution\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"If unverified user data can reach the `exec` method it can result in Remote Code Execution"},"id":"opengrep-rules.javascript.shelljs.security.shelljs-exec-injection","name":"opengrep-rules.javascript.shelljs.security.shelljs-exec-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.shelljs.security.shelljs-exec-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential arbitrary code execution, piped to eval"},"help":{"markdown":"Potential arbitrary code execution, piped to eval\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Potential arbitrary code execution, piped to eval"},"id":"opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution","name":"opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.vm2.security.audit.vm2-code-injection","name":"opengrep-rules.javascript.vm2.security.audit.vm2-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vm2.security.audit.vm2-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.vm2.security.audit.vm2-context-injection","name":"opengrep-rules.javascript.vm2.security.audit.vm2-context-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vm2.security.audit.vm2-context-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content."},"help":{"markdown":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.\n\n<b>References:</b>\n - [https://vuejs.org/v2/guide/syntax.html#Raw-HTML](https://vuejs.org/v2/guide/syntax.html#Raw-HTML)\n","text":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content."},"id":"opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html","name":"opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection","name":"opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection","name":"opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe","name":"opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe"}}],"semanticVersion":"1.8.6"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}