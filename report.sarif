{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"ca456a40af80bfdbb73a276717ffceaa2e3ce107b6e7462f73631a1863aa4ed762f92c0a43d279723dcd774432f93d3cd489dcfffabd21f76b2d278213c65068_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":164,"snippet":{"text":"        ctrl = $(\"#\" + campo.name);"},"startColumn":24,"startLine":164}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"43b31d95cd3975ca2ac01ddc7fff803646450dfc04dbe4632b47948d8a3a9ce07cb171ce4507ac864a2e70ddc350c56a8694eee3abc4d8b1aed1332b2c80c90f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":473,"snippet":{"text":"        var elementos = $(xml).find(\"Filas\");"},"startColumn":27,"startLine":473}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"345ab4e75982b7a2f7bf94118e8648bafbd376559b497b93892406e8c3d2f331722601ec799b1f345e25d488ee7d43304e9ffe91169f5f1a86209036bffcc98c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":474,"snippet":{"text":"        $(elementos).find(\"Fila\").each(function () {"},"startColumn":11,"startLine":474}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b8e9148baf5ffe99f35a4c063a6508aedf082fe6c024df26a1ad9a18549c8bdb918173880c48b391ef812e3be9debccab028619dfbcf20f076f9ee7085a113ee_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":139,"endLine":485,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"' \" + seleccionado + \">\" + descripcion + \"</option>\");"},"startColumn":13,"startLine":485}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"a58a10f2aa0ba8a7dba74a2e278444861165de032a07da7651d75e7303e30ae880dc0a6895feb2073f7ffdb148717058178eb2d92583fa84df050c0365cd258e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":485,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"' \" + seleccionado + \">\" + descripcion + \"</option>\");"},"startColumn":15,"startLine":485}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"98c43f2a0e80f2c97709650a6c028c52594e01a767d1ded2a749fe511759c8b65cf7dc65852ffc59a514218cb7c1bb84cab96e8c42f1eee162ec906151c11d72_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":495,"snippet":{"text":"        var elementos = $(xml).find(\"Filas\");"},"startColumn":27,"startLine":495}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ac997e998cf1b09a2ba848c9b7e1e233f2f28623c28a46bad8a63d9bde606aa805b3cf470423969a45c9ed7fa37fc32802589e0db16efe23ec254d353ed48686_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":496,"snippet":{"text":"        $(elementos).find(\"Fila\").each(function () {"},"startColumn":11,"startLine":496}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"53a9845a6a9ed607af56a0ed6290617fdeb9df6b9a0be6b8e63309b87cf952c464293ba9dd9a53ec1732a924d63697353f2bb907416de7369b368ab9ae2cfda1_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":132,"endLine":499,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"'>\" + clave + \"-\" + descripcion + \"</option>\");"},"startColumn":13,"startLine":499}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"5a5e0440183c7517f6c433351f1e42bd2a3ff317b2fb29ea4b8083c65d8094502d4de8b1353c0c4f42edb943989d860f89ba03e013f03e8c62fb9bd7ce1510f0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":499,"snippet":{"text":"            $(combo).append(\"<option title='\" + descripcion + \"' value='\" + clave + \"'>\" + clave + \"-\" + descripcion + \"</option>\");"},"startColumn":15,"startLine":499}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":12,"endLine":505,"snippet":{"text":"    $(combo).find(\"option\").remove().end();"},"startColumn":7,"startLine":505}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"158dc04a1e224fc378189ab9a4230eee816ae532303a009b7869f018201b468a50cc00cd91e1991b7e19d411aafbcafc9d4aa524a348fdc6f6953245a8a3e2f6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":508,"snippet":{"text":"            $(combo).append(\"<option value=''>\" + textoBlanco + \"</option>\");"},"startColumn":13,"startLine":508}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":508,"snippet":{"text":"            $(combo).append(\"<option value=''>\" + textoBlanco + \"</option>\");"},"startColumn":15,"startLine":508}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"207db7eaa5229c32fd317809b422e7bbcae145974e2633ac4d861191e1dfb1a8134cbfc765972815aa49f5f64dd3d921bd7d20fe10faa9b5c319adbbca4aaa2a_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":511,"snippet":{"text":"            $(combo).append(\"<option value=''></option>\");"},"startColumn":15,"startLine":511}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0dd2ad9347d56f51da00d62f0db109fcbf4d7d56cf28d69fb58b680e070c76daaf7789372d7ba611f7e3a15e13113f0932d1674a34235341757b5b0c6a13b1e9_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":517,"snippet":{"text":"    if ($(comboLetrados).find(\"option\").length <= 2) {"},"startColumn":11,"startLine":517}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0dd2ad9347d56f51da00d62f0db109fcbf4d7d56cf28d69fb58b680e070c76daaf7789372d7ba611f7e3a15e13113f0932d1674a34235341757b5b0c6a13b1e9_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":44,"endLine":525,"snippet":{"text":"                cargarCombo($(comboLetrados), xml, true);"},"startColumn":31,"startLine":525}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ed82af67b35a1ab300b64ae3c1367f3e7667f55e8e5c47e0ec8d6b279b1d44c1b7a16ed217bba13414475ee95298fba0cabbb5910e0ee4ec23330237bf00803c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":28,"endLine":544,"snippet":{"text":"    if ($(comboProcuradores).find(\"option\").length <= 2) {"},"startColumn":11,"startLine":544}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ed82af67b35a1ab300b64ae3c1367f3e7667f55e8e5c47e0ec8d6b279b1d44c1b7a16ed217bba13414475ee95298fba0cabbb5910e0ee4ec23330237bf00803c_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":552,"snippet":{"text":"                cargarCombo($(comboProcuradores), xml, true);"},"startColumn":31,"startLine":552}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"1c735e355c4cd7e067d792781736d747abc4f6f6fc7299bd41697556f557ff8c418985d118d14d5176929031d12fb868997c78e0f3b88c50d0f5c6326dce0f3d_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":11,"endLine":710,"snippet":{"text":"    $(form).ajaxSubmit(ajaxSubmitOptions);"},"startColumn":7,"startLine":710}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"bec0c64665da09fe069697dcd89e7f35b178659d8d75e8d3f8e6d1530d06d5dd4d072598c4dddfc514d93c7b4508c991e3b2fc3eaaf486d5d7325fc674ee03fa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":34,"endLine":782,"snippet":{"text":"    var div = $(\"#\" + overlayName);"},"startColumn":23,"startLine":782}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"03cacfaa946a50c8e5b3b6ddcbedd06fe0172993da43ca7ef9948a7bb4f34ad030f4738cb1c98f8867838667cf8b31a593dbe4e9aab2f31400c78cdc8087377f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1221,"snippet":{"text":"    $(element).unbind(eventName);"},"startColumn":7,"startLine":1221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"03cacfaa946a50c8e5b3b6ddcbedd06fe0172993da43ca7ef9948a7bb4f34ad030f4738cb1c98f8867838667cf8b31a593dbe4e9aab2f31400c78cdc8087377f_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1222,"snippet":{"text":"    $(element).bind(eventName, event);"},"startColumn":7,"startLine":1222}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"ac7de6d013bf3ff66d6f8e7a050ed7bffec7e130d66f56bbe74d393285499f0585898a473a9dcb2ae16d5137b4fcd0e9a4eab9a836606e9d2ff5140004b774fa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":1226,"snippet":{"text":"    $(element).unbind(eventName);"},"startColumn":7,"startLine":1226}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"7c8a88a722ede13fe5c3975799b8a79347010f06444a07e8c48d2c6f130978080335649b8818248aa35a387331d7617dbce7c2f3bd9fe99a8c38ca9d3a4a05e5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":1394,"snippet":{"text":"                $(dtlCTRL).insertAfter(this);"},"startColumn":17,"startLine":1394}}}],"message":{"text":"User controlled data in a jQuery's `.insertAfter(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"7c8a88a722ede13fe5c3975799b8a79347010f06444a07e8c48d2c6f130978080335649b8818248aa35a387331d7617dbce7c2f3bd9fe99a8c38ca9d3a4a05e5_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":1540,"snippet":{"text":"                $(dtlCTRL).insertAfter(this);"},"startColumn":17,"startLine":1540}}}],"message":{"text":"User controlled data in a jQuery's `.insertAfter(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"aeba154c32dc01ac2d3094c6bc254a9f8102ccb2e5226991e17ad798c61270f01fd56985ab4dd583270f1eb30d2a9a33323ff45aeec3b96a8d3493eb921ce8b9_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":1836,"snippet":{"text":"        wnd.document.write($(this).html());"},"startColumn":28,"startLine":1836}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"2c3bd8b2d615512c95a8278820ef6d4daed6b2d8218a7e0f27e4c9d7dadc0256490771461968105f5b9e19348529f7a9a402470dfc0033592fd3ff79b4e731e7_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":1845,"snippet":{"text":"                    $(ui.panel).siblings(\".ui-tabs-panel\").empty();"},"startColumn":23,"startLine":1845}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"e9f56cd8963b137a19c41fab4793dee88fca1ff20672cc4ff1db7773fc6fe36faab996e87fb011ca0c9cbf2e28d9cdd757a1d014832b69b82a562bf135c726b0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"funciones.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":1979,"snippet":{"text":"    var messages = $(xml).find(\"*>MessageList>*\");"},"startColumn":22,"startLine":1979}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"5cfdbc314ffd2d9d5186ad1bb9f64a303febcb1cb4e19f40ed5b28e827fa0b0dd0637956fd37c79d3ed6a569fa285e13392d0edf1d6360a3d5bb0dd76bfbcf9c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":2954,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":2947,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6638,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":6637,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6783,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":6782,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"44462d044ccbbe40dfb83d79185c500777d31ba1304c712e5374ea38943804c83da3edb3afb725fff96510c89818805d294cf5e86a7429cd2fbd2ee20f82ae73_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":10005,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":10004,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"1324f5acbf839dd8826817f8f28f72a8727dabc90618e8b62772cf6d03d762518ba42002e93d940206d180708d287aa60e7983508966981b7a800d2fc898b4f6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":15112,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":15094,"startLine":1}}}],"message":{"text":"User controlled data in a jQuery's `.globalEval(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"989a0bbf54b4843d5bf6e2fff28004da44a03d0e22335f33099c1d232a2e8f43ed46c854a31cb1b3f636a116aca222f1067b6c4396de2c029aa27f8383c70f3e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":16175,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":16174,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"224f71505b94090b8bd7b0609debb72a3169116d28877850919f4c79cb6e649937be7fd0a6bc141fadd7f38c8f509a0824161f682f6a01b6faef336e23c158af_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":16289,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":16283,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"8fce374d7d943980a49b49ffd4cf5619a21108b05054413c7df7f844c1229390520b42c3f3f4ca60d8a9deb09f8c411c3d3025b0ba8a98382e8097b0152be6c3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":17281,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":17278,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"9ea275d969008f3555ff9e427fd2da1df838e95cd7b65832695885dfd886fa6eeff048b157bc5c3bef310496c124378deb7de8b7bfc56847807b669c6899c653_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.form.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20431,"endLine":1,"snippet":{"text":"﻿(function(factory) { \"use strict\"; if (typeof define === 'function' && define.amd) { define(['jquery'], factory); } else { factory((typeof (jQuery) != 'undefined') ? jQuery : window.Zepto); } } (function($) { \"use strict\"; var feature = {}; feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined; feature.formdata = window.FormData !== undefined; var hasProp = !!$.fn.prop; $.fn.attr2 = function() { if (!hasProp) { return this.attr.apply(this, arguments); } var val = this.prop.apply(this, arguments); if ((val && val.jquery) || typeof val === 'string') { return val; } return this.attr.apply(this, arguments); }; $.fn.ajaxSubmit = function(options) { if (!this.length) { log('ajaxSubmit: skipping submit process - no element selected'); return this; } var method, action, url, $form = this; if (typeof options == 'function') { options = { success: options }; } else if (options === undefined) { options = {}; } method = options.type || this.attr2('method'); action = options.url || this.attr2('action'); url = (typeof action === 'string') ? $.trim(action) : ''; url = url || window.location.href || ''; if (url) { url = (url.match(/^([^#]+)/) || [])[1]; } options = $.extend(true, { url: url, success: $.ajaxSettings.success, type: method || $.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank' }, options); var veto = {}; this.trigger('form-pre-serialize', [this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-pre-serialize trigger'); return this; } if (options.beforeSerialize && options.beforeSerialize(this, options) === false) { log('ajaxSubmit: submit aborted via beforeSerialize callback'); return this; } var traditional = options.traditional; if (traditional === undefined) { traditional = $.ajaxSettings.traditional; } var elements = []; var qx, a = this.formToArray(options.semantic, elements); if (options.data) { options.extraData = options.data; qx = $.param(options.data, traditional); } if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) { log('ajaxSubmit: submit aborted via beforeSubmit callback'); return this; } this.trigger('form-submit-validate', [a, this, options, veto]); if (veto.veto) { log('ajaxSubmit: submit vetoed via form-submit-validate trigger'); return this; } var q = $.param(a, traditional); if (qx) { q = (q ? (q + '&' + qx) : qx); } if (options.type.toUpperCase() == 'GET') { options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q; options.data = null; } else { options.data = q; } var callbacks = []; if (options.resetForm) { callbacks.push(function() { $form.resetForm(); }); } if (options.clearForm) { callbacks.push(function() { $form.clearForm(options.includeHidden); }); } if (!options.dataType && options.target) { var oldSuccess = options.success || function() { }; callbacks.push(function(data) { var fn = options.replaceTarget ? 'replaceWith' : 'html'; $(options.target)[fn](data).each(oldSuccess, arguments); }); } else if (options.success) { callbacks.push(options.success); } options.success = function(data, status, xhr) { var context = options.context || this; for (var i = 0, max = callbacks.length; i < max; i++) { callbacks[i].apply(context, [data, status, xhr || $form, $form]); } }; if (options.error) { var oldError = options.error; options.error = function(xhr, status, error) { var context = options.context || this; oldError.apply(context, [xhr, status, error, $form]); }; } if (options.complete) { var oldComplete = options.complete; options.complete = function(xhr, status) { var context = options.context || this; oldComplete.apply(context, [xhr, status, $form]); }; } var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; }); var hasFileInputs = fileInputs.length > 0; var mp = 'multipart/form-data'; var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp); var fileAPI = feature.fileapi && feature.formdata; log(\"fileAPI :\" + fileAPI); var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI; var jqxhr; if (options.iframe !== false && (options.iframe || shouldUseFrame)) { if (options.closeKeepAlive) { $.get(options.closeKeepAlive, function() { jqxhr = fileUploadIframe(a); }); } else { jqxhr = fileUploadIframe(a); } } else if ((hasFileInputs || multipart) && fileAPI) { jqxhr = fileUploadXhr(a); } else { jqxhr = $.ajax(options); } $form.removeData('jqxhr').data('jqxhr', jqxhr); for (var k = 0; k < elements.length; k++) { elements[k] = null; } this.trigger('form-submit-notify', [this, options]); return this; function deepSerialize(extraData) { var serialized = $.param(extraData, options.traditional).split('&'); var len = serialized.length; var result = []; var i, part; for (i = 0; i < len; i++) { serialized[i] = serialized[i].replace(/\\+/g, ' '); part = serialized[i].split('='); result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]); } return result; } function fileUploadXhr(a) { var formdata = new FormData(); for (var i = 0; i < a.length; i++) { formdata.append(a[i].name, a[i].value); } if (options.extraData) { var serializedData = deepSerialize(options.extraData); for (i = 0; i < serializedData.length; i++) { if (serializedData[i]) { formdata.append(serializedData[i][0], serializedData[i][1]); } } } options.data = null; var s = $.extend(true, {}, $.ajaxSettings, options, { contentType: false, processData: false, cache: false, type: method || 'POST' }); if (options.uploadProgress) { s.xhr = function() { var xhr = $.ajaxSettings.xhr(); if (xhr.upload) { xhr.upload.addEventListener('progress', function(event) { var percent = 0; var position = event.loaded || event.position; var total = event.total; if (event.lengthComputable) { percent = Math.ceil(position / total * 100); } options.uploadProgress(event, position, total, percent); }, false); } return xhr; }; } s.data = null; var beforeSend = s.beforeSend; s.beforeSend = function(xhr, o) { if (options.formData) { o.data = options.formData; } else { o.data = formdata; } if (beforeSend) { beforeSend.call(this, xhr, o); } }; return $.ajax(s); } function fileUploadIframe(a) { var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle; var deferred = $.Deferred(); deferred.abort = function(status) { xhr.abort(status); }; if (a) { for (i = 0; i < elements.length; i++) { el = $(elements[i]); if (hasProp) { el.prop('disabled', false); } else { el.removeAttr('disabled'); } } } s = $.extend(true, {}, $.ajaxSettings, options); s.context = s.context || s; id = 'jqFormIO' + (new Date().getTime()); if (s.iframeTarget) { $io = $(s.iframeTarget); n = $io.attr2('name'); if (!n) { $io.attr2('name', id); } else { id = n; } } else { $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />'); $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' }); } io = $io[0]; xhr = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function() { }, getResponseHeader: function() { }, setRequestHeader: function() { }, abort: function(status) { var e = (status === 'timeout' ? 'timeout' : 'aborted'); log('aborting upload... ' + e); this.aborted = 1; try { if (io.contentWindow.document.execCommand) { io.contentWindow.document.execCommand('Stop'); } } catch (ignore) { } $io.attr('src', s.iframeSrc); xhr.error = e; if (s.error) { s.error.call(s.context, xhr, e, status); } if (g) { $.event.trigger(\"ajaxError\", [xhr, s, e]); } if (s.complete) { s.complete.call(s.context, xhr, e); } } }; g = s.global; if (g && 0 === $.active++) { $.event.trigger(\"ajaxStart\"); } if (g) { $.event.trigger(\"ajaxSend\", [xhr, s]); } if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) { if (s.global) { $.active--; } deferred.reject(); return deferred; } if (xhr.aborted) { deferred.reject(); return deferred; } sub = form.clk; if (sub) { n = sub.name; if (n && !sub.disabled) { s.extraData = s.extraData || {}; s.extraData[n] = sub.value; if (sub.type == \"image\") { s.extraData[n + '.x'] = form.clk_x; s.extraData[n + '.y'] = form.clk_y; } } } var CLIENT_TIMEOUT_ABORT = 1; var SERVER_ABORT = 2; function getDoc(frame) { var doc = null; try { if (frame.contentWindow) { doc = frame.contentWindow.document; } } catch (err) { log('cannot get iframe.contentWindow document: ' + err); } if (doc) { return doc; } try { doc = frame.contentDocument ? frame.contentDocument : frame.document; } catch (err) { log('cannot get iframe.contentDocument: ' + err); doc = frame.document; } return doc; } var csrf_token = $('meta[name=csrf-token]').attr('content'); var csrf_param = $('meta[name=csrf-param]').attr('content'); if (csrf_param && csrf_token) { s.extraData = s.extraData || {}; s.extraData[csrf_param] = csrf_token; } function doSubmit() { var t = $form.attr2('target'), a = $form.attr2('action'), mp = 'multipart/form-data', et = $form.attr('enctype') || $form.attr('encoding') || mp; form.setAttribute('target', id); if (!method || /post/i.test(method)) { form.setAttribute('method', 'POST'); } if (a != s.url) { form.setAttribute('action', s.url); } if (!s.skipEncodingOverride && (!method || /post/i.test(method))) { $form.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }); } if (s.timeout) { timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout); } function checkState() { try { var state = getDoc(io).readyState; log('state = ' + state); if (state && state.toLowerCase() == 'uninitialized') { setTimeout(checkState, 50); } } catch (e) { log('Server abort: ', e, ' (', e.name, ')'); cb(SERVER_ABORT); if (timeoutHandle) { clearTimeout(timeoutHandle); } timeoutHandle = undefined; } } var extraInputs = []; try { if (s.extraData) { for (var n in s.extraData) { if (s.extraData.hasOwnProperty(n)) { if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) { extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]); } else { extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]); } } } } if (!s.iframeTarget) { $io.appendTo('body'); } if (io.attachEvent) { io.attachEvent('onload', cb); } else { io.addEventListener('load', cb, false); } setTimeout(checkState, 15); try { form.submit(); } catch (err) { var submitFn = document.createElement('form').submit; submitFn.apply(form); } } finally { form.setAttribute('action', a); form.setAttribute('enctype', et); if (t) { form.setAttribute('target', t); } else { $form.removeAttr('target'); } $(extraInputs).remove(); } } if (s.forceSync) { doSubmit(); } else { setTimeout(doSubmit, 10); } var data, doc, domCheckCount = 50, callbackProcessed; function cb(e) { if (xhr.aborted || callbackProcessed) { return; } doc = getDoc(io); if (!doc) { log('cannot access response document'); e = SERVER_ABORT; } if (e === CLIENT_TIMEOUT_ABORT && xhr) { xhr.abort('timeout'); deferred.reject(xhr, 'timeout'); return; } else if (e == SERVER_ABORT && xhr) { xhr.abort('server abort'); deferred.reject(xhr, 'error', 'server abort'); return; } if (!doc || doc.location.href == s.iframeSrc) { if (!timedOut) { return; } } if (io.detachEvent) { io.detachEvent('onload', cb); } else { io.removeEventListener('load', cb, false); } var status = 'success', errMsg; try { if (timedOut) { throw 'timeout'; } var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc); log('isXml=' + isXml); if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) { if (--domCheckCount) { log('requeing onLoad callback, DOM not available'); setTimeout(cb, 250); return; } } var docRoot = doc.body ? doc.body : doc.documentElement; xhr.responseText = docRoot ? docRoot.innerHTML : null; xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc; if (isXml) { s.dataType = 'xml'; } xhr.getResponseHeader = function(header) { var headers = { 'content-type': s.dataType }; return headers[header.toLowerCase()]; }; if (docRoot) { xhr.status = Number(docRoot.getAttribute('status')) || xhr.status; xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText; } var dt = (s.dataType || '').toLowerCase(); var scr = /(json|script|text)/.test(dt); if (scr || s.textarea) { var ta = doc.getElementsByTagName('textarea')[0]; if (ta) { xhr.responseText = ta.value; xhr.status = Number(ta.getAttribute('status')) || xhr.status; xhr.statusText = ta.getAttribute('statusText') || xhr.statusText; } else if (scr) { var pre = doc.getElementsByTagName('pre')[0]; var b = doc.getElementsByTagName('body')[0]; if (pre) { xhr.responseText = pre.textContent ? pre.textContent : pre.innerText; } else if (b) { xhr.responseText = b.textContent ? b.textContent : b.innerText; } } } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) { xhr.responseXML = toXml(xhr.responseText); } try { data = httpData(xhr, dt, s); } catch (err) { status = 'parsererror'; xhr.error = errMsg = (err || status); } } catch (err) { log('error caught: ', err); status = 'error'; xhr.error = errMsg = (err || status); } if (xhr.aborted) { log('upload aborted'); status = null; } if (xhr.status) { status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error'; } if (status === 'success') { if (s.success) { s.success.call(s.context, data, 'success', xhr); } deferred.resolve(xhr.responseText, 'success', xhr); if (g) { $.event.trigger(\"ajaxSuccess\", [xhr, s]); } } else if (status) { if (errMsg === undefined) { errMsg = xhr.statusText; } if (s.error) { s.error.call(s.context, xhr, status, errMsg); } deferred.reject(xhr, 'error', errMsg); if (g) { $.event.trigger(\"ajaxError\", [xhr, s, errMsg]); } } if (g) { $.event.trigger(\"ajaxComplete\", [xhr, s]); } if (g && ! --$.active) { $.event.trigger(\"ajaxStop\"); } if (s.complete) { s.complete.call(s.context, xhr, status); } callbackProcessed = true; if (s.timeout) { clearTimeout(timeoutHandle); } setTimeout(function() { if (!s.iframeTarget) { $io.remove(); } else { $io.attr('src', s.iframeSrc); } xhr.responseXML = null; }, 100); } var toXml = $.parseXML || function(s, doc) { if (window.ActiveXObject) { doc = new ActiveXObject('Microsoft.XMLDOM'); doc.async = 'false'; doc.loadXML(s); } else { doc = (new DOMParser()).parseFromString(s, 'text/xml'); } return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null; }; var parseJSON = $.parseJSON || function(s) { return window['eval']('(' + s + ')'); }; var httpData = function(xhr, type, s) { var ct = xhr.getResponseHeader('content-type') || '', xml = type === 'xml' || !type && ct.indexOf('xml') >= 0, data = xml ? xhr.responseXML : xhr.responseText; if (xml && data.documentElement.nodeName === 'parsererror') { if ($.error) { $.error('parsererror'); } } if (s && s.dataFilter) { data = s.dataFilter(data, type); } if (typeof data === 'string') { if (type === 'json' || !type && ct.indexOf('json') >= 0) { data = parseJSON(data); } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) { $.globalEval(data); } } return data; }; return deferred; } }; $.fn.ajaxForm = function(options) { options = options || {}; options.delegation = options.delegation && $.isFunction($.fn.on); if (!options.delegation && this.length === 0) { var o = { s: this.selector, c: this.context }; if (!$.isReady && o.s) { log('DOM not ready, queuing ajaxForm'); $(function() { $(o.s, o.c).ajaxForm(options); }); return this; } log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)')); return this; } if (options.delegation) { $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement); return this; } return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement); }; function doAjaxSubmit(e) { var options = e.data; if (!e.isDefaultPrevented()) { e.preventDefault(); $(e.target).ajaxSubmit(options); } } function captureSubmittingElement(e) { var target = e.target; var $el = $(target); if (!($el.is(\"[type=submit],[type=image]\"))) { var t = $el.closest('[type=submit]'); if (t.length === 0) { return; } target = t[0]; } var form = this; form.clk = target; if (target.type == 'image') { if (e.offsetX !== undefined) { form.clk_x = e.offsetX; form.clk_y = e.offsetY; } else if (typeof $.fn.offset == 'function') { var offset = $el.offset(); form.clk_x = e.pageX - offset.left; form.clk_y = e.pageY - offset.top; } else { form.clk_x = e.pageX - target.offsetLeft; form.clk_y = e.pageY - target.offsetTop; } } setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100); } $.fn.ajaxFormUnbind = function() { return this.unbind('submit.form-plugin click.form-plugin'); }; $.fn.formToArray = function(semantic, elements) { var a = []; if (this.length === 0) { return a; } var form = this[0]; var formId = this.attr('id'); var els = semantic ? form.getElementsByTagName('*') : form.elements; var els2; if (els && !/MSIE [678]/.test(navigator.userAgent)) { els = $(els).get(); } if (formId) { els2 = $(':input[form=' + formId + ']').get(); if (els2.length) { els = (els || []).concat(els2); } } if (!els || !els.length) { return a; } var i, j, n, v, el, max, jmax; for (i = 0, max = els.length; i < max; i++) { el = els[i]; n = el.name; if (!n || el.disabled) { continue; } if (semantic && form.clk && el.type == \"image\") { if (form.clk == el) { a.push({ name: n, value: $(el).val(), type: el.type }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } continue; } v = $.fieldValue(el, true); if (v && v.constructor == Array) { if (elements) { elements.push(el); } for (j = 0, jmax = v.length; j < jmax; j++) { a.push({ name: n, value: v[j] }); } } else if (feature.fileapi && el.type == 'file') { if (elements) { elements.push(el); } var files = el.files; if (files.length) { for (j = 0; j < files.length; j++) { a.push({ name: n, value: files[j], type: el.type }); } } else { a.push({ name: n, value: '', type: el.type }); } } else if (v !== null && typeof v != 'undefined') { if (elements) { elements.push(el); } a.push({ name: n, value: v, type: el.type, required: el.required }); } } if (!semantic && form.clk) { var $input = $(form.clk), input = $input[0]; n = input.name; if (n && !input.disabled && input.type == 'image') { a.push({ name: n, value: $input.val() }); a.push({ name: n + '.x', value: form.clk_x }, { name: n + '.y', value: form.clk_y }); } } return a; }; $.fn.formSerialize = function(semantic) { return $.param(this.formToArray(semantic)); }; $.fn.fieldSerialize = function(successful) { var a = []; this.each(function() { var n = this.name; if (!n) { return; } var v = $.fieldValue(this, successful); if (v && v.constructor == Array) { for (var i = 0, max = v.length; i < max; i++) { a.push({ name: n, value: v[i] }); } } else if (v !== null && typeof v != 'undefined') { a.push({ name: this.name, value: v }); } }); return $.param(a); }; $.fn.fieldValue = function(successful) { for (var val = [], i = 0, max = this.length; i < max; i++) { var el = this[i]; var v = $.fieldValue(el, successful); if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) { continue; } if (v.constructor == Array) { $.merge(val, v); } else { val.push(v); } } return val; }; $.fieldValue = function(el, successful) { var n = el.name, t = el.type, tag = el.tagName.toLowerCase(); if (successful === undefined) { successful = true; } if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) { return null; } if (tag == 'select') { var index = el.selectedIndex; if (index < 0) { return null; } var a = [], ops = el.options; var one = (t == 'select-one'); var max = (one ? index + 1 : ops.length); for (var i = (one ? index : 0); i < max; i++) { var op = ops[i]; if (op.selected) { var v = op.value; if (!v) { v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value; } if (one) { return v; } a.push(v); } } return a; } return $(el).val(); }; $.fn.clearForm = function(includeHidden) { return this.each(function() { $('input,select,textarea', this).clearFields(includeHidden); }); }; $.fn.clearFields = $.fn.clearInputs = function(includeHidden) { var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function() { var t = this.type, tag = this.tagName.toLowerCase(); if (re.test(t) || tag == 'textarea') { this.value = ''; } else if (t == 'checkbox' || t == 'radio') { this.checked = false; } else if (tag == 'select') { this.selectedIndex = -1; } else if (t == \"file\") { if (/MSIE/.test(navigator.userAgent)) { $(this).replaceWith($(this).clone(true)); } else { $(this).val(''); } } else if (includeHidden) { if ((includeHidden === true && /hidden/.test(t)) || (typeof includeHidden == 'string' && $(this).is(includeHidden))) { this.value = ''; } } }); }; $.fn.resetForm = function() { return this.each(function() { if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) { this.reset(); } }); }; $.fn.enable = function(b) { if (b === undefined) { b = true; } return this.each(function() { this.disabled = !b; }); }; $.fn.selected = function(select) { if (select === undefined) { select = true; } return this.each(function() { var t = this.type; if (t == 'checkbox' || t == 'radio') { this.checked = select; } else if (this.tagName.toLowerCase() == 'option') { var $sel = $(this).parent('select'); if (select && $sel[0] && $sel[0].type == 'select-one') { $sel.find('option').selected(false); } this.selected = select; } }); }; $.fn.ajaxSubmit.debug = false; function log() { if (!$.fn.ajaxSubmit.debug) { return; } var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, ''); if (window.console && window.console.log) { window.console.log(msg); } else if (window.opera && window.opera.postError) { window.opera.postError(msg); } } }));"},"startColumn":20429,"startLine":1}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"06d26f4c487616185887ef984245f362ba0198ffbd6bf1e9c8a244ef71af746776df9d6b429085ef40d9cef5aa2a75b73b438ad260af6a9ff20edd5faf39e671_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":64,"snippet":{"text":"\t\t\tvar num = '0';\n\t\t\tnum = $this[$this.is('input, select, textarea') ? 'val' : 'html']();"},"startColumn":4,"startLine":63}}}],"message":{"text":"`num` is assigned twice; the first assignment is useless"},"properties":{},"ruleId":"opengrep-rules.javascript.lang.correctness.useless-assignment"},{"fingerprints":{"matchBasedId/v1":"d356f406e74a4099fb48769b3c9b7a6bc8af0dc7b164cf0b9fa66d429db67a1e55a24cc06bc37f99e6621ea7f53faba6510f38ccbb5ee8dcc6218c94b44d201c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":33,"endLine":132,"snippet":{"text":"\t\t\t\t$destination = $(destination);"},"startColumn":22,"startLine":132}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"cc109a322c4e3218cb3d6db9f17d33e3e55ac0bcb1aee5a35ef9d59035542128adb5ffc9fdeff08860bc398bec98805864cba95f21176a2949dd939bee4ba199_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":51,"endLine":205,"snippet":{"text":"\t\treturn window['parse' + settings.parseType](num);"},"startColumn":10,"startLine":205}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"1bb36950eb7cf41ba43519df4bbe6626c6fe8215545fa05fa357244ad4956011a86033244f81571a9d35fb14a7a6ea336d1a002a346dceb4ea888657a676c0d5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":236,"snippet":{"text":"\t\t\treturn new RegExp(\"[^\\\\d\" + settings.decimalSymbol + \"-]\", \"g\");"},"startColumn":11,"startLine":236}}}],"message":{"text":"RegExp() called with a `settings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"96145e0c8e8adb65588e9b6ab67794a4728c99d3ca9b6af30c961d9094691ff7782ae12d66f9ac90d688f98d9800e743705e85606990e8ad948dae0113d6a5b4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":239,"snippet":{"text":"\t\t\tvar symbol = settings.symbol.replace('$', '\\\\$').replace('.', '\\\\.');"},"startColumn":17,"startLine":239}}}],"message":{"text":"`settings.symbol.replace` method will only replace the first occurrence when used with a string argument ('$'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization"},{"fingerprints":{"matchBasedId/v1":"1bb36950eb7cf41ba43519df4bbe6626c6fe8215545fa05fa357244ad4956011a86033244f81571a9d35fb14a7a6ea336d1a002a346dceb4ea888657a676c0d5_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.formatCurrency.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":240,"snippet":{"text":"\t\t\treturn new RegExp(symbol + \"|[^\\\\d\" + settings.decimalSymbol + \"-]\", \"g\");"},"startColumn":11,"startLine":240}}}],"message":{"text":"RegExp() called with a `settings` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"bde714c7884370f32d5c8259d4a4f9a1b25a584867fde86b810f8cfea2d8eb3e3e48ec4edf1987ed4cccff09d4c30a7375d1142ca2a32bee44244a9838bbf6e0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":220,"snippet":{"text":"                            outElem.push({ regex: new RegExp(prevalidator.validator), cardinality: prevalidator.cardinality, optionality: isOptional, newBlockMarker: isOptional == true ? newBlockMarker : false, offset: 0 });"},"startColumn":51,"startLine":220}}}],"message":{"text":"RegExp() called with a `element` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"bde714c7884370f32d5c8259d4a4f9a1b25a584867fde86b810f8cfea2d8eb3e3e48ec4edf1987ed4cccff09d4c30a7375d1142ca2a32bee44244a9838bbf6e0_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":76,"endLine":224,"snippet":{"text":"                        outElem.push({ regex: new RegExp(maskdef.validator), cardinality: maskdef.cardinality, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0 });"},"startColumn":47,"startLine":224}}}],"message":{"text":"RegExp() called with a `element` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"},{"fingerprints":{"matchBasedId/v1":"3f5bfad0ac1f4d5ce6ca7d82dd12bd00997730770a6784312c4b7a4eb8ca890dda2bff360f774b3552f91f7a724a73c1898a07f89d2a8761c17a50f267039f3e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.inputmask.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":416,"snippet":{"text":"            var input = $(el);"},"startColumn":27,"startLine":416}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"01c9be4a7b2d4d3b79122789afa00d12e832ee3573437277db0e0705bcda6d8b38b7f8d1041055a4730921d467a52d7f4d6ba8d222657665f2c8a4707ce99846_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":148,"snippet":{"text":"\t\t\t\t\tinlineSettings[attrName] = eval(attrValue);"},"startColumn":33,"startLine":148}}}],"message":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"properties":{},"ruleId":"opengrep-rules.javascript.browser.security.eval-detected"},{"fingerprints":{"matchBasedId/v1":"17b314cfa6c7ae4b9333f47ae9413f3d118fbf16f270acf44556b45181af68a6db12d8ac1add3c718a0b68603fd4880b0503e411aa20ad11a4c4681004e89453_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":158,"snippet":{"text":"\t\tvar inst = this._newInst($(target), inline);"},"startColumn":30,"startLine":158}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"30f1c19b945004f6b36ec1c11f2559477fb7b7be71ac80367cda7ca10224caf78a22175403f7fa65e97feaccbdd9d9bba45ac9d89910e523d40c07c910ad783f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":23,"endLine":180,"snippet":{"text":"\t\tvar input = $(target);"},"startColumn":17,"startLine":180}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"d34475a77b5c0175ea211266a6bdf5dcb9fd541940d0fbfe054bbe4897433f23661dfebb2a571c8af9ab1c907e59419b1e538a59d37c47e98adde7417365240c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":204,"snippet":{"text":"\t\t\tinst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');"},"startColumn":65,"startLine":204}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"a1839bee1ae813618c93ac8cf4a7dc15ed97f308276aecef24f4b06d35fa91ac305832c480166b6efe54cc7e3bea515e2a6b9642ca24be39639413306773df7c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":216,"snippet":{"text":"\t\t\tinst.trigger = $(this._get(inst, 'buttonImageOnly') ?"},"startColumn":31,"startLine":216}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6,"endLine":217,"snippet":{"text":"\t\t\t\t$('<img/>').addClass(this._triggerClass)."},"startColumn":5,"startLine":217}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":18,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":36,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":218,"snippet":{"text":"\t\t\t\t\tattr({ src: buttonImage, alt: buttonText, title: buttonText }) :"},"startColumn":55,"startLine":218}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":6,"endLine":219,"snippet":{"text":"\t\t\t\t$('<button type=\"button\"></button>').addClass(this._triggerClass)."},"startColumn":5,"startLine":219}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e11cad28e03f7a02952b9b51362a0fc004f061fe1fa7b8dc637cb2285858581e5a56c028d2c29ed2e9c00dbc400a04deb450b4ee135fc7803ca5d818cc5900d_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":61,"endLine":221,"snippet":{"text":"\t\t\t\t$('<button type=\"button\"></button>').addClass(this._triggerClass).\n\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr(\n\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":5,"startLine":219}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":22,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":11,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":41,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":31,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b51638149e93a0c80fbdaa5502adaf14ceba78efee61bd703042df0f9d9cdf9b263b3260ddd7e617bb59e18ef107e290eb9822cee2e1f370d74821908f353c7b_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":220,"snippet":{"text":"\t\t\t\t\thtml(buttonImage == '' ? buttonText : $('<img/>').attr("},"startColumn":44,"startLine":220}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"861134ac5c58497f9a6f4278da43f46d8b5b14b14c561b1d905d54f0fce1e5725232a455ffb3e0c5ff74464745ae126b6509cd235c3d09d2be294bcebe685f9a_2"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":23,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":12,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_3"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":39,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":29,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6f91727cdcd4b47c6ebda547359e97924e25eac80875884a300568e62871e93966543a6bf5f525fc89b4cef24e1ffc1a9e1978531332592208e7fefb65c32ae4_4"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":221,"snippet":{"text":"\t\t\t\t\t{ src:buttonImage, alt:buttonText, title:buttonText })));"},"startColumn":47,"startLine":221}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"4df3b779aec663f344a5f81dabd21ce1117df37977b3dd7228dabaa32fe2c891074132ffff5777e005631e8b30fa6dc193e5088e35380b0e7580972e9f187e6a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":261,"snippet":{"text":"\t\tvar divSpan = $(target);"},"startColumn":19,"startLine":261}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"e89a8751d370d1eaf61d71ae242933b3cee9f27282a9943ef015e36681d5a45f0e2d9a9f769dada97e499f4d972d42ce22a4be69534a331acb1d04660e62d8e5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":39,"endLine":292,"snippet":{"text":"\t\t\t$('body').append(this._dialogInput);"},"startColumn":4,"startLine":292}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"3d1d1aa567e6b414142a621519e569cc98700c67e61b4331ebb6b09b3e74d7702ae24c7bc4d81c723526661c45629c5eb90e49a07e7ded95299a481555322fac_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":326,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":326}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"b72f0299593830d45bd12eb2317143994b514dc59e1ad3692c4bd8d490cce022244a82cc2049c54852a137e134de2b2578e005a3a3e45c04829a858d72c3eccd_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":348,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":348}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e1de83fe64eb53e5231ea8ac414e9a4352386774ffc9f72416c723bf0e0b3ace127e3b675c4ef1f2ba896b1ef4c527ebe9ae468dddde3ef4753ceff7d7fceb3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":25,"endLine":371,"snippet":{"text":"\t\tvar $target = $(target);"},"startColumn":19,"startLine":371}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"8da6ed86fefe04c80f953e9be1b77af915a8bad8dee299fb576101b5636835048c9d59a5fad7c5453198d870661680b52ac5b1d6fba9e0bbfe90b01f31843850_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":30,"endLine":445,"snippet":{"text":"\t\t\tthis._attachments($(target), inst);"},"startColumn":24,"startLine":445}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"f3b594e3fcde07a395d2a946e5ca4a361a1a5145cb57bfcf755bb4e6639bebe01e38f9c9106b13877e514d40f2e5c7ad8d4c38f9e9328ef3c5f547ea65a5be93_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":10,"endLine":615,"snippet":{"text":"\t\t$(input).parents().each(function() {"},"startColumn":5,"startLine":615}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"f3b594e3fcde07a395d2a946e5ca4a361a1a5145cb57bfcf755bb4e6639bebe01e38f9c9106b13877e514d40f2e5c7ad8d4c38f9e9328ef3c5f547ea65a5be93_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":644,"snippet":{"text":"\t\t\tinst.dpDiv.zIndex($(input).zIndex()+1);"},"startColumn":24,"startLine":644}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"368a552acb2fdf2734b105772d1a8cb6e135ef9e7e48d149eb92f0dc92ee2ea4037bde0fdfd1e093ba49a6e1fd4ecf8943693821cd6df5e824425691efab7f94_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":648,"snippet":{"text":"\t\t\t\tinst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);"},"startColumn":5,"startLine":648}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"960993d2d11787d9cfd46a6c32f689dc1843f4304e8e3ec9fd2f22a4030ef4850b016868f2c9d272f3cd92cfc3d98abaff0d0b1f3d3305cf4a1fd6bb0d23f739_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":692,"snippet":{"text":"\t\tinst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +\n\t\t\t'Class']('ui-datepicker-multi');"},"startColumn":3,"startLine":691}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"fae5590e492a6c868699ee981f7325ca176c7f2bf71c96c68a81e407c9e745eaa80c3c1244cc98cffd592aadb8d1e677eef8fc62e49b393583b5e3742919c0ff_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":33,"endLine":694,"snippet":{"text":"\t\tinst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +\n\t\t\t'Class']('ui-datepicker-rtl');"},"startColumn":3,"startLine":693}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"d588d85dcac52842f2f5d403e07266e9a7d5b594c9212cc201954fdbc05be2de723b735905bcc6bea6c81bc3c8764b2ee7adf56765558d346a10ef51bfc602a5_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":29,"endLine":740,"snippet":{"text":"        var position = $(obj).offset();"},"startColumn":26,"startLine":740}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"477a565a1e8453cd86a8464dbdca62dbb310799cca69cec9d61fd3d556ac7dbc400827d567f4d3489f48d9616166b3b132773f5f05e8cd674f8c8a96a3474bf0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":761,"snippet":{"text":"\t\t\t\tinst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :\n\t\t\t\t\t(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);"},"startColumn":5,"startLine":760}}}],"message":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"properties":{},"ruleId":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"},{"fingerprints":{"matchBasedId/v1":"f6f26a371efe15d23a01d28b362e773ae46a3d113e5b8ddd466f7138e002caaec85e414090aad830104f582028a73ada935a4f3d04b9faa4ea3eaa704f7fe028_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":34,"endLine":774,"snippet":{"text":"\t\t\t\t\t$('body').append(this.dpDiv);"},"startColumn":6,"startLine":774}}}],"message":{"text":"User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"},{"fingerprints":{"matchBasedId/v1":"923b17c8e34774e1228b0005da6730df24c24e3cdf7c344f8ea6bcba602f85049fa3f8da5125a88f9ef04f0a00269c021ba36ce58848031e450dd82cb90a9261_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":790,"snippet":{"text":"\t\tvar $target = $(event.target);"},"startColumn":19,"startLine":790}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"2e5cba4061433529ecf47cea4558844f07663a5e7cc3070127e30121426923f156079862b2ff1df903569116981d1fdf2e487a76cde04cc55059efd099a9cc40_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":801,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":801}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"27af7193c883c166d9394113dc0acdc215b410b1537b47673a83fe3a743679db0679ee525aa058914cb2241e0ed8856f3ef204effa1d8875cebb9321b61b2757_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":814,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":814}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"9c97d8c391650a4cddf0671eea71764d963259045ea4dc2fd10770d8e894115f07e11784383e1183422b15f6d3b63e7edcbfcaf70ccb85c0d37ebb9c8d8f63d4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":833,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":833}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"d0eb8baad67fa12a2c26065cd8afa4ebb64536e1de65a20adeb49c991298d61d442f1454f01fc5c5c88f3106e6710dd2880af300078e4b08db5ce9e46addb906_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":845,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":845}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"c496c2ff2bb1537ff5e8faf68da5ecff6f4f5ec0d577431226759ee02a90a80b1649d23c4e964b2260379d420df3f6ef965f6cabfe9fe1b262746e39fe5d8c0b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":854,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":854}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"2747d9cf085df0816f230ada632409ad87f295a614cc27d0ed8c12a6757e26317d16714abe0462af05da09e1c791d1ac3ec51c146ed13a844ac831816ec5ecfa_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":11,"endLine":855,"snippet":{"text":"\t\tif ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {"},"startColumn":9,"startLine":855}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"570c69893893d219eb57accf18592f154cc870c8948fbf05bc8c1504383d1483ec3699780e9c06f6191cefb6d7c5ff374ef801fb2c92201e147ff4a0a47d4c1c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":859,"snippet":{"text":"\t\tinst.selectedDay = inst.currentDay = $('a', td).html();"},"startColumn":40,"startLine":859}}}],"message":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"},{"fingerprints":{"matchBasedId/v1":"a630509dccc90d0cfc61071a9ea1f694c9bdad083c2296ee2a0d7be4434b03612ad2ec893238ef204b950ef300ea795c7ad16665fa961530ffe0caafdd626f6c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":868,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":868}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"6fa476d7d103b2f53b3354ae0e37ac62959fa6bd93ca35f4540fede5247c9b6b877fc5038db4e3801b772f526da7124683706ebf07c297fb2764779f6bbadb65_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":875,"snippet":{"text":"\t\tvar target = $(id);"},"startColumn":18,"startLine":875}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"0e198d099d5701ff76371c421c33060cd55fe9f4e528612efc694c5e886344330d94e0ea0746fb438586d47b40a675d3423e8050cea665044eb8e001799ab846_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"jquery/jquery.ui.datepicker.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":14,"endLine":904,"snippet":{"text":"\t\t\t$(altField).each(function() { $(this).val(dateStr); });"},"startColumn":6,"startLine":904}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"bb938eb1ba5cc6535031e625f3c91b4020b39d476fc569259f91404a1cf56c088dd80e2904b856a9aba137b8a6e17611f76111e1784e2cc0f2b061e9be4701d3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"menu.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":24,"endLine":12,"snippet":{"text":"        $(lastSelection).hide();"},"startColumn":11,"startLine":12}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"},{"fingerprints":{"matchBasedId/v1":"7727af07672285f3d27f8c9ef982070f64aa53e630a801c2f65fc04303ad36f567c60c3c3f2b8d1fd916f8b163c3dece386388725278fd5a090d01f08fd80237_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"menu.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":22,"endLine":14,"snippet":{"text":"    $(\".\" + selection).toggle();"},"startColumn":13,"startLine":14}}}],"message":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"}],"tool":{"driver":{"name":"Opengrep OSS","rules":[{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: OpenAI"},"help":{"markdown":"Possibly found usage of AI: OpenAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: OpenAI"},"id":"opengrep-rules.ai.csharp.detect-openai","name":"opengrep-rules.ai.csharp.detect-openai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.csharp.detect-openai"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.dart.detect-gemini","name":"opengrep-rules.ai.dart.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.dart.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Anthropic"},"help":{"markdown":"Possibly found usage of AI: Anthropic\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Anthropic"},"id":"opengrep-rules.ai.generic.detect-generic-ai-anthprop","name":"opengrep-rules.ai.generic.detect-generic-ai-anthprop","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.generic.detect-generic-ai-anthprop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: HTTP Request"},"help":{"markdown":"Possibly found usage of AI: HTTP Request\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: HTTP Request"},"id":"opengrep-rules.ai.generic.detect-generic-ai-api","name":"opengrep-rules.ai.generic.detect-generic-ai-api","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.generic.detect-generic-ai-api"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.generic.detect-generic-ai-gem","name":"opengrep-rules.ai.generic.detect-generic-ai-gem","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.generic.detect-generic-ai-gem"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: OpenAI"},"help":{"markdown":"Possibly found usage of AI: OpenAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: OpenAI"},"id":"opengrep-rules.ai.generic.detect-generic-ai-oai","name":"opengrep-rules.ai.generic.detect-generic-ai-oai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.generic.detect-generic-ai-oai"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.go.detect-gemini","name":"opengrep-rules.ai.go.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.go.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: OpenAI"},"help":{"markdown":"Possibly found usage of AI: OpenAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: OpenAI"},"id":"opengrep-rules.ai.go.detect-openai","name":"opengrep-rules.ai.go.detect-openai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.go.detect-openai"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.kotlin.detect-gemini","name":"opengrep-rules.ai.kotlin.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.kotlin.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Anthropic"},"help":{"markdown":"Possibly found usage of AI: Anthropic\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Anthropic"},"id":"opengrep-rules.ai.python.detect-anthropic","name":"opengrep-rules.ai.python.detect-anthropic","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-anthropic"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.python.detect-gemini","name":"opengrep-rules.ai.python.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: HuggingFace"},"help":{"markdown":"Possibly found usage of AI: HuggingFace\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: HuggingFace"},"id":"opengrep-rules.ai.python.detect-huggingface","name":"opengrep-rules.ai.python.detect-huggingface","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-huggingface"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI tooling: LangChain"},"help":{"markdown":"Possibly found usage of AI tooling: LangChain\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI tooling: LangChain"},"id":"opengrep-rules.ai.python.detect-langchain","name":"opengrep-rules.ai.python.detect-langchain","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-langchain"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Mistral"},"help":{"markdown":"Possibly found usage of AI: Mistral\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Mistral"},"id":"opengrep-rules.ai.python.detect-mistral","name":"opengrep-rules.ai.python.detect-mistral","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-mistral"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: OpenAI"},"help":{"markdown":"Possibly found usage of AI: OpenAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: OpenAI"},"id":"opengrep-rules.ai.python.detect-openai","name":"opengrep-rules.ai.python.detect-openai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-openai"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI tooling: PyTorch"},"help":{"markdown":"Possibly found usage of AI tooling: PyTorch\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI tooling: PyTorch"},"id":"opengrep-rules.ai.python.detect-pytorch","name":"opengrep-rules.ai.python.detect-pytorch","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-pytorch"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI tooling: Tensorflow"},"help":{"markdown":"Possibly found usage of AI tooling: Tensorflow\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI tooling: Tensorflow"},"id":"opengrep-rules.ai.python.detect-tensorflow","name":"opengrep-rules.ai.python.detect-tensorflow","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.python.detect-tensorflow"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Apple CoreML"},"help":{"markdown":"Possibly found usage of AI: Apple CoreML\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Apple CoreML"},"id":"opengrep-rules.ai.swift.detect-apple-core-ml","name":"opengrep-rules.ai.swift.detect-apple-core-ml","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.swift.detect-apple-core-ml"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.swift.detect-gemini","name":"opengrep-rules.ai.swift.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.swift.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Anthropic"},"help":{"markdown":"Possibly found usage of AI: Anthropic\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Anthropic"},"id":"opengrep-rules.ai.typescript.detect-anthropic","name":"opengrep-rules.ai.typescript.detect-anthropic","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-anthropic"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Gemini"},"help":{"markdown":"Possibly found usage of AI: Gemini\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Gemini"},"id":"opengrep-rules.ai.typescript.detect-gemini","name":"opengrep-rules.ai.typescript.detect-gemini","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-gemini"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: Mistral"},"help":{"markdown":"Possibly found usage of AI: Mistral\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: Mistral"},"id":"opengrep-rules.ai.typescript.detect-mistral","name":"opengrep-rules.ai.typescript.detect-mistral","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-mistral"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: OpenAI"},"help":{"markdown":"Possibly found usage of AI: OpenAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: OpenAI"},"id":"opengrep-rules.ai.typescript.detect-openai","name":"opengrep-rules.ai.typescript.detect-openai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-openai"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI tooling: promptfoo"},"help":{"markdown":"Possibly found usage of AI tooling: promptfoo\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI tooling: promptfoo"},"id":"opengrep-rules.ai.typescript.detect-promptfoo","name":"opengrep-rules.ai.typescript.detect-promptfoo","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-promptfoo"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possibly found usage of AI: VercelAI"},"help":{"markdown":"Possibly found usage of AI: VercelAI\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2024/detecting-shadow-ai](https://semgrep.dev/blog/2024/detecting-shadow-ai)\n","text":"Possibly found usage of AI: VercelAI"},"id":"opengrep-rules.ai.typescript.detect-vercel-ai","name":"opengrep-rules.ai.typescript.detect-vercel-ai","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ai.typescript.detect-vercel-ai"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"help":{"markdown":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"id":"opengrep-rules.bash.curl.security.curl-eval","name":"opengrep-rules.bash.curl.security.curl-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.curl.security.curl-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"help":{"markdown":"Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"id":"opengrep-rules.bash.curl.security.curl-pipe-bash","name":"opengrep-rules.bash.curl.security.curl-pipe-bash","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.curl.security.curl-pipe-bash"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Iterating over ls output is fragile. Use globs, e.g. 'dir/*' instead of '$(ls dir)'."},"help":{"markdown":"Iterating over ls output is fragile. Use globs, e.g. 'dir/*' instead of '$(ls dir)'.\n\n<b>References:</b>\n - [https://github.com/koalaman/shellcheck/wiki/SC2045](https://github.com/koalaman/shellcheck/wiki/SC2045)\n","text":"Iterating over ls output is fragile. Use globs, e.g. 'dir/*' instead of '$(ls dir)'."},"id":"opengrep-rules.bash.lang.best-practice.iteration-over-ls-output","name":"opengrep-rules.bash.lang.best-practice.iteration-over-ls-output","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.lang.best-practice.iteration-over-ls-output"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Useless call to 'cat' in a pipeline. Use '<' and '>' for any command to read from a file or write to a file."},"help":{"markdown":"Useless call to 'cat' in a pipeline. Use '<' and '>' for any command to read from a file or write to a file.\n\n<b>References:</b>\n - [https://github.com/koalaman/shellcheck/wiki/SC2002](https://github.com/koalaman/shellcheck/wiki/SC2002)\n","text":"Useless call to 'cat' in a pipeline. Use '<' and '>' for any command to read from a file or write to a file."},"id":"opengrep-rules.bash.lang.best-practice.useless-cat","name":"opengrep-rules.bash.lang.best-practice.useless-cat","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.lang.best-practice.useless-cat"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The result of command substitution $(...) or `...`, if unquoted, is split on whitespace or other separators specified by the IFS variable. You should surround it with double quotes to avoid splitting the result."},"help":{"markdown":"The result of command substitution $(...) or `...`, if unquoted, is split on whitespace or other separators specified by the IFS variable. You should surround it with double quotes to avoid splitting the result.","text":"The result of command substitution $(...) or `...`, if unquoted, is split on whitespace or other separators specified by the IFS variable. You should surround it with double quotes to avoid splitting the result."},"id":"opengrep-rules.bash.lang.correctness.unquoted-command-substitution-in-command","name":"opengrep-rules.bash.lang.correctness.unquoted-command-substitution-in-command","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.lang.correctness.unquoted-command-substitution-in-command"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Variable expansions must be double-quoted so as to prevent being split into multiple pieces according to whitespace or whichever separator is specified by the IFS variable. If you really wish to split the variable's contents, you may use a variable that starts with an underscore e.g. $_X instead of $X, and semgrep will ignore it. If what you need is an array, consider using a proper bash array."},"help":{"markdown":"Variable expansions must be double-quoted so as to prevent being split into multiple pieces according to whitespace or whichever separator is specified by the IFS variable. If you really wish to split the variable's contents, you may use a variable that starts with an underscore e.g. $_X instead of $X, and semgrep will ignore it. If what you need is an array, consider using a proper bash array.","text":"Variable expansions must be double-quoted so as to prevent being split into multiple pieces according to whitespace or whichever separator is specified by the IFS variable. If you really wish to split the variable's contents, you may use a variable that starts with an underscore e.g. $_X instead of $X, and semgrep will ignore it. If what you need is an array, consider using a proper bash array."},"id":"opengrep-rules.bash.lang.correctness.unquoted-variable-expansion-in-command","name":"opengrep-rules.bash.lang.correctness.unquoted-variable-expansion-in-command","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.lang.correctness.unquoted-variable-expansion-in-command"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."},"help":{"markdown":"The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."},"id":"opengrep-rules.bash.lang.security.ifs-tampering","name":"opengrep-rules.bash.lang.security.ifs-tampering","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.bash.lang.security.ifs-tampering"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using == on char* performs pointer comparison, use strcmp instead"},"help":{"markdown":"Using == on char* performs pointer comparison, use strcmp instead","text":"Using == on char* performs pointer comparison, use strcmp instead"},"id":"opengrep-rules.c.lang.correctness.c-string-equality","name":"opengrep-rules.c.lang.correctness.c-string-equality","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.correctness.c-string-equality"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The second goto statement will always be executed."},"help":{"markdown":"The second goto statement will always be executed.","text":"The second goto statement will always be executed."},"id":"opengrep-rules.c.lang.correctness.double_goto","name":"opengrep-rules.c.lang.correctness.double_goto","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.correctness.double_goto"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid the 'ato*()' family of functions. Their use can lead to undefined behavior, integer overflows, and lack of appropriate error handling. Instead prefer the 'strtol*()' family of functions."},"help":{"markdown":"Avoid the 'ato*()' family of functions. Their use can lead to undefined behavior, integer overflows, and lack of appropriate error handling. Instead prefer the 'strtol*()' family of functions.\n\n<b>References:</b>\n - [https://stackoverflow.com/q/38393162](https://stackoverflow.com/q/38393162)\n - [https://stackoverflow.com/q/14176123](https://stackoverflow.com/q/14176123)\n","text":"Avoid the 'ato*()' family of functions. Their use can lead to undefined behavior, integer overflows, and lack of appropriate error handling. Instead prefer the 'strtol*()' family of functions."},"id":"opengrep-rules.c.lang.correctness.incorrect-use-ato-fn","name":"opengrep-rules.c.lang.correctness.incorrect-use-ato-fn","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.correctness.incorrect-use-ato-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid 'sscanf()' for number conversions. Its use can lead to undefined behavior, slow processing, and integer overflows. Instead prefer the 'strto*()' family of functions."},"help":{"markdown":"Avoid 'sscanf()' for number conversions. Its use can lead to undefined behavior, slow processing, and integer overflows. Instead prefer the 'strto*()' family of functions.\n\n<b>References:</b>\n - [https://stackoverflow.com/q/22865622](https://stackoverflow.com/q/22865622)\n - [https://stackoverflow.com/q/7021725](https://stackoverflow.com/q/7021725)\n - [https://www.mattkeeter.com/blog/2021-03-01-happen/](https://www.mattkeeter.com/blog/2021-03-01-happen/)\n","text":"Avoid 'sscanf()' for number conversions. Its use can lead to undefined behavior, slow processing, and integer overflows. Instead prefer the 'strto*()' family of functions."},"id":"opengrep-rules.c.lang.correctness.incorrect-use-sscanf-fn","name":"opengrep-rules.c.lang.correctness.incorrect-use-sscanf-fn","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.correctness.incorrect-use-sscanf-fn"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Variable '$VAR' was freed twice. This can lead to undefined behavior."},"help":{"markdown":"Variable '$VAR' was freed twice. This can lead to undefined behavior.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/415.html](https://cwe.mitre.org/data/definitions/415.html)\n - [https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory](https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory)\n","text":"Variable '$VAR' was freed twice. This can lead to undefined behavior."},"id":"opengrep-rules.c.lang.security.double-free","name":"opengrep-rules.c.lang.security.double-free","properties":{"precision":"very-high","tags":["CWE-415: Double Free","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.double-free"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Variable '$VAR' was passed to a function after being freed. This can lead to undefined behavior."},"help":{"markdown":"Variable '$VAR' was passed to a function after being freed. This can lead to undefined behavior.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/416.html](https://cwe.mitre.org/data/definitions/416.html)\n - [https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/)\n","text":"Variable '$VAR' was passed to a function after being freed. This can lead to undefined behavior."},"id":"opengrep-rules.c.lang.security.function-use-after-free","name":"opengrep-rules.c.lang.security.function-use-after-free","properties":{"precision":"very-high","tags":["CWE-416: Use After Free","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.function-use-after-free"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use %s, %d, %c... to format your variables, otherwise this could leak information."},"help":{"markdown":"Use %s, %d, %c... to format your variables, otherwise this could leak information.\n\n<b>References:</b>\n - [http://nebelwelt.net/files/13PPREW.pdf](http://nebelwelt.net/files/13PPREW.pdf)\n","text":"Use %s, %d, %c... to format your variables, otherwise this could leak information."},"id":"opengrep-rules.c.lang.security.info-leak-on-non-formated-string","name":"opengrep-rules.c.lang.security.info-leak-on-non-formated-string","properties":{"precision":"very-high","tags":["CWE-532: Insertion of Sensitive Information into Log File","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.info-leak-on-non-formated-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead."},"help":{"markdown":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\n\n<b>References:</b>\n - [https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s](https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s)\n","text":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead."},"id":"opengrep-rules.c.lang.security.insecure-use-gets-fn","name":"opengrep-rules.c.lang.security.insecure-use-gets-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-gets-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."},"help":{"markdown":"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/14.html](https://cwe.mitre.org/data/definitions/14.html)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."},"id":"opengrep-rules.c.lang.security.insecure-use-memset","name":"opengrep-rules.c.lang.security.insecure-use-memset","properties":{"precision":"very-high","tags":["CWE-14: Compiler Removal of Code to Clear Buffers","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-memset"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."},"help":{"markdown":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\n\n<b>References:</b>\n - [https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions](https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions)\n - [https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html](https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html)\n","text":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."},"id":"opengrep-rules.c.lang.security.insecure-use-printf-fn","name":"opengrep-rules.c.lang.security.insecure-use-printf-fn","properties":{"precision":"very-high","tags":["CWE-134: Use of Externally-Controlled Format String","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-printf-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."},"help":{"markdown":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\n\n<b>References:</b>\n - [http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html](http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html)\n","text":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."},"id":"opengrep-rules.c.lang.security.insecure-use-scanf-fn","name":"opengrep-rules.c.lang.security.insecure-use-scanf-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-scanf-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead."},"help":{"markdown":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\n\n<b>References:</b>\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-12553](https://nvd.nist.gov/vuln/detail/CVE-2019-12553)\n - [https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/](https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/)\n","text":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead."},"id":"opengrep-rules.c.lang.security.insecure-use-strcat-fn","name":"opengrep-rules.c.lang.security.insecure-use-strcat-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-strcat-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."},"help":{"markdown":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-11365](https://nvd.nist.gov/vuln/detail/CVE-2019-11365)\n","text":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."},"id":"opengrep-rules.c.lang.security.insecure-use-string-copy-fn","name":"opengrep-rules.c.lang.security.insecure-use-string-copy-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-string-copy-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."},"help":{"markdown":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\n\n<b>References:</b>\n - [https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged](https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged)\n - [https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS](https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS)\n - [https://stackoverflow.com/a/40335556](https://stackoverflow.com/a/40335556)\n","text":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."},"id":"opengrep-rules.c.lang.security.insecure-use-strtok-fn","name":"opengrep-rules.c.lang.security.insecure-use-strtok-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.insecure-use-strtok-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function."},"help":{"markdown":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\n\n<b>References:</b>\n - [https://lwn.net/Articles/606141/](https://lwn.net/Articles/606141/)\n","text":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function."},"id":"opengrep-rules.c.lang.security.random-fd-exhaustion","name":"opengrep-rules.c.lang.security.random-fd-exhaustion","properties":{"precision":"very-high","tags":["CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.random-fd-exhaustion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Variable '$VAR' was used after being freed. This can lead to undefined behavior."},"help":{"markdown":"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/416.html](https://cwe.mitre.org/data/definitions/416.html)\n - [https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/)\n","text":"Variable '$VAR' was used after being freed. This can lead to undefined behavior."},"id":"opengrep-rules.c.lang.security.use-after-free","name":"opengrep-rules.c.lang.security.use-after-free","properties":{"precision":"very-high","tags":["CWE-416: Use After Free","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.c.lang.security.use-after-free"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A call to clojure.java.shell has been found, this could lead to an RCE if the inputs are user-controllable. Please ensure their origin is validated and sanitized."},"help":{"markdown":"A call to clojure.java.shell has been found, this could lead to an RCE if the inputs are user-controllable. Please ensure their origin is validated and sanitized.\n\n<b>References:</b>\n - [https://clojuredocs.org/clojure.java.shell/sh](https://clojuredocs.org/clojure.java.shell/sh)\n","text":"A call to clojure.java.shell has been found, this could lead to an RCE if the inputs are user-controllable. Please ensure their origin is validated and sanitized."},"id":"opengrep-rules.clojure.lang.security.command-injection-shell-call","name":"opengrep-rules.clojure.lang.security.command-injection-shell-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.clojure.lang.security.command-injection-shell-call"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"id":"opengrep-rules.clojure.lang.security.documentbuilderfactory-xxe","name":"opengrep-rules.clojure.lang.security.documentbuilderfactory-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.clojure.lang.security.documentbuilderfactory-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms."},"help":{"markdown":"MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n","text":"MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms."},"id":"opengrep-rules.clojure.lang.security.use-of-md5","name":"opengrep-rules.clojure.lang.security.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.clojure.lang.security.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"id":"opengrep-rules.clojure.lang.security.use-of-sha1","name":"opengrep-rules.clojure.lang.security.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.clojure.lang.security.use-of-sha1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The default core Clojure read-string method is dangerous and can lead to deserialization vulnerabilities. Use the edn/read-string instead."},"help":{"markdown":"The default core Clojure read-string method is dangerous and can lead to deserialization vulnerabilities. Use the edn/read-string instead.\n\n<b>References:</b>\n - [http://www.learningclojure.com/2013/02/clojures-reader-is-unsafe.html#post-body-2898830171141471587](http://www.learningclojure.com/2013/02/clojures-reader-is-unsafe.html#post-body-2898830171141471587)\n - [https://ericnormand.me/article/clojure-web-security](https://ericnormand.me/article/clojure-web-security)\n - [https://github.com/jafingerhut/jafingerhut.github.com/blob/master/clojure-info/using-edn-safely.md#vulnerabilities-in-clojurecores-read-and-read-string](https://github.com/jafingerhut/jafingerhut.github.com/blob/master/clojure-info/using-edn-safely.md#vulnerabilities-in-clojurecores-read-and-read-string)\n","text":"The default core Clojure read-string method is dangerous and can lead to deserialization vulnerabilities. Use the edn/read-string instead."},"id":"opengrep-rules.clojure.security.clojure-read-string.read-string-unsafe","name":"opengrep-rules.clojure.security.clojure-read-string.read-string-unsafe","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.clojure.security.clojure-read-string.read-string-unsafe"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution."},"help":{"markdown":"LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection/](https://owasp.org/Top10/A03_2021-Injection/)\n - [https://cwe.mitre.org/data/definitions/90](https://cwe.mitre.org/data/definitions/90)\n - [https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example)\n","text":"LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution."},"id":"opengrep-rules.csharp.dotnet.security.audit.ldap-injection","name":"opengrep-rules.csharp.dotnet.security.audit.ldap-injection","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.ldap-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application."},"help":{"markdown":"Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/915.html](https://cwe.mitre.org/data/definitions/915.html)\n - [https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md](https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md)\n","text":"Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application."},"id":"opengrep-rules.csharp.dotnet.security.audit.mass-assignment","name":"opengrep-rules.csharp.dotnet.security.audit.mass-assignment","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.mass-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks."},"help":{"markdown":"A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n - [https://cwe.mitre.org/data/definitions/307.html](https://cwe.mitre.org/data/definitions/307.html)\n","text":"A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks."},"id":"opengrep-rules.csharp.dotnet.security.audit.misconfigured-lockout-option","name":"opengrep-rules.csharp.dotnet.security.audit.misconfigured-lockout-option","properties":{"precision":"very-high","tags":["CWE-307: Improper Restriction of Excessive Authentication Attempts","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.misconfigured-lockout-option"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."},"help":{"markdown":"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://cwe.mitre.org/data/definitions/862.html](https://cwe.mitre.org/data/definitions/862.html)\n - [https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-7.0](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-7.0)\n","text":"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."},"id":"opengrep-rules.csharp.dotnet.security.audit.missing-or-broken-authorization","name":"opengrep-rules.csharp.dotnet.security.audit.missing-or-broken-authorization","properties":{"precision":"very-high","tags":["CWE-862: Missing Authorization","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.missing-or-broken-authorization"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"An open directory listing is potentially exposed, potentially revealing sensitive information to attackers."},"help":{"markdown":"An open directory listing is potentially exposed, potentially revealing sensitive information to attackers.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/548.html](https://cwe.mitre.org/data/definitions/548.html)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration/](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/)\n - [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing)\n","text":"An open directory listing is potentially exposed, potentially revealing sensitive information to attackers."},"id":"opengrep-rules.csharp.dotnet.security.audit.open-directory-listing","name":"opengrep-rules.csharp.dotnet.security.audit.open-directory-listing","properties":{"precision":"very-high","tags":["CWE-548: Exposure of Information Through Directory Listing","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.open-directory-listing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ASP.NET Core MVC provides an HtmlString class which isn't automatically encoded upon output. This should never be used in combination with untrusted input as this will expose an XSS vulnerability."},"help":{"markdown":"ASP.NET Core MVC provides an HtmlString class which isn't automatically encoded upon output. This should never be used in combination with untrusted input as this will expose an XSS vulnerability.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/116.html](https://cwe.mitre.org/data/definitions/116.html)\n - [https://owasp.org/Top10/A03_2021-Injection/](https://owasp.org/Top10/A03_2021-Injection/)\n - [https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-6.0#html-encoding-using-razor](https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-6.0#html-encoding-using-razor)\n","text":"ASP.NET Core MVC provides an HtmlString class which isn't automatically encoded upon output. This should never be used in combination with untrusted input as this will expose an XSS vulnerability."},"id":"opengrep-rules.csharp.dotnet.security.audit.razor-use-of-htmlstring","name":"opengrep-rules.csharp.dotnet.security.audit.razor-use-of-htmlstring","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.razor-use-of-htmlstring"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation."},"help":{"markdown":"XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection/](https://owasp.org/Top10/A03_2021-Injection/)\n - [https://cwe.mitre.org/data/definitions/643.html](https://cwe.mitre.org/data/definitions/643.html)\n","text":"XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation."},"id":"opengrep-rules.csharp.dotnet.security.audit.xpath-injection","name":"opengrep-rules.csharp.dotnet.security.audit.xpath-injection","properties":{"precision":"very-high","tags":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.audit.xpath-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"$METHOD is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls."},"help":{"markdown":"$METHOD is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#cross-site-request-forgery](https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#cross-site-request-forgery)\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests)\n","text":"$METHOD is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls."},"id":"opengrep-rules.csharp.dotnet.security.mvc-missing-antiforgery","name":"opengrep-rules.csharp.dotnet.security.mvc-missing-antiforgery","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.mvc-missing-antiforgery"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ASP.NET applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Set `debug` to `false` or remove it from `<compilation ... />`"},"help":{"markdown":"ASP.NET applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Set `debug` to `false` or remove it from `<compilation ... />`\n\n<b>References:</b>\n - [https://web.archive.org/web/20190919105353/https://blogs.msdn.microsoft.com/prashant_upadhyay/2011/07/14/why-debugfalse-in-asp-net-applications-in-production-environment/](https://web.archive.org/web/20190919105353/https://blogs.msdn.microsoft.com/prashant_upadhyay/2011/07/14/why-debugfalse-in-asp-net-applications-in-production-environment/)\n - [https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx](https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx)\n","text":"ASP.NET applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Set `debug` to `false` or remove it from `<compilation ... />`"},"id":"opengrep-rules.csharp.dotnet.security.net-webconfig-debug","name":"opengrep-rules.csharp.dotnet.security.net-webconfig-debug","properties":{"precision":"very-high","tags":["CWE-11: ASP.NET Misconfiguration: Creating Debug Binary","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.net-webconfig-debug"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"OWASP guidance recommends disabling tracing for production applications to prevent accidental leakage of sensitive application information."},"help":{"markdown":"OWASP guidance recommends disabling tracing for production applications to prevent accidental leakage of sensitive application information.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#asp-net-web-forms-guidance](https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#asp-net-web-forms-guidance)\n - [https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx](https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx)\n","text":"OWASP guidance recommends disabling tracing for production applications to prevent accidental leakage of sensitive application information."},"id":"opengrep-rules.csharp.dotnet.security.net-webconfig-trace-enabled","name":"opengrep-rules.csharp.dotnet.security.net-webconfig-trace-enabled","properties":{"precision":"very-high","tags":["CWE-1323: Improper Management of Sensitive Trace Data","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.net-webconfig-trace-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process."},"help":{"markdown":"User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process.\n\n<b>References:</b>\n - [https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/](https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/)\n","text":"User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process."},"id":"opengrep-rules.csharp.dotnet.security.razor-template-injection","name":"opengrep-rules.csharp.dotnet.security.razor-template-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.razor-template-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead."},"help":{"markdown":"Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead.\n\n<b>References:</b>\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.des?view=net-6.0#remarks](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.des?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rc2?view=net-6.0#remarks](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rc2?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aes?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aes?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0)\n","text":"Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead."},"id":"opengrep-rules.csharp.dotnet.security.use_deprecated_cipher_algorithm","name":"opengrep-rules.csharp.dotnet.security.use_deprecated_cipher_algorithm","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.use_deprecated_cipher_algorithm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305."},"help":{"markdown":"Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305.\n\n<b>References:</b>\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n","text":"Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305."},"id":"opengrep-rules.csharp.dotnet.security.use_ecb_mode","name":"opengrep-rules.csharp.dotnet.security.use_ecb_mode","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.use_ecb_mode"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead."},"help":{"markdown":"You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead.\n\n<b>References:</b>\n - [https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks](https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key)\n","text":"You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead."},"id":"opengrep-rules.csharp.dotnet.security.use_weak_rng_for_keygeneration","name":"opengrep-rules.csharp.dotnet.security.use_weak_rng_for_keygeneration","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.use_weak_rng_for_keygeneration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead."},"help":{"markdown":"You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead.\n\n<b>References:</b>\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangedeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangedeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangedeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangedeformatter)\n","text":"You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead."},"id":"opengrep-rules.csharp.dotnet.security.use_weak_rsa_encryption_padding","name":"opengrep-rules.csharp.dotnet.security.use_weak_rsa_encryption_padding","properties":{"precision":"very-high","tags":["CWE-780: Use of RSA Algorithm without OAEP","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.use_weak_rsa_encryption_padding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cookie Secure flag is explicitly disabled. You should enforce this value to avoid accidentally presenting sensitive cookie values over plaintext HTTP connections."},"help":{"markdown":"Cookie Secure flag is explicitly disabled. You should enforce this value to avoid accidentally presenting sensitive cookie values over plaintext HTTP connections.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/http-cookies](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/http-cookies)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.web.security.formsauthentication.requiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_FormsAuthentication_RequireSSL](https://docs.microsoft.com/en-us/dotnet/api/system.web.security.formsauthentication.requiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_FormsAuthentication_RequireSSL)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.web.security.roles.cookierequiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_Roles_CookieRequireSSL](https://docs.microsoft.com/en-us/dotnet/api/system.web.security.roles.cookierequiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_Roles_CookieRequireSSL)\n","text":"Cookie Secure flag is explicitly disabled. You should enforce this value to avoid accidentally presenting sensitive cookie values over plaintext HTTP connections."},"id":"opengrep-rules.csharp.dotnet.security.web-config-insecure-cookie-settings","name":"opengrep-rules.csharp.dotnet.security.web-config-insecure-cookie-settings","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.dotnet.security.web-config-insecure-cookie-settings"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"String interpolation in log message obscures the distinction between variables and the log message. Use structured logging instead, where the variables are passed as additional arguments and the interpolation is performed by the logging library. This reduces the possibility of log injection and makes it easier to search through logs."},"help":{"markdown":"String interpolation in log message obscures the distinction between variables and the log message. Use structured logging instead, where the variables are passed as additional arguments and the interpolation is performed by the logging library. This reduces the possibility of log injection and makes it easier to search through logs.\n\n<b>References:</b>\n - [https://github.com/NLog/NLog/wiki/How-to-use-structured-logging](https://github.com/NLog/NLog/wiki/How-to-use-structured-logging)\n - [https://softwareengineering.stackexchange.com/questions/312197/benefits-of-structured-logging-vs-basic-logging](https://softwareengineering.stackexchange.com/questions/312197/benefits-of-structured-logging-vs-basic-logging)\n","text":"String interpolation in log message obscures the distinction between variables and the log message. Use structured logging instead, where the variables are passed as additional arguments and the interpolation is performed by the logging library. This reduces the possibility of log injection and makes it easier to search through logs."},"id":"opengrep-rules.csharp.lang.best-practice.structured-logging","name":"opengrep-rules.csharp.lang.best-practice.structured-logging","properties":{"precision":"very-high","tags":["CWE-117: Improper Output Neutralization for Logs","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.best-practice.structured-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations."},"help":{"markdown":"Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0#testing-for-equality](https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0#testing-for-equality)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.double.epsilon?view=net-6.0#platform-notes](https://docs.microsoft.com/en-us/dotnet/api/system.double.epsilon?view=net-6.0#platform-notes)\n","text":"Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations."},"id":"opengrep-rules.csharp.lang.correctness.double.correctness-double-epsilon-equality","name":"opengrep-rules.csharp.lang.correctness.double.correctness-double-epsilon-equality","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.correctness.double.correctness-double-epsilon-equality"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code."},"help":{"markdown":"Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.twoletterisoregionname?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.twoletterisoregionname?view=net-6.0#remarks)\n","text":"Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code."},"id":"opengrep-rules.csharp.lang.correctness.regioninfo.correctness-regioninfo-interop","name":"opengrep-rules.csharp.lang.correctness.regioninfo.correctness-regioninfo-interop","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.correctness.regioninfo.correctness-regioninfo-interop"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Sending the trusted CA list increases the size of the handshake request and can leak system configuration information."},"help":{"markdown":"Sending the trusted CA list increases the size of the handshake request and can leak system configuration information.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509collection?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509collection?view=net-6.0#remarks)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509store?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509store?view=net-6.0#remarks)\n","text":"Sending the trusted CA list increases the size of the handshake request and can leak system configuration information."},"id":"opengrep-rules.csharp.lang.correctness.sslcertificatetrust.correctness-sslcertificatetrust-handshake-no-trust","name":"opengrep-rules.csharp.lang.correctness.sslcertificatetrust.correctness-sslcertificatetrust-handshake-no-trust","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","HIGH CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.correctness.sslcertificatetrust.correctness-sslcertificatetrust-handshake-no-trust"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used."},"help":{"markdown":"The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n - [https://cwe.mitre.org/data/definitions/613.html](https://cwe.mitre.org/data/definitions/613.html)\n - [https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet](https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet)\n","text":"The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used."},"id":"opengrep-rules.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation","name":"opengrep-rules.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation","properties":{"precision":"very-high","tags":["CWE-613: Insufficient Session Expiration","HIGH CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead."},"help":{"markdown":"Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.issuernameregistry?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.issuernameregistry?view=netframework-4.8)\n","text":"Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead."},"id":"opengrep-rules.csharp.lang.security.cryptography.X509-subject-name-validation","name":"opengrep-rules.csharp.lang.security.cryptography.X509-subject-name-validation","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.cryptography.X509-subject-name-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"X509Certificate2.PrivateKey is obsolete. Use a method such as GetRSAPrivateKey() or GetECDsaPrivateKey(). Alternatively, use the CopyWithPrivateKey() method to create a new instance with a private key. Further, if you set X509Certificate2.PrivateKey to `null` or set it to another key without deleting it first, the private key will be left on disk. "},"help":{"markdown":"X509Certificate2.PrivateKey is obsolete. Use a method such as GetRSAPrivateKey() or GetECDsaPrivateKey(). Alternatively, use the CopyWithPrivateKey() method to create a new instance with a private key. Further, if you set X509Certificate2.PrivateKey to `null` or set it to another key without deleting it first, the private key will be left on disk. \n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.privatekey](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.privatekey)\n","text":"X509Certificate2.PrivateKey is obsolete. Use a method such as GetRSAPrivateKey() or GetECDsaPrivateKey(). Alternatively, use the CopyWithPrivateKey() method to create a new instance with a private key. Further, if you set X509Certificate2.PrivateKey to `null` or set it to another key without deleting it first, the private key will be left on disk. "},"id":"opengrep-rules.csharp.lang.security.cryptography.X509Certificate2-privkey","name":"opengrep-rules.csharp.lang.security.cryptography.X509Certificate2-privkey","properties":{"precision":"very-high","tags":["CWE-310: CWE CATEGORY: Cryptographic Issues","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.cryptography.X509Certificate2-privkey"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true."},"help":{"markdown":"Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n - [https://cwe.mitre.org/data/definitions/347](https://cwe.mitre.org/data/definitions/347)\n","text":"Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true."},"id":"opengrep-rules.csharp.lang.security.cryptography.unsigned-security-token","name":"opengrep-rules.csharp.lang.security.cryptography.unsigned-security-token","properties":{"precision":"very-high","tags":["CWE-347: Improper Verification of Cryptographic Signature","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.cryptography.unsigned-security-token"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal."},"help":{"markdown":"String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.\n\n<b>References:</b>\n - [https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/](https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks)\n","text":"String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal."},"id":"opengrep-rules.csharp.lang.security.filesystem.unsafe-path-combine","name":"opengrep-rules.csharp.lang.security.filesystem.unsafe-path-combine","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.filesystem.unsafe-path-combine"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\"."},"help":{"markdown":"The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\".\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-6.0)\n","text":"The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\"."},"id":"opengrep-rules.csharp.lang.security.http.http-listener-wildcard-bindings","name":"opengrep-rules.csharp.lang.security.http.http-listener-wildcard-bindings","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.http.http-listener-wildcard-bindings"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."},"help":{"markdown":"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n","text":"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."},"id":"opengrep-rules.csharp.lang.security.injections.os-command-injection","name":"opengrep-rules.csharp.lang.security.injections.os-command-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.injections.os-command-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Only use DataContractResolver if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior."},"help":{"markdown":"Only use DataContractResolver if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide](https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide)\n","text":"Only use DataContractResolver if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior."},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.data-contract-resolver","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.data-contract-resolver","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.data-contract-resolver"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"},"help":{"markdown":"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide](https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide)\n","text":"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","HIGH CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"$type extension has the potential to be unsafe, so use it with common sense and known json sources and not public facing ones to be safe"},"help":{"markdown":"$type extension has the potential to be unsafe, so use it with common sense and known json sources and not public facing ones to be safe\n\n<b>References:</b>\n - [https://github.com/mgholam/fastJSON#security-warning-update](https://github.com/mgholam/fastJSON#security-warning-update)\n","text":"$type extension has the potential to be unsafe, so use it with common sense and known json sources and not public facing ones to be safe"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fastjson-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fastjson-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fastjson-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability."},"help":{"markdown":"The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.\n\n<b>References:</b>\n - [https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution](https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution)\n","text":"The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability."},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fspickler-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fspickler-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-fspickler-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The SimpleTypeResolver class is insecure and should not be used. Using SimpleTypeResolver to deserialize JSON could allow the remote client to execute malicious code within the app and take control of the web server."},"help":{"markdown":"The SimpleTypeResolver class is insecure and should not be used. Using SimpleTypeResolver to deserialize JSON could allow the remote client to execute malicious code within the app and take control of the web server.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.simpletyperesolver?view=netframework-4.8#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.simpletyperesolver?view=netframework-4.8#remarks)\n","text":"The SimpleTypeResolver class is insecure and should not be used. Using SimpleTypeResolver to deserialize JSON could allow the remote client to execute malicious code within the app and take control of the web server."},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-javascriptserializer-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-javascriptserializer-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-javascriptserializer-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure"},"help":{"markdown":"The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8)\n","text":"The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-losformatter-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-losformatter-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-losformatter-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure"},"help":{"markdown":"The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security)\n","text":"The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-netdatacontract-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-netdatacontract-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-netdatacontract-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code execution in the context of the process. Use a custom SerializationBinder whenever using a setting other than TypeNameHandling.None."},"help":{"markdown":"TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code execution in the context of the process. Use a custom SerializationBinder whenever using a setting other than TypeNameHandling.None.\n\n<b>References:</b>\n - [https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm#remarks](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm#remarks)\n","text":"TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code execution in the context of the process. Use a custom SerializationBinder whenever using a setting other than TypeNameHandling.None."},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-newtonsoft-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-newtonsoft-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-newtonsoft-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure"},"help":{"markdown":"The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks)\n","text":"The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-soapformatter-deserialization","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-soapformatter-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-soapformatter-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using a .NET remoting service can lead to RCE, even if you try to configure TypeFilterLevel. Recommended to switch from .NET Remoting to WCF https://docs.microsoft.com/en-us/dotnet/framework/wcf/migrating-from-net-remoting-to-wcf"},"help":{"markdown":"Using a .NET remoting service can lead to RCE, even if you try to configure TypeFilterLevel. Recommended to switch from .NET Remoting to WCF https://docs.microsoft.com/en-us/dotnet/framework/wcf/migrating-from-net-remoting-to-wcf\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-6.0)\n - [https://www.synacktiv.com/en/publications/izi-izi-pwn2own-ics-miami.html](https://www.synacktiv.com/en/publications/izi-izi-pwn2own-ics-miami.html)\n","text":"Using a .NET remoting service can lead to RCE, even if you try to configure TypeFilterLevel. Recommended to switch from .NET Remoting to WCF https://docs.microsoft.com/en-us/dotnet/framework/wcf/migrating-from-net-remoting-to-wcf"},"id":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full","name":"opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"MemoryMarshal.CreateSpan and MemoryMarshal.CreateReadOnlySpan should be used with caution, as the length argument is not checked."},"help":{"markdown":"MemoryMarshal.CreateSpan and MemoryMarshal.CreateReadOnlySpan should be used with caution, as the length argument is not checked.\n\n<b>References:</b>\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createspan?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createspan?view=net-6.0)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createreadonlyspan?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createreadonlyspan?view=net-6.0)\n","text":"MemoryMarshal.CreateSpan and MemoryMarshal.CreateReadOnlySpan should be used with caution, as the length argument is not checked."},"id":"opengrep-rules.csharp.lang.security.memory.memory-marshal-create-span","name":"opengrep-rules.csharp.lang.security.memory.memory-marshal-create-span","properties":{"precision":"very-high","tags":["CWE-125: Out-of-bounds Read","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.memory.memory-marshal-create-span"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."},"help":{"markdown":"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/346.html](https://cwe.mitre.org/data/definitions/346.html)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."},"id":"opengrep-rules.csharp.lang.security.missing-hsts-header","name":"opengrep-rules.csharp.lang.security.missing-hsts-header","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.missing-hsts-header"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently."},"help":{"markdown":"A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/601.html](https://cwe.mitre.org/data/definitions/601.html)\n","text":"A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently."},"id":"opengrep-rules.csharp.lang.security.open-redirect","name":"opengrep-rules.csharp.lang.security.open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack"},"help":{"markdown":"When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples)\n","text":"When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack"},"id":"opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos","name":"opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0"},"help":{"markdown":"Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0)\n","text":"Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0"},"id":"opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout","name":"opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'."},"id":"opengrep-rules.csharp.lang.security.sqli.csharp-sqli","name":"opengrep-rules.csharp.lang.security.sqli.csharp-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.sqli.csharp-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself."},"help":{"markdown":"SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself."},"id":"opengrep-rules.csharp.lang.security.ssrf.ssrf","name":"opengrep-rules.csharp.lang.security.ssrf.ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.ssrf.ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering."},"help":{"markdown":"Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/209.html](https://cwe.mitre.org/data/definitions/209.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n","text":"Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering."},"id":"opengrep-rules.csharp.lang.security.stacktrace-disclosure","name":"opengrep-rules.csharp.lang.security.stacktrace-disclosure","properties":{"precision":"very-high","tags":["CWE-209: Generation of Error Message Containing Sensitive Information","HIGH CONFIDENCE","OWASP-A04:2021 - Insecure Design","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.stacktrace-disclosure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"help":{"markdown":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n<b>References:</b>\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n","text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"id":"opengrep-rules.csharp.lang.security.xxe.xmldocument-unsafe-parser-override","name":"opengrep-rules.csharp.lang.security.xxe.xmldocument-unsafe-parser-override","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.xxe.xmldocument-unsafe-parser-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"help":{"markdown":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n<b>References:</b>\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n","text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"id":"opengrep-rules.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override","name":"opengrep-rules.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"help":{"markdown":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n<b>References:</b>\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n","text":"XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."},"id":"opengrep-rules.csharp.lang.security.xxe.xmltextreader-unsafe-defaults","name":"opengrep-rules.csharp.lang.security.xxe.xmltextreader-unsafe-defaults","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.lang.security.xxe.xmltextreader-unsafe-defaults"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unencoded JSON in HTML context is vulnerable to cross-site scripting, because `</script>` is not properly encoded."},"help":{"markdown":"Unencoded JSON in HTML context is vulnerable to cross-site scripting, because `</script>` is not properly encoded.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Unencoded JSON in HTML context is vulnerable to cross-site scripting, because `</script>` is not properly encoded."},"id":"opengrep-rules.csharp.razor.security.html-raw-json","name":"opengrep-rules.csharp.razor.security.html-raw-json","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.csharp.razor.security.html-raw-json"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"To ensure reproducible builds, pin Dockerfile `FROM` commands to a specific hash. You can find the hash by running `docker pull $IMAGE` and then  specify it with `$IMAGE:$VERSION@sha256:<hash goes here>`"},"help":{"markdown":"To ensure reproducible builds, pin Dockerfile `FROM` commands to a specific hash. You can find the hash by running `docker pull $IMAGE` and then  specify it with `$IMAGE:$VERSION@sha256:<hash goes here>`\n\n<b>References:</b>\n - [https://stackoverflow.com/a/33511811/4965](https://stackoverflow.com/a/33511811/4965)\n","text":"To ensure reproducible builds, pin Dockerfile `FROM` commands to a specific hash. You can find the hash by running `docker pull $IMAGE` and then  specify it with `$IMAGE:$VERSION@sha256:<hash goes here>`"},"id":"opengrep-rules.dockerfile.audit.dockerfile-source-not-pinned","name":"opengrep-rules.dockerfile.audit.dockerfile-source-not-pinned","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.audit.dockerfile-source-not-pinned"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Packages in base images should be up-to-date, removing the need for 'apk upgrade'. If packages are out-of-date, consider contacting the base image maintainer."},"help":{"markdown":"Packages in base images should be up-to-date, removing the need for 'apk upgrade'. If packages are out-of-date, consider contacting the base image maintainer.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3017](https://github.com/hadolint/hadolint/wiki/DL3017)\n","text":"Packages in base images should be up-to-date, removing the need for 'apk upgrade'. If packages are out-of-date, consider contacting the base image maintainer."},"id":"opengrep-rules.dockerfile.best-practice.avoid-apk-upgrade","name":"opengrep-rules.dockerfile.best-practice.avoid-apk-upgrade","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-apk-upgrade"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers."},"help":{"markdown":"Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3005](https://github.com/hadolint/hadolint/wiki/DL3005)\n","text":"Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers."},"id":"opengrep-rules.dockerfile.best-practice.avoid-apt-get-upgrade","name":"opengrep-rules.dockerfile.best-practice.avoid-apt-get-upgrade","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-apt-get-upgrade"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Packages in base images should be up-to-date, removing the need for 'dnf update'. If packages are out-of-date, consider contacting the base image maintainer."},"help":{"markdown":"Packages in base images should be up-to-date, removing the need for 'dnf update'. If packages are out-of-date, consider contacting the base image maintainer.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3039](https://github.com/hadolint/hadolint/wiki/DL3039)\n","text":"Packages in base images should be up-to-date, removing the need for 'dnf update'. If packages are out-of-date, consider contacting the base image maintainer."},"id":"opengrep-rules.dockerfile.best-practice.avoid-dnf-update","name":"opengrep-rules.dockerfile.best-practice.avoid-dnf-update","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-dnf-update"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning."},"help":{"markdown":"Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3007](https://github.com/hadolint/hadolint/wiki/DL3007)\n","text":"Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning."},"id":"opengrep-rules.dockerfile.best-practice.avoid-latest-version","name":"opengrep-rules.dockerfile.best-practice.avoid-latest-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-latest-version"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Using '--platform' with FROM restricts the image to build on a single platform. Further, this must be the same as the build platform. If you intended to specify the target platform, use the utility 'docker buildx --platform=' instead."},"help":{"markdown":"Using '--platform' with FROM restricts the image to build on a single platform. Further, this must be the same as the build platform. If you intended to specify the target platform, use the utility 'docker buildx --platform=' instead.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3029](https://github.com/hadolint/hadolint/wiki/DL3029)\n - [https://docs.docker.com/buildx/working-with-buildx/](https://docs.docker.com/buildx/working-with-buildx/)\n","text":"Using '--platform' with FROM restricts the image to build on a single platform. Further, this must be the same as the build platform. If you intended to specify the target platform, use the utility 'docker buildx --platform=' instead."},"id":"opengrep-rules.dockerfile.best-practice.avoid-platform-with-from","name":"opengrep-rules.dockerfile.best-practice.avoid-platform-with-from","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-platform-with-from"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Packages in base images should be up-to-date, removing the need for 'yum update'. If packages are out-of-date, consider contacting the base image maintainer."},"help":{"markdown":"Packages in base images should be up-to-date, removing the need for 'yum update'. If packages are out-of-date, consider contacting the base image maintainer.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3031](https://github.com/hadolint/hadolint/wiki/DL3031)\n","text":"Packages in base images should be up-to-date, removing the need for 'yum update'. If packages are out-of-date, consider contacting the base image maintainer."},"id":"opengrep-rules.dockerfile.best-practice.avoid-yum-update","name":"opengrep-rules.dockerfile.best-practice.avoid-yum-update","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-yum-update"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Packages in base images should be up-to-date, removing the need for 'zypper update'. If packages are out-of-date, consider contacting the base image maintainer."},"help":{"markdown":"Packages in base images should be up-to-date, removing the need for 'zypper update'. If packages are out-of-date, consider contacting the base image maintainer.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3035](https://github.com/hadolint/hadolint/wiki/DL3035)\n","text":"Packages in base images should be up-to-date, removing the need for 'zypper update'. If packages are out-of-date, consider contacting the base image maintainer."},"id":"opengrep-rules.dockerfile.best-practice.avoid-zypper-update","name":"opengrep-rules.dockerfile.best-practice.avoid-zypper-update","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.avoid-zypper-update"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"MAINTAINER has been deprecated."},"help":{"markdown":"MAINTAINER has been deprecated.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4000](https://github.com/hadolint/hadolint/wiki/DL4000)\n","text":"MAINTAINER has been deprecated."},"id":"opengrep-rules.dockerfile.best-practice.maintainer-is-deprecated","name":"opengrep-rules.dockerfile.best-practice.maintainer-is-deprecated","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.maintainer-is-deprecated"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This apk command is missing '--no-cache'. This forces apk to use a package index instead of a local package cache, removing the need for '--update' and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command."},"help":{"markdown":"This apk command is missing '--no-cache'. This forces apk to use a package index instead of a local package cache, removing the need for '--update' and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3019](https://github.com/hadolint/hadolint/wiki/DL3019)\n","text":"This apk command is missing '--no-cache'. This forces apk to use a package index instead of a local package cache, removing the need for '--update' and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command."},"id":"opengrep-rules.dockerfile.best-practice.missing-apk-no-cache","name":"opengrep-rules.dockerfile.best-practice.missing-apk-no-cache","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-apk-no-cache"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"help":{"markdown":"This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3038](https://github.com/hadolint/hadolint/wiki/DL3038)\n","text":"This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"id":"opengrep-rules.dockerfile.best-practice.missing-dnf-assume-yes-switch","name":"opengrep-rules.dockerfile.best-practice.missing-dnf-assume-yes-switch","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-dnf-assume-yes-switch"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"help":{"markdown":"This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3038](https://github.com/hadolint/hadolint/wiki/DL3038)\n","text":"This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"id":"opengrep-rules.dockerfile.best-practice.missing-dnf-clean-all","name":"opengrep-rules.dockerfile.best-practice.missing-dnf-clean-all","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-dnf-clean-all"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected docker image with no explicit version attached. Images should be tagged with an explicit version to produce deterministic container images -- attach a version when using  `FROM <image>`."},"help":{"markdown":"Detected docker image with no explicit version attached. Images should be tagged with an explicit version to produce deterministic container images -- attach a version when using  `FROM <image>`.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n","text":"Detected docker image with no explicit version attached. Images should be tagged with an explicit version to produce deterministic container images -- attach a version when using  `FROM <image>`."},"id":"opengrep-rules.dockerfile.best-practice.missing-image-version","name":"opengrep-rules.dockerfile.best-practice.missing-image-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-image-version"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This 'apt-get install' is missing '--no-install-recommends'. This prevents unnecessary packages from being installed, thereby reducing image size. Add '--no-install-recommends'."},"help":{"markdown":"This 'apt-get install' is missing '--no-install-recommends'. This prevents unnecessary packages from being installed, thereby reducing image size. Add '--no-install-recommends'.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3015](https://github.com/hadolint/hadolint/wiki/DL3015)\n","text":"This 'apt-get install' is missing '--no-install-recommends'. This prevents unnecessary packages from being installed, thereby reducing image size. Add '--no-install-recommends'."},"id":"opengrep-rules.dockerfile.best-practice.missing-no-install-recommends","name":"opengrep-rules.dockerfile.best-practice.missing-no-install-recommends","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-no-install-recommends"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This '$PIP install' is missing '--no-cache-dir'. This flag prevents package archives from being kept around, thereby reducing image size. Add '--no-cache-dir'."},"help":{"markdown":"This '$PIP install' is missing '--no-cache-dir'. This flag prevents package archives from being kept around, thereby reducing image size. Add '--no-cache-dir'.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n","text":"This '$PIP install' is missing '--no-cache-dir'. This flag prevents package archives from being kept around, thereby reducing image size. Add '--no-cache-dir'."},"id":"opengrep-rules.dockerfile.best-practice.missing-pip-no-cache-dir","name":"opengrep-rules.dockerfile.best-practice.missing-pip-no-cache-dir","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-pip-no-cache-dir"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"help":{"markdown":"This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3030](https://github.com/hadolint/hadolint/wiki/DL3030)\n","text":"This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"id":"opengrep-rules.dockerfile.best-practice.missing-yum-assume-yes-switch","name":"opengrep-rules.dockerfile.best-practice.missing-yum-assume-yes-switch","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-yum-assume-yes-switch"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"help":{"markdown":"This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3036](https://github.com/hadolint/hadolint/wiki/DL3036)\n","text":"This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"id":"opengrep-rules.dockerfile.best-practice.missing-zypper-clean","name":"opengrep-rules.dockerfile.best-practice.missing-zypper-clean","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.missing-zypper-clean"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Some commands such as `$CMD` do not make sense in a container. Do not use these."},"help":{"markdown":"Some commands such as `$CMD` do not make sense in a container. Do not use these.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3001](https://github.com/hadolint/hadolint/wiki/DL3001)\n","text":"Some commands such as `$CMD` do not make sense in a container. Do not use these."},"id":"opengrep-rules.dockerfile.best-practice.nonsensical-command","name":"opengrep-rules.dockerfile.best-practice.nonsensical-command","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.nonsensical-command"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."},"help":{"markdown":"'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n","text":"'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."},"id":"opengrep-rules.dockerfile.best-practice.prefer-apt-get","name":"opengrep-rules.dockerfile.best-practice.prefer-apt-get","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.prefer-apt-get"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The ADD command will accept and include files from a URL and automatically extract archives. This potentially exposes the container to a man-in-the-middle attack or other attacks if a malicious actor can tamper with the source archive. Since ADD can have this and other unexpected side effects, the use of the more explicit COPY command is preferred."},"help":{"markdown":"The ADD command will accept and include files from a URL and automatically extract archives. This potentially exposes the container to a man-in-the-middle attack or other attacks if a malicious actor can tamper with the source archive. Since ADD can have this and other unexpected side effects, the use of the more explicit COPY command is preferred.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n","text":"The ADD command will accept and include files from a URL and automatically extract archives. This potentially exposes the container to a man-in-the-middle attack or other attacks if a malicious actor can tamper with the source archive. Since ADD can have this and other unexpected side effects, the use of the more explicit COPY command is preferred."},"id":"opengrep-rules.dockerfile.best-practice.prefer-copy-over-add","name":"opengrep-rules.dockerfile.best-practice.prefer-copy-over-add","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.prefer-copy-over-add"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Prefer JSON notation when using CMD or ENTRYPOINT. This allows signals to be passed from the OS."},"help":{"markdown":"Prefer JSON notation when using CMD or ENTRYPOINT. This allows signals to be passed from the OS.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3025](https://github.com/hadolint/hadolint/wiki/DL3025)\n - [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd)\n","text":"Prefer JSON notation when using CMD or ENTRYPOINT. This allows signals to be passed from the OS."},"id":"opengrep-rules.dockerfile.best-practice.prefer-json-notation","name":"opengrep-rules.dockerfile.best-practice.prefer-json-notation","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.prefer-json-notation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."},"help":{"markdown":"The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n","text":"The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."},"id":"opengrep-rules.dockerfile.best-practice.remove-package-cache","name":"opengrep-rules.dockerfile.best-practice.remove-package-cache","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.remove-package-cache"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain."},"help":{"markdown":"The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n","text":"The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain."},"id":"opengrep-rules.dockerfile.best-practice.remove-package-lists","name":"opengrep-rules.dockerfile.best-practice.remove-package-lists","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.remove-package-lists"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`."},"help":{"markdown":"Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4006](https://github.com/hadolint/hadolint/wiki/DL4006)\n","text":"Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`."},"id":"opengrep-rules.dockerfile.best-practice.set-pipefail","name":"opengrep-rules.dockerfile.best-practice.set-pipefail","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.set-pipefail"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"'wget' and 'curl' are similar tools. Choose one and do not install the other to decrease image size."},"help":{"markdown":"'wget' and 'curl' are similar tools. Choose one and do not install the other to decrease image size.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4001](https://github.com/hadolint/hadolint/wiki/DL4001)\n","text":"'wget' and 'curl' are similar tools. Choose one and do not install the other to decrease image size."},"id":"opengrep-rules.dockerfile.best-practice.use-either-wget-or-curl","name":"opengrep-rules.dockerfile.best-practice.use-either-wget-or-curl","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.use-either-wget-or-curl"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'."},"help":{"markdown":"Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4005](https://github.com/hadolint/hadolint/wiki/DL4005)\n","text":"Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'."},"id":"opengrep-rules.dockerfile.best-practice.use-shell-instruction","name":"opengrep-rules.dockerfile.best-practice.use-shell-instruction","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.use-shell-instruction"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"As recommended by Docker's documentation, it is best to use 'WORKDIR' instead of 'RUN cd ...' for improved clarity and reliability. Also, 'RUN cd ...' may not work as expected in a container."},"help":{"markdown":"As recommended by Docker's documentation, it is best to use 'WORKDIR' instead of 'RUN cd ...' for improved clarity and reliability. Also, 'RUN cd ...' may not work as expected in a container.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n","text":"As recommended by Docker's documentation, it is best to use 'WORKDIR' instead of 'RUN cd ...' for improved clarity and reliability. Also, 'RUN cd ...' may not work as expected in a container."},"id":"opengrep-rules.dockerfile.best-practice.use-workdir","name":"opengrep-rules.dockerfile.best-practice.use-workdir","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.best-practice.use-workdir"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected an invalid port number. Valid ports are 0 through 65535."},"help":{"markdown":"Detected an invalid port number. Valid ports are 0 through 65535.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3011](https://github.com/hadolint/hadolint/wiki/DL3011)\n","text":"Detected an invalid port number. Valid ports are 0 through 65535."},"id":"opengrep-rules.dockerfile.correctness.invalid-port","name":"opengrep-rules.dockerfile.correctness.invalid-port","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.correctness.invalid-port"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"help":{"markdown":"This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3014](https://github.com/hadolint/hadolint/wiki/DL3014)\n","text":"This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"id":"opengrep-rules.dockerfile.correctness.missing-assume-yes-switch","name":"opengrep-rules.dockerfile.correctness.missing-assume-yes-switch","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.correctness.missing-assume-yes-switch"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Multiple ENTRYPOINT instructions were found. Only the last one will take effect."},"help":{"markdown":"Multiple ENTRYPOINT instructions were found. Only the last one will take effect.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4004](https://github.com/hadolint/hadolint/wiki/DL4004)\n - [https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/ENTRYPOINT/0](https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/ENTRYPOINT/0)\n","text":"Multiple ENTRYPOINT instructions were found. Only the last one will take effect."},"id":"opengrep-rules.dockerfile.correctness.multiple-entrypoint-instructions","name":"opengrep-rules.dockerfile.correctness.multiple-entrypoint-instructions","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.correctness.multiple-entrypoint-instructions"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The Dockerfile(image) mounts docker.sock to the container which may allow an attacker already inside of the container to escape container and execute arbitrary commands on the host machine."},"help":{"markdown":"The Dockerfile(image) mounts docker.sock to the container which may allow an attacker already inside of the container to escape container and execute arbitrary commands on the host machine.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n - [https://redfoxsec.com/blog/insecure-volume-mounts-in-docker/](https://redfoxsec.com/blog/insecure-volume-mounts-in-docker/)\n - [https://blog.quarkslab.com/why-is-exposing-the-docker-socket-a-really-bad-idea.html](https://blog.quarkslab.com/why-is-exposing-the-docker-socket-a-really-bad-idea.html)\n","text":"The Dockerfile(image) mounts docker.sock to the container which may allow an attacker already inside of the container to escape container and execute arbitrary commands on the host machine."},"id":"opengrep-rules.dockerfile.security.dockerfile-dockerd-socket-mount","name":"opengrep-rules.dockerfile.security.dockerfile-dockerd-socket-mount","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","CWE-862: Missing Authorization","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.dockerfile-dockerd-socket-mount"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."},"help":{"markdown":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3002](https://github.com/hadolint/hadolint/wiki/DL3002)\n","text":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."},"id":"opengrep-rules.dockerfile.security.last-user-is-root","name":"opengrep-rules.dockerfile.security.last-user-is-root","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.last-user-is-root"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"help":{"markdown":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"id":"opengrep-rules.dockerfile.security.missing-user","name":"opengrep-rules.dockerfile.security.missing-user","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.missing-user"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"help":{"markdown":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"id":"opengrep-rules.dockerfile.security.missing-user-entrypoint","name":"opengrep-rules.dockerfile.security.missing-user-entrypoint","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.missing-user-entrypoint"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."},"help":{"markdown":"Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/250.html](https://cwe.mitre.org/data/definitions/250.html)\n - [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user)\n","text":"Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."},"id":"opengrep-rules.dockerfile.security.no-sudo-in-dockerfile","name":"opengrep-rules.dockerfile.security.no-sudo-in-dockerfile","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.no-sudo-in-dockerfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Docker build time arguments are not suited for secrets, because the argument values are saved with the image. Running `docker image history` on the image will show information on how the image was built, including arguments. If these contain plain text secrets, anyone with access to the docker image can access those secrets and exploit them."},"help":{"markdown":"Docker build time arguments are not suited for secrets, because the argument values are saved with the image. Running `docker image history` on the image will show information on how the image was built, including arguments. If these contain plain text secrets, anyone with access to the docker image can access those secrets and exploit them.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/538.html](https://cwe.mitre.org/data/definitions/538.html)\n - [https://docs.docker.com/engine/reference/builder/#arg](https://docs.docker.com/engine/reference/builder/#arg)\n","text":"Docker build time arguments are not suited for secrets, because the argument values are saved with the image. Running `docker image history` on the image will show information on how the image was built, including arguments. If these contain plain text secrets, anyone with access to the docker image can access those secrets and exploit them."},"id":"opengrep-rules.dockerfile.security.secret-in-build-arg","name":"opengrep-rules.dockerfile.security.secret-in-build-arg","properties":{"precision":"very-high","tags":["CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.dockerfile.security.secret-in-build-arg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bnot($VAL)` instead."},"help":{"markdown":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bnot($VAL)` instead.\n\n<b>References:</b>\n - [https://github.com/elixir-lang/elixir/commit/f1b9d3e818e5bebd44540f87be85979f24b9abfc](https://github.com/elixir-lang/elixir/commit/f1b9d3e818e5bebd44540f87be85979f24b9abfc)\n","text":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bnot($VAL)` instead."},"id":"opengrep-rules.elixir.lang.best-practice.deprecated_bnot_operator","name":"opengrep-rules.elixir.lang.best-practice.deprecated_bnot_operator","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.deprecated_bnot_operator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bxor($LEFT, $RIGHT)` instead."},"help":{"markdown":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bxor($LEFT, $RIGHT)` instead.\n\n<b>References:</b>\n - [https://github.com/elixir-lang/elixir/commit/c9a171da5b25e0eb5d1da3b04c622f8b79a8aff4](https://github.com/elixir-lang/elixir/commit/c9a171da5b25e0eb5d1da3b04c622f8b79a8aff4)\n","text":"The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bxor($LEFT, $RIGHT)` instead."},"id":"opengrep-rules.elixir.lang.best-practice.deprecated_bxor_operator","name":"opengrep-rules.elixir.lang.best-practice.deprecated_bxor_operator","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.deprecated_bxor_operator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`Calendar.ISO.day_of_week/3` is already deprecated. Please use `Calendar.ISO.day_of_week/4` instead."},"help":{"markdown":"`Calendar.ISO.day_of_week/3` is already deprecated. Please use `Calendar.ISO.day_of_week/4` instead.\n\n<b>References:</b>\n - [https://github.com/elixir-lang/elixir/releases/tag/v1.15.0](https://github.com/elixir-lang/elixir/releases/tag/v1.15.0)\n","text":"`Calendar.ISO.day_of_week/3` is already deprecated. Please use `Calendar.ISO.day_of_week/4` instead."},"id":"opengrep-rules.elixir.lang.best-practice.deprecated_calendar_iso_day_of_week_3","name":"opengrep-rules.elixir.lang.best-practice.deprecated_calendar_iso_day_of_week_3","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.deprecated_calendar_iso_day_of_week_3"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The syntax `use Bitwise` is already deprecated. Please use `import Bitwise` instead."},"help":{"markdown":"The syntax `use Bitwise` is already deprecated. Please use `import Bitwise` instead.\n\n<b>References:</b>\n - [https://github.com/elixir-lang/elixir/commit/f1b9d3e818e5bebd44540f87be85979f24b9abfc](https://github.com/elixir-lang/elixir/commit/f1b9d3e818e5bebd44540f87be85979f24b9abfc)\n","text":"The syntax `use Bitwise` is already deprecated. Please use `import Bitwise` instead."},"id":"opengrep-rules.elixir.lang.best-practice.deprecated_use_bitwise","name":"opengrep-rules.elixir.lang.best-practice.deprecated_use_bitwise","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.deprecated_use_bitwise"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using `Enum.into/3` is more efficient than using `Enum.map/2 |> Enum.into/2`."},"help":{"markdown":"Using `Enum.into/3` is more efficient than using `Enum.map/2 |> Enum.into/2`.\n\n<b>References:</b>\n - [https://github.com/rrrene/credo/blob/master/lib/credo/check/refactor/map_into.ex](https://github.com/rrrene/credo/blob/master/lib/credo/check/refactor/map_into.ex)\n","text":"Using `Enum.into/3` is more efficient than using `Enum.map/2 |> Enum.into/2`."},"id":"opengrep-rules.elixir.lang.best-practice.enum_map_into","name":"opengrep-rules.elixir.lang.best-practice.enum_map_into","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.enum_map_into"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using `Enum.map_join/3` is more efficient than using `Enum.map/2 |> Enum.join/2`."},"help":{"markdown":"Using `Enum.map_join/3` is more efficient than using `Enum.map/2 |> Enum.join/2`.\n\n<b>References:</b>\n - [https://github.com/rrrene/credo/blob/master/lib/credo/check/refactor/map_join.ex](https://github.com/rrrene/credo/blob/master/lib/credo/check/refactor/map_join.ex)\n","text":"Using `Enum.map_join/3` is more efficient than using `Enum.map/2 |> Enum.join/2`."},"id":"opengrep-rules.elixir.lang.best-practice.enum_map_join","name":"opengrep-rules.elixir.lang.best-practice.enum_map_join","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.best-practice.enum_map_join"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Atom values are appended to a global table but never removed. If input is user-controlled, dynamic instantiations such as `String.to_atom` or `List.to_atom` can lead to possible memory leaks. Instead, use `String.to_existing_atom` or `List.to_existing_atom`."},"help":{"markdown":"Atom values are appended to a global table but never removed. If input is user-controlled, dynamic instantiations such as `String.to_atom` or `List.to_atom` can lead to possible memory leaks. Instead, use `String.to_existing_atom` or `List.to_existing_atom`.\n\n<b>References:</b>\n - [https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html](https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html)\n","text":"Atom values are appended to a global table but never removed. If input is user-controlled, dynamic instantiations such as `String.to_atom` or `List.to_atom` can lead to possible memory leaks. Instead, use `String.to_existing_atom` or `List.to_existing_atom`."},"id":"opengrep-rules.elixir.lang.correctness.atom_exhaustion","name":"opengrep-rules.elixir.lang.correctness.atom_exhaustion","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.elixir.lang.correctness.atom_exhaustion"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$X == $X is a useless equality check"},"help":{"markdown":"$X == $X is a useless equality check","text":"$X == $X is a useless equality check"},"id":"opengrep-rules.eqeq-is-bad","name":"opengrep-rules.eqeq-is-bad","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.eqeq-is-bad"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell."},"help":{"markdown":"Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/532.html](https://cwe.mitre.org/data/definitions/532.html)\n - [https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/scenarios-secrets](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/scenarios-secrets)\n","text":"Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell."},"id":"opengrep-rules.generic.bicep.security.secure-parameter-for-secrets","name":"opengrep-rules.generic.bicep.security.secure-parameter-for-secrets","properties":{"precision":"very-high","tags":["CWE-532: Insertion of Sensitive Information into Log File","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.bicep.security.secure-parameter-for-secrets"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes."},"help":{"markdown":"`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/ignoring-files-folders-code/](https://semgrep.dev/docs/ignoring-files-folders-code/)\n","text":"`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes."},"id":"opengrep-rules.generic.ci.audit.changed-semgrepignore","name":"opengrep-rules.generic.ci.audit.changed-semgrepignore","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.ci.audit.changed-semgrepignore"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Semgrep found a bash reverse shell"},"help":{"markdown":"Semgrep found a bash reverse shell\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Semgrep found a bash reverse shell"},"id":"opengrep-rules.generic.ci.security.bash_reverse_shell","name":"opengrep-rules.generic.ci.security.bash_reverse_shell","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.ci.security.bash_reverse_shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"help":{"markdown":"This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3032](https://github.com/hadolint/hadolint/wiki/DL3032)\n","text":"This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"},"id":"opengrep-rules.generic.dockerfile.best-practice.missing-yum-clean-all","name":"opengrep-rules.generic.dockerfile.best-practice.missing-yum-clean-all","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.best-practice.missing-yum-clean-all"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers."},"help":{"markdown":"Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3000](https://github.com/hadolint/hadolint/wiki/DL3000)\n","text":"Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers."},"id":"opengrep-rules.generic.dockerfile.best-practice.use-absolute-workdir","name":"opengrep-rules.generic.dockerfile.best-practice.use-absolute-workdir","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.best-practice.use-absolute-workdir"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'."},"help":{"markdown":"Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3024](https://github.com/hadolint/hadolint/wiki/DL3024)\n","text":"Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'."},"id":"opengrep-rules.generic.dockerfile.correctness.alias-must-be-unique","name":"opengrep-rules.generic.dockerfile.correctness.alias-must-be-unique","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.correctness.alias-must-be-unique"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement."},"help":{"markdown":"COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3023](https://github.com/hadolint/hadolint/wiki/DL3023)\n","text":"COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement."},"id":"opengrep-rules.generic.dockerfile.correctness.copy-from-own-alias","name":"opengrep-rules.generic.dockerfile.correctness.copy-from-own-alias","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.correctness.copy-from-own-alias"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Multiple CMD instructions were found. Only the last one will take effect."},"help":{"markdown":"Multiple CMD instructions were found. Only the last one will take effect.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4003](https://github.com/hadolint/hadolint/wiki/DL4003)\n - [https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/CMD/0](https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/CMD/0)\n","text":"Multiple CMD instructions were found. Only the last one will take effect."},"id":"opengrep-rules.generic.dockerfile.correctness.multiple-cmd-instructions","name":"opengrep-rules.generic.dockerfile.correctness.multiple-cmd-instructions","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.correctness.multiple-cmd-instructions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"help":{"markdown":"This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3034](https://github.com/hadolint/hadolint/wiki/DL3034)\n","text":"This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."},"id":"opengrep-rules.generic.dockerfile.missing-zypper-no-confirm-switch","name":"opengrep-rules.generic.dockerfile.missing-zypper-no-confirm-switch","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.dockerfile.missing-zypper-no-confirm-switch"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy."},"help":{"markdown":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy."},"id":"opengrep-rules.generic.gradle.security.build-gradle-password-hardcoded","name":"opengrep-rules.generic.gradle.security.build-gradle-password-hardcoded","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.gradle.security.build-gradle-password-hardcoded"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."},"help":{"markdown":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."},"id":"opengrep-rules.generic.html-templates.security.unquoted-attribute-var","name":"opengrep-rules.generic.html-templates.security.unquoted-attribute-var","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.html-templates.security.unquoted-attribute-var"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.generic.html-templates.security.var-in-href","name":"opengrep-rules.generic.html-templates.security.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.html-templates.security.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"help":{"markdown":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.\n\n<b>References:</b>\n - [https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A](https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A)\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"id":"opengrep-rules.generic.html-templates.security.var-in-script-src","name":"opengrep-rules.generic.html-templates.security.var-in-script-src","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.html-templates.security.var-in-script-src"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\n\n<b>References:</b>\n - [https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A](https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A)\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."},"id":"opengrep-rules.generic.html-templates.security.var-in-script-tag","name":"opengrep-rules.generic.html-templates.security.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.html-templates.security.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://)."},"help":{"markdown":"The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://).\n\n<b>References:</b>\n - [https://gohugo.io/](https://gohugo.io/)\n","text":"The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://)."},"id":"opengrep-rules.generic.hugo.best-practice.invalid-base-url","name":"opengrep-rules.generic.hugo.best-practice.invalid-base-url","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.hugo.best-practice.invalid-base-url"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The 'baseURL' is set to localhost. This may cause links to not work if deployed."},"help":{"markdown":"The 'baseURL' is set to localhost. This may cause links to not work if deployed.\n\n<b>References:</b>\n - [https://gohugo.io/](https://gohugo.io/)\n","text":"The 'baseURL' is set to localhost. This may cause links to not work if deployed."},"id":"opengrep-rules.generic.hugo.best-practice.localhost-base-url","name":"opengrep-rules.generic.hugo.best-practice.localhost-base-url","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.hugo.best-practice.localhost-base-url"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path."},"help":{"markdown":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/](https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/)\n - [https://www.youtube.com/watch?v=CIhHpkybYsY](https://www.youtube.com/watch?v=CIhHpkybYsY)\n - [https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf](https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf)\n","text":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path."},"id":"opengrep-rules.generic.nginx.security.alias-path-traversal","name":"opengrep-rules.generic.nginx.security.alias-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.alias-path-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar."},"help":{"markdown":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\n\n<b>References:</b>\n - [https://nginx.org/en/docs/http/ngx_http_map_module.html](https://nginx.org/en/docs/http/ngx_http_map_module.html)\n","text":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar."},"id":"opengrep-rules.generic.nginx.security.dynamic-proxy-host","name":"opengrep-rules.generic.nginx.security.dynamic-proxy-host","properties":{"precision":"very-high","tags":["CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.dynamic-proxy-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy."},"help":{"markdown":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\n","text":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy."},"id":"opengrep-rules.generic.nginx.security.dynamic-proxy-scheme","name":"opengrep-rules.generic.nginx.security.dynamic-proxy-scheme","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.dynamic-proxy-scheme"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'."},"help":{"markdown":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md)\n - [https://owasp.org/www-community/attacks/HTTP_Response_Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)\n","text":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'."},"id":"opengrep-rules.generic.nginx.security.header-injection","name":"opengrep-rules.generic.nginx.security.header-injection","properties":{"precision":"very-high","tags":["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.header-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block."},"help":{"markdown":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md)\n","text":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block."},"id":"opengrep-rules.generic.nginx.security.header-redefinition","name":"opengrep-rules.generic.nginx.security.header-redefinition","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.header-redefinition"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme."},"help":{"markdown":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme."},"id":"opengrep-rules.generic.nginx.security.insecure-redirect","name":"opengrep-rules.generic.nginx.security.insecure-redirect","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.insecure-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later."},"help":{"markdown":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\n\n<b>References:</b>\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/](https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/)\n","text":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later."},"id":"opengrep-rules.generic.nginx.security.insecure-ssl-version","name":"opengrep-rules.generic.nginx.security.insecure-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.insecure-ssl-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."},"help":{"markdown":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\n - [https://nginx.org/en/docs/http/ngx_http_core_module.html#internal](https://nginx.org/en/docs/http/ngx_http_core_module.html#internal)\n","text":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."},"id":"opengrep-rules.generic.nginx.security.missing-internal","name":"opengrep-rules.generic.nginx.security.missing-internal","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.missing-internal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."},"help":{"markdown":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\n\n<b>References:</b>\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)\n","text":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."},"id":"opengrep-rules.generic.nginx.security.missing-ssl-version","name":"opengrep-rules.generic.nginx.security.missing-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.missing-ssl-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers."},"help":{"markdown":"Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.\n\n<b>References:</b>\n - [https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c](https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c)\n","text":"Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers."},"id":"opengrep-rules.generic.nginx.security.possible-nginx-h2c-smuggling","name":"opengrep-rules.generic.nginx.security.possible-nginx-h2c-smuggling","properties":{"precision":"very-high","tags":["CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.possible-nginx-h2c-smuggling"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allow list for validation."},"help":{"markdown":"'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allow list for validation.\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/hostspoofing.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/hostspoofing.md)\n - [https://portswigger.net/web-security/host-header](https://portswigger.net/web-security/host-header)\n","text":"'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allow list for validation."},"id":"opengrep-rules.generic.nginx.security.request-host-used","name":"opengrep-rules.generic.nginx.security.request-host-used","properties":{"precision":"very-high","tags":["CWE-290: Authentication Bypass by Spoofing","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.nginx.security.request-host-used"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks adafruit-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks adafruit-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks adafruit-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.adafruit-api-key","name":"opengrep-rules.generic.secrets.gitleaks.adafruit-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.adafruit-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks adobe-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks adobe-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks adobe-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.adobe-client-id","name":"opengrep-rules.generic.secrets.gitleaks.adobe-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.adobe-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks adobe-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks adobe-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks adobe-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.adobe-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.adobe-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.adobe-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks age-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks age-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks age-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.age-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.age-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.age-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks airtable-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks airtable-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks airtable-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.airtable-api-key","name":"opengrep-rules.generic.secrets.gitleaks.airtable-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.airtable-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks algolia-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks algolia-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks algolia-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.algolia-api-key","name":"opengrep-rules.generic.secrets.gitleaks.algolia-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.algolia-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.alibaba-access-key-id","name":"opengrep-rules.generic.secrets.gitleaks.alibaba-access-key-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.alibaba-access-key-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.alibaba-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.alibaba-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.alibaba-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks asana-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks asana-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks asana-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.asana-client-id","name":"opengrep-rules.generic.secrets.gitleaks.asana-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.asana-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks asana-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks asana-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks asana-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.asana-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.asana-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.asana-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks atlassian-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks atlassian-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks atlassian-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.atlassian-api-token","name":"opengrep-rules.generic.secrets.gitleaks.atlassian-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.atlassian-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks authress-service-client-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks authress-service-client-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks authress-service-client-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.authress-service-client-access-key","name":"opengrep-rules.generic.secrets.gitleaks.authress-service-client-access-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.authress-service-client-access-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.aws-access-token","name":"opengrep-rules.generic.secrets.gitleaks.aws-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.aws-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks beamer-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks beamer-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks beamer-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.beamer-api-token","name":"opengrep-rules.generic.secrets.gitleaks.beamer-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.beamer-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.bitbucket-client-id","name":"opengrep-rules.generic.secrets.gitleaks.bitbucket-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.bitbucket-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.bitbucket-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.bitbucket-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.bitbucket-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks bittrex-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks bittrex-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks bittrex-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.bittrex-access-key","name":"opengrep-rules.generic.secrets.gitleaks.bittrex-access-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.bittrex-access-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.bittrex-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.bittrex-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.bittrex-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks clojars-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks clojars-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks clojars-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.clojars-api-token","name":"opengrep-rules.generic.secrets.gitleaks.clojars-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.clojars-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks cloudflare-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks cloudflare-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks cloudflare-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.cloudflare-api-key","name":"opengrep-rules.generic.secrets.gitleaks.cloudflare-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.cloudflare-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks cloudflare-global-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks cloudflare-global-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks cloudflare-global-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.cloudflare-global-api-key","name":"opengrep-rules.generic.secrets.gitleaks.cloudflare-global-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.cloudflare-global-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks cloudflare-origin-ca-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks cloudflare-origin-ca-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks cloudflare-origin-ca-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.cloudflare-origin-ca-key","name":"opengrep-rules.generic.secrets.gitleaks.cloudflare-origin-ca-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.cloudflare-origin-ca-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks codecov-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks codecov-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks codecov-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.codecov-access-token","name":"opengrep-rules.generic.secrets.gitleaks.codecov-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.codecov-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks coinbase-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks coinbase-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks coinbase-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.coinbase-access-token","name":"opengrep-rules.generic.secrets.gitleaks.coinbase-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.coinbase-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks confluent-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks confluent-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks confluent-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.confluent-access-token","name":"opengrep-rules.generic.secrets.gitleaks.confluent-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.confluent-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks confluent-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks confluent-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks confluent-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.confluent-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.confluent-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.confluent-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks contentful-delivery-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks contentful-delivery-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks contentful-delivery-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.contentful-delivery-api-token","name":"opengrep-rules.generic.secrets.gitleaks.contentful-delivery-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.contentful-delivery-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks databricks-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks databricks-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks databricks-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.databricks-api-token","name":"opengrep-rules.generic.secrets.gitleaks.databricks-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.databricks-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks datadog-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks datadog-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks datadog-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.datadog-access-token","name":"opengrep-rules.generic.secrets.gitleaks.datadog-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.datadog-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks defined-networking-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks defined-networking-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks defined-networking-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.defined-networking-api-token","name":"opengrep-rules.generic.secrets.gitleaks.defined-networking-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.defined-networking-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks digitalocean-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks digitalocean-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks digitalocean-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.digitalocean-access-token","name":"opengrep-rules.generic.secrets.gitleaks.digitalocean-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.digitalocean-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks digitalocean-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks digitalocean-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks digitalocean-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.digitalocean-pat","name":"opengrep-rules.generic.secrets.gitleaks.digitalocean-pat","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.digitalocean-pat"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks digitalocean-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks digitalocean-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks digitalocean-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.digitalocean-refresh-token","name":"opengrep-rules.generic.secrets.gitleaks.digitalocean-refresh-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.digitalocean-refresh-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks discord-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks discord-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks discord-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.discord-api-token","name":"opengrep-rules.generic.secrets.gitleaks.discord-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.discord-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks discord-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks discord-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks discord-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.discord-client-id","name":"opengrep-rules.generic.secrets.gitleaks.discord-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.discord-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks discord-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks discord-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks discord-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.discord-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.discord-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.discord-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks doppler-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks doppler-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks doppler-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.doppler-api-token","name":"opengrep-rules.generic.secrets.gitleaks.doppler-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.doppler-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks droneci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks droneci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks droneci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.droneci-access-token","name":"opengrep-rules.generic.secrets.gitleaks.droneci-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.droneci-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks dropbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks dropbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks dropbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.dropbox-api-token","name":"opengrep-rules.generic.secrets.gitleaks.dropbox-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.dropbox-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks dropbox-long-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks dropbox-long-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks dropbox-long-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.dropbox-long-lived-api-token","name":"opengrep-rules.generic.secrets.gitleaks.dropbox-long-lived-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.dropbox-long-lived-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks dropbox-short-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks dropbox-short-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks dropbox-short-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.dropbox-short-lived-api-token","name":"opengrep-rules.generic.secrets.gitleaks.dropbox-short-lived-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.dropbox-short-lived-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks duffel-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks duffel-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks duffel-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.duffel-api-token","name":"opengrep-rules.generic.secrets.gitleaks.duffel-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.duffel-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.dynatrace-api-token","name":"opengrep-rules.generic.secrets.gitleaks.dynatrace-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.dynatrace-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks easypost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks easypost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks easypost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.easypost-api-token","name":"opengrep-rules.generic.secrets.gitleaks.easypost-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.easypost-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.easypost-test-api-token","name":"opengrep-rules.generic.secrets.gitleaks.easypost-test-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.easypost-test-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks etsy-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks etsy-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks etsy-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.etsy-access-token","name":"opengrep-rules.generic.secrets.gitleaks.etsy-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.etsy-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks facebook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks facebook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks facebook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.facebook","name":"opengrep-rules.generic.secrets.gitleaks.facebook","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.facebook"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks facebook-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks facebook-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks facebook-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.facebook-access-token","name":"opengrep-rules.generic.secrets.gitleaks.facebook-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.facebook-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks facebook-page-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks facebook-page-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks facebook-page-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.facebook-page-access-token","name":"opengrep-rules.generic.secrets.gitleaks.facebook-page-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.facebook-page-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks facebook-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks facebook-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks facebook-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.facebook-secret","name":"opengrep-rules.generic.secrets.gitleaks.facebook-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.facebook-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks fastly-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks fastly-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks fastly-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.fastly-api-token","name":"opengrep-rules.generic.secrets.gitleaks.fastly-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.fastly-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks finicity-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks finicity-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks finicity-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.finicity-api-token","name":"opengrep-rules.generic.secrets.gitleaks.finicity-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.finicity-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks finicity-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks finicity-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks finicity-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.finicity-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.finicity-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.finicity-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks finnhub-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks finnhub-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks finnhub-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.finnhub-access-token","name":"opengrep-rules.generic.secrets.gitleaks.finnhub-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.finnhub-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks flickr-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks flickr-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks flickr-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.flickr-access-token","name":"opengrep-rules.generic.secrets.gitleaks.flickr-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.flickr-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks flutterwave-encryption-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks flutterwave-encryption-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks flutterwave-encryption-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.flutterwave-encryption-key","name":"opengrep-rules.generic.secrets.gitleaks.flutterwave-encryption-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.flutterwave-encryption-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.flutterwave-public-key","name":"opengrep-rules.generic.secrets.gitleaks.flutterwave-public-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.flutterwave-public-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.flutterwave-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.flutterwave-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.flutterwave-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks frameio-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks frameio-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks frameio-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.frameio-api-token","name":"opengrep-rules.generic.secrets.gitleaks.frameio-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.frameio-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.freshbooks-access-token","name":"opengrep-rules.generic.secrets.gitleaks.freshbooks-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.freshbooks-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gcp-api-key","name":"opengrep-rules.generic.secrets.gitleaks.gcp-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gcp-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials.  It is not recommended to store credentials in source-code, as this risks secrets being leaked  and used by either an internal or external malicious adversary. It is recommended to use  environment variables to securely provide credentials or retrieve credentials from a  secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives,  it is not recommended to be used in PR comments."},"help":{"markdown":"A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials.  It is not recommended to store credentials in source-code, as this risks secrets being leaked  and used by either an internal or external malicious adversary. It is recommended to use  environment variables to securely provide credentials or retrieve credentials from a  secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives,  it is not recommended to be used in PR comments.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials.  It is not recommended to store credentials in source-code, as this risks secrets being leaked  and used by either an internal or external malicious adversary. It is recommended to use  environment variables to securely provide credentials or retrieve credentials from a  secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives,  it is not recommended to be used in PR comments."},"id":"opengrep-rules.generic.secrets.gitleaks.generic-api-key","name":"opengrep-rules.generic.secrets.gitleaks.generic-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.generic-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks github-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks github-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks github-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.github-app-token","name":"opengrep-rules.generic.secrets.gitleaks.github-app-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.github-app-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.github-fine-grained-pat","name":"opengrep-rules.generic.secrets.gitleaks.github-fine-grained-pat","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.github-fine-grained-pat"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks github-oauth was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks github-oauth was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks github-oauth was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.github-oauth","name":"opengrep-rules.generic.secrets.gitleaks.github-oauth","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.github-oauth"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks github-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks github-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks github-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.github-pat","name":"opengrep-rules.generic.secrets.gitleaks.github-pat","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.github-pat"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks github-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks github-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks github-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.github-refresh-token","name":"opengrep-rules.generic.secrets.gitleaks.github-refresh-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.github-refresh-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gitlab-pat","name":"opengrep-rules.generic.secrets.gitleaks.gitlab-pat","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gitlab-pat"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gitlab-ptt","name":"opengrep-rules.generic.secrets.gitleaks.gitlab-ptt","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gitlab-ptt"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gitlab-rrt","name":"opengrep-rules.generic.secrets.gitleaks.gitlab-rrt","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gitlab-rrt"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gitter-access-token","name":"opengrep-rules.generic.secrets.gitleaks.gitter-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gitter-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks gocardless-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks gocardless-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks gocardless-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.gocardless-api-token","name":"opengrep-rules.generic.secrets.gitleaks.gocardless-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.gocardless-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks grafana-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks grafana-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks grafana-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.grafana-api-key","name":"opengrep-rules.generic.secrets.gitleaks.grafana-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.grafana-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.grafana-cloud-api-token","name":"opengrep-rules.generic.secrets.gitleaks.grafana-cloud-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.grafana-cloud-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks grafana-service-account-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks grafana-service-account-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks grafana-service-account-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.grafana-service-account-token","name":"opengrep-rules.generic.secrets.gitleaks.grafana-service-account-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.grafana-service-account-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks harness-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks harness-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks harness-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.harness-api-key","name":"opengrep-rules.generic.secrets.gitleaks.harness-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.harness-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-api-token","name":"opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-password","name":"opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.hashicorp-tf-password"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks heroku-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks heroku-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks heroku-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.heroku-api-key","name":"opengrep-rules.generic.secrets.gitleaks.heroku-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.heroku-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks hubspot-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks hubspot-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks hubspot-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.hubspot-api-key","name":"opengrep-rules.generic.secrets.gitleaks.hubspot-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.hubspot-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks huggingface-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks huggingface-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks huggingface-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.huggingface-access-token","name":"opengrep-rules.generic.secrets.gitleaks.huggingface-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.huggingface-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks huggingface-organization-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks huggingface-organization-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks huggingface-organization-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.huggingface-organization-api-token","name":"opengrep-rules.generic.secrets.gitleaks.huggingface-organization-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.huggingface-organization-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks infracost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks infracost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks infracost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.infracost-api-token","name":"opengrep-rules.generic.secrets.gitleaks.infracost-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.infracost-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks intercom-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks intercom-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks intercom-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.intercom-api-key","name":"opengrep-rules.generic.secrets.gitleaks.intercom-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.intercom-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks intra42-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks intra42-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks intra42-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.intra42-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.intra42-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.intra42-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks jfrog-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks jfrog-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks jfrog-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.jfrog-api-key","name":"opengrep-rules.generic.secrets.gitleaks.jfrog-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.jfrog-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.jfrog-identity-token","name":"opengrep-rules.generic.secrets.gitleaks.jfrog-identity-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.jfrog-identity-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks jwt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks jwt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks jwt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.jwt","name":"opengrep-rules.generic.secrets.gitleaks.jwt","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.jwt"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.jwt-base64","name":"opengrep-rules.generic.secrets.gitleaks.jwt-base64","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.jwt-base64"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks kraken-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks kraken-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks kraken-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.kraken-access-token","name":"opengrep-rules.generic.secrets.gitleaks.kraken-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.kraken-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks kucoin-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks kucoin-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks kucoin-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.kucoin-access-token","name":"opengrep-rules.generic.secrets.gitleaks.kucoin-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.kucoin-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.kucoin-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.kucoin-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.kucoin-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks launchdarkly-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks launchdarkly-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks launchdarkly-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.launchdarkly-access-token","name":"opengrep-rules.generic.secrets.gitleaks.launchdarkly-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.launchdarkly-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks linear-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks linear-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks linear-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.linear-api-key","name":"opengrep-rules.generic.secrets.gitleaks.linear-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.linear-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks linear-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks linear-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks linear-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.linear-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.linear-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.linear-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks linkedin-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks linkedin-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks linkedin-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.linkedin-client-id","name":"opengrep-rules.generic.secrets.gitleaks.linkedin-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.linkedin-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.linkedin-client-secret","name":"opengrep-rules.generic.secrets.gitleaks.linkedin-client-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.linkedin-client-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.lob-api-key","name":"opengrep-rules.generic.secrets.gitleaks.lob-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.lob-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.lob-pub-api-key","name":"opengrep-rules.generic.secrets.gitleaks.lob-pub-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.lob-pub-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mailchimp-api-key","name":"opengrep-rules.generic.secrets.gitleaks.mailchimp-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mailchimp-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mailgun-private-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mailgun-private-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mailgun-private-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mailgun-private-api-token","name":"opengrep-rules.generic.secrets.gitleaks.mailgun-private-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mailgun-private-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mailgun-pub-key","name":"opengrep-rules.generic.secrets.gitleaks.mailgun-pub-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mailgun-pub-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mailgun-signing-key","name":"opengrep-rules.generic.secrets.gitleaks.mailgun-signing-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mailgun-signing-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mapbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mapbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mapbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mapbox-api-token","name":"opengrep-rules.generic.secrets.gitleaks.mapbox-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mapbox-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks mattermost-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks mattermost-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks mattermost-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.mattermost-access-token","name":"opengrep-rules.generic.secrets.gitleaks.mattermost-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.mattermost-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks messagebird-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks messagebird-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks messagebird-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.messagebird-api-token","name":"opengrep-rules.generic.secrets.gitleaks.messagebird-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.messagebird-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks messagebird-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks messagebird-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks messagebird-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.messagebird-client-id","name":"opengrep-rules.generic.secrets.gitleaks.messagebird-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.messagebird-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.microsoft-teams-webhook","name":"opengrep-rules.generic.secrets.gitleaks.microsoft-teams-webhook","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.microsoft-teams-webhook"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks netlify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks netlify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks netlify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.netlify-access-token","name":"opengrep-rules.generic.secrets.gitleaks.netlify-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.netlify-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks new-relic-browser-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks new-relic-browser-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks new-relic-browser-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.new-relic-browser-api-token","name":"opengrep-rules.generic.secrets.gitleaks.new-relic-browser-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.new-relic-browser-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks new-relic-insert-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks new-relic-insert-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks new-relic-insert-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.new-relic-insert-key","name":"opengrep-rules.generic.secrets.gitleaks.new-relic-insert-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.new-relic-insert-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-id","name":"opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-key","name":"opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.new-relic-user-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks npm-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks npm-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks npm-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.npm-access-token","name":"opengrep-rules.generic.secrets.gitleaks.npm-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.npm-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks nytimes-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks nytimes-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks nytimes-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.nytimes-access-token","name":"opengrep-rules.generic.secrets.gitleaks.nytimes-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.nytimes-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks okta-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks okta-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks okta-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.okta-access-token","name":"opengrep-rules.generic.secrets.gitleaks.okta-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.okta-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.openai-api-key","name":"opengrep-rules.generic.secrets.gitleaks.openai-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.openai-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks plaid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks plaid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks plaid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.plaid-api-token","name":"opengrep-rules.generic.secrets.gitleaks.plaid-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.plaid-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks plaid-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks plaid-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks plaid-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.plaid-client-id","name":"opengrep-rules.generic.secrets.gitleaks.plaid-client-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.plaid-client-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks plaid-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks plaid-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks plaid-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.plaid-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.plaid-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.plaid-secret-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks planetscale-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks planetscale-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks planetscale-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.planetscale-api-token","name":"opengrep-rules.generic.secrets.gitleaks.planetscale-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.planetscale-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.planetscale-oauth-token","name":"opengrep-rules.generic.secrets.gitleaks.planetscale-oauth-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.planetscale-oauth-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks planetscale-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks planetscale-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks planetscale-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.planetscale-password","name":"opengrep-rules.generic.secrets.gitleaks.planetscale-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.planetscale-password"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks postman-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks postman-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks postman-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.postman-api-token","name":"opengrep-rules.generic.secrets.gitleaks.postman-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.postman-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks prefect-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks prefect-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks prefect-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.prefect-api-token","name":"opengrep-rules.generic.secrets.gitleaks.prefect-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.prefect-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks private-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks private-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks private-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.private-key","name":"opengrep-rules.generic.secrets.gitleaks.private-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.private-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks pulumi-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks pulumi-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks pulumi-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.pulumi-api-token","name":"opengrep-rules.generic.secrets.gitleaks.pulumi-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.pulumi-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks pypi-upload-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks pypi-upload-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks pypi-upload-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.pypi-upload-token","name":"opengrep-rules.generic.secrets.gitleaks.pypi-upload-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.pypi-upload-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.rapidapi-access-token","name":"opengrep-rules.generic.secrets.gitleaks.rapidapi-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.rapidapi-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks readme-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks readme-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks readme-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.readme-api-token","name":"opengrep-rules.generic.secrets.gitleaks.readme-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.readme-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks rubygems-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks rubygems-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks rubygems-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.rubygems-api-token","name":"opengrep-rules.generic.secrets.gitleaks.rubygems-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.rubygems-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks scalingo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks scalingo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks scalingo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.scalingo-api-token","name":"opengrep-rules.generic.secrets.gitleaks.scalingo-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.scalingo-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sendbird-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sendbird-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sendbird-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sendbird-access-id","name":"opengrep-rules.generic.secrets.gitleaks.sendbird-access-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sendbird-access-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sendbird-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sendbird-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sendbird-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sendbird-access-token","name":"opengrep-rules.generic.secrets.gitleaks.sendbird-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sendbird-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sendgrid-api-token","name":"opengrep-rules.generic.secrets.gitleaks.sendgrid-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sendgrid-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sendinblue-api-token","name":"opengrep-rules.generic.secrets.gitleaks.sendinblue-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sendinblue-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sentry-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sentry-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sentry-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sentry-access-token","name":"opengrep-rules.generic.secrets.gitleaks.sentry-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sentry-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks shippo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks shippo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks shippo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.shippo-api-token","name":"opengrep-rules.generic.secrets.gitleaks.shippo-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.shippo-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks shopify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks shopify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks shopify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.shopify-access-token","name":"opengrep-rules.generic.secrets.gitleaks.shopify-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.shopify-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks shopify-custom-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks shopify-custom-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks shopify-custom-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.shopify-custom-access-token","name":"opengrep-rules.generic.secrets.gitleaks.shopify-custom-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.shopify-custom-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks shopify-private-app-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks shopify-private-app-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks shopify-private-app-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.shopify-private-app-access-token","name":"opengrep-rules.generic.secrets.gitleaks.shopify-private-app-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.shopify-private-app-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.shopify-shared-secret","name":"opengrep-rules.generic.secrets.gitleaks.shopify-shared-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.shopify-shared-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sidekiq-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sidekiq-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sidekiq-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sidekiq-secret","name":"opengrep-rules.generic.secrets.gitleaks.sidekiq-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sidekiq-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sidekiq-sensitive-url","name":"opengrep-rules.generic.secrets.gitleaks.sidekiq-sensitive-url","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sidekiq-sensitive-url"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-app-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-app-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-app-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-bot-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-bot-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-bot-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-config-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-config-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-config-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-config-access-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-config-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-config-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-config-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-config-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-config-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-config-refresh-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-config-refresh-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-config-refresh-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-bot-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-bot-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-legacy-bot-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-legacy-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-legacy-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-legacy-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-legacy-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-legacy-workspace-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-legacy-workspace-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-legacy-workspace-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-workspace-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-legacy-workspace-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-legacy-workspace-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-user-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-user-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-user-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-user-token","name":"opengrep-rules.generic.secrets.gitleaks.slack-user-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-user-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks slack-webhook-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks slack-webhook-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks slack-webhook-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.slack-webhook-url","name":"opengrep-rules.generic.secrets.gitleaks.slack-webhook-url","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.slack-webhook-url"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks snyk-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks snyk-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks snyk-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.snyk-api-token","name":"opengrep-rules.generic.secrets.gitleaks.snyk-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.snyk-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks square-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks square-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks square-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.square-access-token","name":"opengrep-rules.generic.secrets.gitleaks.square-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.square-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks squarespace-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks squarespace-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks squarespace-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.squarespace-access-token","name":"opengrep-rules.generic.secrets.gitleaks.squarespace-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.squarespace-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks stripe-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks stripe-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks stripe-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.stripe-access-token","name":"opengrep-rules.generic.secrets.gitleaks.stripe-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.stripe-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sumologic-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sumologic-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sumologic-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sumologic-access-id","name":"opengrep-rules.generic.secrets.gitleaks.sumologic-access-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sumologic-access-id"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks sumologic-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks sumologic-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks sumologic-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.sumologic-access-token","name":"opengrep-rules.generic.secrets.gitleaks.sumologic-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.sumologic-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.telegram-bot-api-token","name":"opengrep-rules.generic.secrets.gitleaks.telegram-bot-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.telegram-bot-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks travisci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks travisci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks travisci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.travisci-access-token","name":"opengrep-rules.generic.secrets.gitleaks.travisci-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.travisci-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twilio-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twilio-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twilio-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twilio-api-key","name":"opengrep-rules.generic.secrets.gitleaks.twilio-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twilio-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitch-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitch-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitch-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitch-api-token","name":"opengrep-rules.generic.secrets.gitleaks.twitch-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitch-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitter-access-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitter-access-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitter-access-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitter-access-secret","name":"opengrep-rules.generic.secrets.gitleaks.twitter-access-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitter-access-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitter-access-token","name":"opengrep-rules.generic.secrets.gitleaks.twitter-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitter-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitter-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitter-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitter-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitter-api-key","name":"opengrep-rules.generic.secrets.gitleaks.twitter-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitter-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitter-api-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitter-api-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitter-api-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitter-api-secret","name":"opengrep-rules.generic.secrets.gitleaks.twitter-api-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitter-api-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.twitter-bearer-token","name":"opengrep-rules.generic.secrets.gitleaks.twitter-bearer-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.twitter-bearer-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks typeform-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks typeform-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks typeform-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.typeform-api-token","name":"opengrep-rules.generic.secrets.gitleaks.typeform-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.typeform-api-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks vault-batch-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks vault-batch-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks vault-batch-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.vault-batch-token","name":"opengrep-rules.generic.secrets.gitleaks.vault-batch-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.vault-batch-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks vault-service-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks vault-service-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks vault-service-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.vault-service-token","name":"opengrep-rules.generic.secrets.gitleaks.vault-service-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.vault-service-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks yandex-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks yandex-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks yandex-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.yandex-access-token","name":"opengrep-rules.generic.secrets.gitleaks.yandex-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.yandex-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks yandex-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks yandex-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks yandex-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.yandex-api-key","name":"opengrep-rules.generic.secrets.gitleaks.yandex-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.yandex-api-key"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.yandex-aws-access-token","name":"opengrep-rules.generic.secrets.gitleaks.yandex-aws-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.yandex-aws-access-token"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.generic.secrets.gitleaks.zendesk-secret-key","name":"opengrep-rules.generic.secrets.gitleaks.zendesk-secret-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.gitleaks.zendesk-secret-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Amazon MWS Auth Token detected"},"help":{"markdown":"Amazon MWS Auth Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Amazon MWS Auth Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-amazon-mws-auth-token","name":"opengrep-rules.generic.secrets.security.detected-amazon-mws-auth-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-amazon-mws-auth-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Artifactory token detected"},"help":{"markdown":"Artifactory token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Artifactory token detected"},"id":"opengrep-rules.generic.secrets.security.detected-artifactory-password","name":"opengrep-rules.generic.secrets.security.detected-artifactory-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-artifactory-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Artifactory token detected"},"help":{"markdown":"Artifactory token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Artifactory token detected"},"id":"opengrep-rules.generic.secrets.security.detected-artifactory-token","name":"opengrep-rules.generic.secrets.security.detected-artifactory-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-artifactory-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file."},"help":{"markdown":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file."},"id":"opengrep-rules.generic.secrets.security.detected-aws-access-key-id-value","name":"opengrep-rules.generic.secrets.security.detected-aws-access-key-id-value","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-aws-access-key-id-value"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Account ID detected. While not considered sensitive information, it is important to use them and share them carefully. For that reason it would be preferrable avoiding to hardcoded it here. Instead, read the value from an environment variable or keep the value in a separate, private file."},"help":{"markdown":"AWS Account ID detected. While not considered sensitive information, it is important to use them and share them carefully. For that reason it would be preferrable avoiding to hardcoded it here. Instead, read the value from an environment variable or keep the value in a separate, private file.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Account ID detected. While not considered sensitive information, it is important to use them and share them carefully. For that reason it would be preferrable avoiding to hardcoded it here. Instead, read the value from an environment variable or keep the value in a separate, private file."},"id":"opengrep-rules.generic.secrets.security.detected-aws-account-id","name":"opengrep-rules.generic.secrets.security.detected-aws-account-id","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-aws-account-id"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS AppSync GraphQL Key detected"},"help":{"markdown":"AWS AppSync GraphQL Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS AppSync GraphQL Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-aws-appsync-graphql-key","name":"opengrep-rules.generic.secrets.security.detected-aws-appsync-graphql-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-aws-appsync-graphql-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Secret Access Key detected"},"help":{"markdown":"AWS Secret Access Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Secret Access Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-aws-secret-access-key","name":"opengrep-rules.generic.secrets.security.detected-aws-secret-access-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-aws-secret-access-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Session Token detected"},"help":{"markdown":"AWS Session Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Session Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-aws-session-token","name":"opengrep-rules.generic.secrets.security.detected-aws-session-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-aws-session-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"bcrypt hash detected"},"help":{"markdown":"bcrypt hash detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"bcrypt hash detected"},"id":"opengrep-rules.generic.secrets.security.detected-bcrypt-hash","name":"opengrep-rules.generic.secrets.security.detected-bcrypt-hash","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-bcrypt-hash"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"CodeClimate detected"},"help":{"markdown":"CodeClimate detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"CodeClimate detected"},"id":"opengrep-rules.generic.secrets.security.detected-codeclimate","name":"opengrep-rules.generic.secrets.security.detected-codeclimate","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-codeclimate"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"linux shadow file detected"},"help":{"markdown":"linux shadow file detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"linux shadow file detected"},"id":"opengrep-rules.generic.secrets.security.detected-etc-shadow","name":"opengrep-rules.generic.secrets.security.detected-etc-shadow","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-etc-shadow"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Facebook Access Token detected"},"help":{"markdown":"Facebook Access Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Facebook Access Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-facebook-access-token","name":"opengrep-rules.generic.secrets.security.detected-facebook-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-facebook-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Facebook OAuth detected"},"help":{"markdown":"Facebook OAuth detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Facebook OAuth detected"},"id":"opengrep-rules.generic.secrets.security.detected-facebook-oauth","name":"opengrep-rules.generic.secrets.security.detected-facebook-oauth","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-facebook-oauth"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Generic API Key detected"},"help":{"markdown":"Generic API Key detected\n\n<b>References:</b>\n - [https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json](https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json)\n","text":"Generic API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-generic-api-key","name":"opengrep-rules.generic.secrets.security.detected-generic-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-generic-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Generic Secret detected"},"help":{"markdown":"Generic Secret detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Generic Secret detected"},"id":"opengrep-rules.generic.secrets.security.detected-generic-secret","name":"opengrep-rules.generic.secrets.security.detected-generic-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-generic-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"GitHub Token detected"},"help":{"markdown":"GitHub Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"GitHub Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-github-token","name":"opengrep-rules.generic.secrets.security.detected-github-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-github-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google API Key Detected"},"help":{"markdown":"Google API Key Detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google API Key Detected"},"id":"opengrep-rules.generic.secrets.security.detected-google-api-key","name":"opengrep-rules.generic.secrets.security.detected-google-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-google-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google Cloud API Key detected"},"help":{"markdown":"Google Cloud API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google Cloud API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-google-cloud-api-key","name":"opengrep-rules.generic.secrets.security.detected-google-cloud-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-google-cloud-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google (GCM) Service account detected"},"help":{"markdown":"Google (GCM) Service account detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google (GCM) Service account detected"},"id":"opengrep-rules.generic.secrets.security.detected-google-gcm-service-account","name":"opengrep-rules.generic.secrets.security.detected-google-gcm-service-account","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-google-gcm-service-account"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google OAuth Access Token detected"},"help":{"markdown":"Google OAuth Access Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google OAuth Access Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-google-oauth-access-token","name":"opengrep-rules.generic.secrets.security.detected-google-oauth-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-google-oauth-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google OAuth url detected"},"help":{"markdown":"Google OAuth url detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google OAuth url detected"},"id":"opengrep-rules.generic.secrets.security.detected-google-oauth-url","name":"opengrep-rules.generic.secrets.security.detected-google-oauth-url","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-google-oauth-url"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Heroku API Key detected"},"help":{"markdown":"Heroku API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Heroku API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-heroku-api-key","name":"opengrep-rules.generic.secrets.security.detected-heroku-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-heroku-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"HockeyApp detected"},"help":{"markdown":"HockeyApp detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"HockeyApp detected"},"id":"opengrep-rules.generic.secrets.security.detected-hockeyapp","name":"opengrep-rules.generic.secrets.security.detected-hockeyapp","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-hockeyapp"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"JWT token detected"},"help":{"markdown":"JWT token detected\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n","text":"JWT token detected"},"id":"opengrep-rules.generic.secrets.security.detected-jwt-token","name":"opengrep-rules.generic.secrets.security.detected-jwt-token","properties":{"precision":"very-high","tags":["CWE-321: Use of Hard-coded Cryptographic Key","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-jwt-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Kolide API Key detected"},"help":{"markdown":"Kolide API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Kolide API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-kolide-api-key","name":"opengrep-rules.generic.secrets.security.detected-kolide-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-kolide-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"MailChimp API Key detected"},"help":{"markdown":"MailChimp API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"MailChimp API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-mailchimp-api-key","name":"opengrep-rules.generic.secrets.security.detected-mailchimp-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-mailchimp-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Mailgun API Key detected"},"help":{"markdown":"Mailgun API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Mailgun API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-mailgun-api-key","name":"opengrep-rules.generic.secrets.security.detected-mailgun-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-mailgun-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"NPM registry authentication token detected"},"help":{"markdown":"NPM registry authentication token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"NPM registry authentication token detected"},"id":"opengrep-rules.generic.secrets.security.detected-npm-registry-auth-token","name":"opengrep-rules.generic.secrets.security.detected-npm-registry-auth-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-npm-registry-auth-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Onfido live API Token detected"},"help":{"markdown":"Onfido live API Token detected\n\n<b>References:</b>\n - [https://documentation.onfido.com/api/latest/#api-tokens](https://documentation.onfido.com/api/latest/#api-tokens)\n","text":"Onfido live API Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-onfido-live-api-token","name":"opengrep-rules.generic.secrets.security.detected-onfido-live-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-onfido-live-api-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Outlook Team detected"},"help":{"markdown":"Outlook Team detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Outlook Team detected"},"id":"opengrep-rules.generic.secrets.security.detected-outlook-team","name":"opengrep-rules.generic.secrets.security.detected-outlook-team","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-outlook-team"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"PayPal Braintree Access Token detected"},"help":{"markdown":"PayPal Braintree Access Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"PayPal Braintree Access Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-paypal-braintree-access-token","name":"opengrep-rules.generic.secrets.security.detected-paypal-braintree-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-paypal-braintree-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit."},"help":{"markdown":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit."},"id":"opengrep-rules.generic.secrets.security.detected-pgp-private-key-block","name":"opengrep-rules.generic.secrets.security.detected-pgp-private-key-block","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-pgp-private-key-block"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Picatic API Key detected"},"help":{"markdown":"Picatic API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Picatic API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-picatic-api-key","name":"opengrep-rules.generic.secrets.security.detected-picatic-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-picatic-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"help":{"markdown":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"id":"opengrep-rules.generic.secrets.security.detected-private-key","name":"opengrep-rules.generic.secrets.security.detected-private-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-private-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Sauce Token detected"},"help":{"markdown":"Sauce Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Sauce Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-sauce-token","name":"opengrep-rules.generic.secrets.security.detected-sauce-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-sauce-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SendGrid API Key detected"},"help":{"markdown":"SendGrid API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SendGrid API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-sendgrid-api-key","name":"opengrep-rules.generic.secrets.security.detected-sendgrid-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-sendgrid-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Slack Token detected"},"help":{"markdown":"Slack Token detected\n\n<b>References:</b>\n - [https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58](https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58)\n","text":"Slack Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-slack-token","name":"opengrep-rules.generic.secrets.security.detected-slack-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-slack-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Slack Webhook detected"},"help":{"markdown":"Slack Webhook detected\n\n<b>References:</b>\n - [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)\n","text":"Slack Webhook detected"},"id":"opengrep-rules.generic.secrets.security.detected-slack-webhook","name":"opengrep-rules.generic.secrets.security.detected-slack-webhook","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-slack-webhook"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Snyk API Key detected"},"help":{"markdown":"Snyk API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Snyk API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-snyk-api-key","name":"opengrep-rules.generic.secrets.security.detected-snyk-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-snyk-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SoftLayer API Key detected"},"help":{"markdown":"SoftLayer API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SoftLayer API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-softlayer-api-key","name":"opengrep-rules.generic.secrets.security.detected-softlayer-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-softlayer-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SonarQube Docs API Key detected"},"help":{"markdown":"SonarQube Docs API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SonarQube Docs API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-sonarqube-docs-api-key","name":"opengrep-rules.generic.secrets.security.detected-sonarqube-docs-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-sonarqube-docs-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Square Access Token detected"},"help":{"markdown":"Square Access Token detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Square Access Token detected"},"id":"opengrep-rules.generic.secrets.security.detected-square-access-token","name":"opengrep-rules.generic.secrets.security.detected-square-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-square-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Square OAuth Secret detected"},"help":{"markdown":"Square OAuth Secret detected\n\n<b>References:</b>\n - [https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py](https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py)\n","text":"Square OAuth Secret detected"},"id":"opengrep-rules.generic.secrets.security.detected-square-oauth-secret","name":"opengrep-rules.generic.secrets.security.detected-square-oauth-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-square-oauth-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SSH Password detected"},"help":{"markdown":"SSH Password detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SSH Password detected"},"id":"opengrep-rules.generic.secrets.security.detected-ssh-password","name":"opengrep-rules.generic.secrets.security.detected-ssh-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-ssh-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Stripe API Key detected"},"help":{"markdown":"Stripe API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Stripe API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-stripe-api-key","name":"opengrep-rules.generic.secrets.security.detected-stripe-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-stripe-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Stripe Restricted API Key detected"},"help":{"markdown":"Stripe Restricted API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Stripe Restricted API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-stripe-restricted-api-key","name":"opengrep-rules.generic.secrets.security.detected-stripe-restricted-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-stripe-restricted-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Telegram Bot API Key detected"},"help":{"markdown":"Telegram Bot API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Telegram Bot API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-telegram-bot-api-key","name":"opengrep-rules.generic.secrets.security.detected-telegram-bot-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-telegram-bot-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Twilio API Key detected"},"help":{"markdown":"Twilio API Key detected\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Twilio API Key detected"},"id":"opengrep-rules.generic.secrets.security.detected-twilio-api-key","name":"opengrep-rules.generic.secrets.security.detected-twilio-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-twilio-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Username and password in URI detected"},"help":{"markdown":"Username and password in URI detected\n\n<b>References:</b>\n - [https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go](https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go)\n","text":"Username and password in URI detected"},"id":"opengrep-rules.generic.secrets.security.detected-username-and-password-in-uri","name":"opengrep-rules.generic.secrets.security.detected-username-and-password-in-uri","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.detected-username-and-password-in-uri"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects potential Google Maps API keys in code"},"help":{"markdown":"Detects potential Google Maps API keys in code\n\n<b>References:</b>\n - [https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e](https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e)\n","text":"Detects potential Google Maps API keys in code"},"id":"opengrep-rules.generic.secrets.security.google-maps-apikeyleak","name":"opengrep-rules.generic.secrets.security.google-maps-apikeyleak","properties":{"precision":"very-high","tags":["CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory","MEDIUM CONFIDENCE","OWASP-A3:2017 Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.secrets.security.google-maps-apikeyleak"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your <script> and <link> tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/"},"help":{"markdown":"Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your <script> and <link> tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/352.html](https://cwe.mitre.org/data/definitions/352.html)\n - [https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/](https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/)\n","text":"Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your <script> and <link> tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/"},"id":"opengrep-rules.generic.visualforce.security.ncino.html.use-SRI-for-CDNs","name":"opengrep-rules.generic.visualforce.security.ncino.html.use-SRI-for-CDNs","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.visualforce.security.ncino.html.use-SRI-for-CDNs"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on <apex:outputText> tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts."},"help":{"markdown":"To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on <apex:outputText> tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts.\n\n<b>References:</b>\n - [https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/pages_security_tips_xss.htm](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/pages_security_tips_xss.htm)\n","text":"To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on <apex:outputText> tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts."},"id":"opengrep-rules.generic.visualforce.security.ncino.vf.xss-from-unescaped-url-param","name":"opengrep-rules.generic.visualforce.security.ncino.vf.xss-from-unescaped-url-param","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.visualforce.security.ncino.vf.xss-from-unescaped-url-param"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher."},"help":{"markdown":"Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher.\n\n<b>References:</b>\n - [https://help.salesforce.com/s/articleView?id=sf.csp_trusted_sites.htm&type=5](https://help.salesforce.com/s/articleView?id=sf.csp_trusted_sites.htm&type=5)\n","text":"Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher."},"id":"opengrep-rules.generic.visualforce.security.ncino.xml.csp-header-attribute","name":"opengrep-rules.generic.visualforce.security.ncino.xml.csp-header-attribute","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.visualforce.security.ncino.xml.csp-header-attribute"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true."},"help":{"markdown":"Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true.\n\n<b>References:</b>\n - [https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_pages.htm](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_pages.htm)\n","text":"Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true."},"id":"opengrep-rules.generic.visualforce.security.ncino.xml.visualforce-page-api-version","name":"opengrep-rules.generic.visualforce.security.ncino.xml.visualforce-page-api-version","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.generic.visualforce.security.ncino.xml.visualforce-page-api-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.\n\n<b>References:</b>\n - [https://pkg.go.dev/database/sql#DB.Query](https://pkg.go.dev/database/sql#DB.Query)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."},"id":"opengrep-rules.go.aws-lambda.security.database-sqli","name":"opengrep-rules.go.aws-lambda.security.database-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.aws-lambda.security.database-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.go.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.go.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object."},"help":{"markdown":"Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/289.html](https://cwe.mitre.org/data/definitions/289.html)\n","text":"Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object."},"id":"opengrep-rules.go.gorilla.security.audit.handler-assignment-from-multiple-sources","name":"opengrep-rules.go.gorilla.security.audit.handler-assignment-from-multiple-sources","properties":{"precision":"very-high","tags":["CWE-289: Authentication Bypass by Alternate Name","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorilla.security.audit.handler-assignment-from-multiple-sources"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct."},"help":{"markdown":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct.\n\n<b>References:</b>\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69)\n","text":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct."},"id":"opengrep-rules.go.gorilla.security.audit.session-cookie-missing-httponly","name":"opengrep-rules.go.gorilla.security.audit.session-cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorilla.security.audit.session-cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."},"help":{"markdown":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.\n\n<b>References:</b>\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69)\n","text":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."},"id":"opengrep-rules.go.gorilla.security.audit.session-cookie-missing-secure","name":"opengrep-rules.go.gorilla.security.audit.session-cookie-missing-secure","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorilla.security.audit.session-cookie-missing-secure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security."},"help":{"markdown":"Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security.\n\n<b>References:</b>\n - [https://pkg.go.dev/github.com/gorilla/sessions#Options](https://pkg.go.dev/github.com/gorilla/sessions#Options)\n","text":"Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security."},"id":"opengrep-rules.go.gorilla.security.audit.session-cookie-samesitenone","name":"opengrep-rules.go.gorilla.security.audit.session-cookie-samesitenone","properties":{"precision":"very-high","tags":["CWE-1275: Sensitive Cookie with Improper SameSite Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorilla.security.audit.session-cookie-samesitenone"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\""},"help":{"markdown":"The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\"\n\n<b>References:</b>\n - [https://pkg.go.dev/github.com/gorilla/websocket#Upgrader](https://pkg.go.dev/github.com/gorilla/websocket#Upgrader)\n","text":"The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\""},"id":"opengrep-rules.go.gorilla.security.audit.websocket-missing-origin-check","name":"opengrep-rules.go.gorilla.security.audit.websocket-missing-origin-check","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorilla.security.audit.websocket-missing-origin-check"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach)."},"help":{"markdown":"Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach).\n\n<b>References:</b>\n - [https://gorm.io/docs/security.html#SQL-injection-Methods](https://gorm.io/docs/security.html#SQL-injection-Methods)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach)."},"id":"opengrep-rules.go.gorm.security.audit.gorm-dangerous-method-usage","name":"opengrep-rules.go.gorm.security.audit.gorm-dangerous-method-usage","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.gorm.security.audit.gorm-dangerous-method-usage"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'."},"help":{"markdown":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\n\n<b>References:</b>\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n","text":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'."},"id":"opengrep-rules.go.grpc.security.grpc-client-insecure-connection","name":"opengrep-rules.go.grpc.security.grpc-client-insecure-connection","properties":{"precision":"very-high","tags":["CWE-300: Channel Accessible by Non-Endpoint","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.grpc.security.grpc-client-insecure-connection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'."},"help":{"markdown":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.\n\n<b>References:</b>\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n","text":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'."},"id":"opengrep-rules.go.grpc.security.grpc-server-insecure-connection","name":"opengrep-rules.go.grpc.security.grpc-server-insecure-connection","properties":{"precision":"very-high","tags":["CWE-300: Channel Accessible by Non-Endpoint","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.grpc.security.grpc-server-insecure-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it."},"id":"opengrep-rules.go.jwt-go.security.audit.jwt-go-parse-unverified","name":"opengrep-rules.go.jwt-go.security.audit.jwt-go-parse-unverified","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.jwt-go.security.audit.jwt-go-parse-unverified"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.go.jwt-go.security.hardcoded-jwt-key","name":"opengrep-rules.go.jwt-go.security.hardcoded-jwt-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.jwt-go.security.hardcoded-jwt-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.go.jwt-go.security.jwt-go-none-algorithm","name":"opengrep-rules.go.jwt-go.security.jwt-go-none-algorithm","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.jwt-go.security.jwt-go-none-algorithm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a channel guarded with a mutex. Channels already have an internal mutex, so this is unnecessary. Remove the mutex. See https://hackmongo.com/page/golang-antipatterns/#guarded-channel for more information."},"help":{"markdown":"Detected a channel guarded with a mutex. Channels already have an internal mutex, so this is unnecessary. Remove the mutex. See https://hackmongo.com/page/golang-antipatterns/#guarded-channel for more information.","text":"Detected a channel guarded with a mutex. Channels already have an internal mutex, so this is unnecessary. Remove the mutex. See https://hackmongo.com/page/golang-antipatterns/#guarded-channel for more information."},"id":"opengrep-rules.go.lang.best-practice.channel-guarded-with-mutex","name":"opengrep-rules.go.lang.best-practice.channel-guarded-with-mutex","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.best-practice.channel-guarded-with-mutex"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'."},"help":{"markdown":"Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'.","text":"Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'."},"id":"opengrep-rules.go.lang.best-practice.hidden-goroutine","name":"opengrep-rules.go.lang.best-practice.hidden-goroutine","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.best-practice.hidden-goroutine"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected useless comparison operation `$X == $X` or `$X != $X`. This will always return 'True' or 'False' and therefore is not necessary. Instead, remove this comparison operation or use another comparison expression that is not deterministic."},"help":{"markdown":"Detected useless comparison operation `$X == $X` or `$X != $X`. This will always return 'True' or 'False' and therefore is not necessary. Instead, remove this comparison operation or use another comparison expression that is not deterministic.","text":"Detected useless comparison operation `$X == $X` or `$X != $X`. This will always return 'True' or 'False' and therefore is not necessary. Instead, remove this comparison operation or use another comparison expression that is not deterministic."},"id":"opengrep-rules.go.lang.correctness.eqeq-is-bad","name":"opengrep-rules.go.lang.correctness.eqeq-is-bad","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.eqeq-is-bad"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$VALUE` is a loop pointer that may be exported from the loop. This pointer is shared between loop iterations, so the exported reference will always point to the last loop value, which is likely unintentional. To fix, copy the pointer to a new pointer within the loop."},"help":{"markdown":"`$VALUE` is a loop pointer that may be exported from the loop. This pointer is shared between loop iterations, so the exported reference will always point to the last loop value, which is likely unintentional. To fix, copy the pointer to a new pointer within the loop.\n\n<b>References:</b>\n - [https://github.com/kyoh86/looppointer](https://github.com/kyoh86/looppointer)\n","text":"`$VALUE` is a loop pointer that may be exported from the loop. This pointer is shared between loop iterations, so the exported reference will always point to the last loop value, which is likely unintentional. To fix, copy the pointer to a new pointer within the loop."},"id":"opengrep-rules.go.lang.correctness.exported_loop_pointer","name":"opengrep-rules.go.lang.correctness.exported_loop_pointer","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.exported_loop_pointer"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected useless if statement. 'if (True)' and 'if (False)' always result in the same behavior, and therefore is not necessary in the code. Remove the 'if (False)' expression completely or just the 'if (True)' comparison depending on which expression is in the code."},"help":{"markdown":"Detected useless if statement. 'if (True)' and 'if (False)' always result in the same behavior, and therefore is not necessary in the code. Remove the 'if (False)' expression completely or just the 'if (True)' comparison depending on which expression is in the code.","text":"Detected useless if statement. 'if (True)' and 'if (False)' always result in the same behavior, and therefore is not necessary in the code. Remove the 'if (False)' expression completely or just the 'if (True)' comparison depending on which expression is in the code."},"id":"opengrep-rules.go.lang.correctness.hardcoded-eq-true-or-false","name":"opengrep-rules.go.lang.correctness.hardcoded-eq-true-or-false","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.hardcoded-eq-true-or-false"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected conversion of the result of a strconv.Atoi command to an int16. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`."},"help":{"markdown":"Detected conversion of the result of a strconv.Atoi command to an int16. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`.","text":"Detected conversion of the result of a strconv.Atoi command to an int16. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`."},"id":"opengrep-rules.go.lang.correctness.overflow.integer-overflow-int16","name":"opengrep-rules.go.lang.correctness.overflow.integer-overflow-int16","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.overflow.integer-overflow-int16"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected conversion of the result of a strconv.Atoi command to an int32. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`."},"help":{"markdown":"Detected conversion of the result of a strconv.Atoi command to an int32. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`.","text":"Detected conversion of the result of a strconv.Atoi command to an int32. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`."},"id":"opengrep-rules.go.lang.correctness.overflow.integer-overflow-int32","name":"opengrep-rules.go.lang.correctness.overflow.integer-overflow-int32","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.overflow.integer-overflow-int32"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected file permissions that are set to more than `0600` (user/owner can read and write). Setting file permissions to higher than `0600` is most likely unnecessary and violates the principle of least privilege. Instead, set permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile, os.MkdirAll, and ioutil.WriteFile"},"help":{"markdown":"Detected file permissions that are set to more than `0600` (user/owner can read and write). Setting file permissions to higher than `0600` is most likely unnecessary and violates the principle of least privilege. Instead, set permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile, os.MkdirAll, and ioutil.WriteFile\n\n<b>References:</b>\n - [https://github.com/securego/gosec/blob/master/rules/fileperms.go](https://github.com/securego/gosec/blob/master/rules/fileperms.go)\n","text":"Detected file permissions that are set to more than `0600` (user/owner can read and write). Setting file permissions to higher than `0600` is most likely unnecessary and violates the principle of least privilege. Instead, set permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile, os.MkdirAll, and ioutil.WriteFile"},"id":"opengrep-rules.go.lang.correctness.permissions.incorrect-default-permission","name":"opengrep-rules.go.lang.correctness.permissions.incorrect-default-permission","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.permissions.incorrect-default-permission"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`path.Join(...)` always joins using a forward slash. This may cause issues on Windows or other systems using a different delimiter. Use `filepath.Join(...)` instead which uses OS-specific path separators."},"help":{"markdown":"`path.Join(...)` always joins using a forward slash. This may cause issues on Windows or other systems using a different delimiter. Use `filepath.Join(...)` instead which uses OS-specific path separators.\n\n<b>References:</b>\n - [https://parsiya.net/blog/2019-03-09-path.join-considered-harmful/](https://parsiya.net/blog/2019-03-09-path.join-considered-harmful/)\n - [https://go.dev/src/path/path.go?s=4034:4066#L145](https://go.dev/src/path/path.go?s=4034:4066#L145)\n","text":"`path.Join(...)` always joins using a forward slash. This may cause issues on Windows or other systems using a different delimiter. Use `filepath.Join(...)` instead which uses OS-specific path separators."},"id":"opengrep-rules.go.lang.correctness.use-filepath-join","name":"opengrep-rules.go.lang.correctness.use-filepath-join","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.correctness.use-filepath-join"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected identical statements in the if body and the else body of an if-statement. This will lead to the same code being executed no matter what the if-expression evaluates to. Instead, remove the if statement."},"help":{"markdown":"Detected identical statements in the if body and the else body of an if-statement. This will lead to the same code being executed no matter what the if-expression evaluates to. Instead, remove the if statement.","text":"Detected identical statements in the if body and the else body of an if-statement. This will lead to the same code being executed no matter what the if-expression evaluates to. Instead, remove the if statement."},"id":"opengrep-rules.go.lang.maintainability.useless-if-body","name":"opengrep-rules.go.lang.maintainability.useless-if-body","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.maintainability.useless-if-body"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an if block that checks for the same condition on both branches (`$X`). The second condition check is useless as it is the same as the first, and therefore can be removed from the code,"},"help":{"markdown":"Detected an if block that checks for the same condition on both branches (`$X`). The second condition check is useless as it is the same as the first, and therefore can be removed from the code,","text":"Detected an if block that checks for the same condition on both branches (`$X`). The second condition check is useless as it is the same as the first, and therefore can be removed from the code,"},"id":"opengrep-rules.go.lang.maintainability.useless-if-conditional","name":"opengrep-rules.go.lang.maintainability.useless-if-conditional","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.maintainability.useless-if-conditional"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it."},"help":{"markdown":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\n\n<b>References:</b>\n - [https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/](https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/)\n - [https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d](https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d)\n","text":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it."},"id":"opengrep-rules.go.lang.security.audit.crypto.avoid-ssh-insecure-ignore-host-key","name":"opengrep-rules.go.lang.security.audit.crypto.avoid-ssh-insecure-ignore-host-key","properties":{"precision":"very-high","tags":["CWE-322: Key Exchange without Entity Authentication","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.avoid-ssh-insecure-ignore-host-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead."},"help":{"markdown":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\n\n<b>References:</b>\n - [https://godoc.org/golang.org/x/crypto/sha3](https://godoc.org/golang.org/x/crypto/sha3)\n","text":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.insecure-module-used","name":"opengrep-rules.go.lang.security.audit.crypto.insecure-module-used","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.insecure-module-used"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Do not use `math/rand`. Use `crypto/rand` instead."},"help":{"markdown":"Do not use `math/rand`. Use `crypto/rand` instead.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation)\n","text":"Do not use `math/rand`. Use `crypto/rand` instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.math-random-used","name":"opengrep-rules.go.lang.security.audit.crypto.math-random-used","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.math-random-used"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3."},"help":{"markdown":"`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.\n\n<b>References:</b>\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\n - [https://golang.org/pkg/crypto/tls/#:~:text=MinVersion](https://golang.org/pkg/crypto/tls/#:~:text=MinVersion)\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\n","text":"`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3."},"id":"opengrep-rules.go.lang.security.audit.crypto.missing-ssl-minversion","name":"opengrep-rules.go.lang.security.audit.crypto.missing-ssl-minversion","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.missing-ssl-minversion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'."},"help":{"markdown":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\n\n<b>References:</b>\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\n","text":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'."},"id":"opengrep-rules.go.lang.security.audit.crypto.ssl-v3-is-insecure","name":"opengrep-rules.go.lang.security.audit.crypto.ssl-v3-is-insecure","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.ssl-v3-is-insecure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use."},"help":{"markdown":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\n\n<b>References:</b>\n - [https://golang.org/pkg/crypto/tls/#InsecureCipherSuites](https://golang.org/pkg/crypto/tls/#InsecureCipherSuites)\n","text":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use."},"id":"opengrep-rules.go.lang.security.audit.crypto.tls-with-insecure-cipher","name":"opengrep-rules.go.lang.security.audit.crypto.tls-with-insecure-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.tls-with-insecure-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead."},"help":{"markdown":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.use-of-DES","name":"opengrep-rules.go.lang.security.audit.crypto.use-of-DES","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.use-of-DES"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.use-of-md5","name":"opengrep-rules.go.lang.security.audit.crypto.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead."},"help":{"markdown":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.use-of-rc4","name":"opengrep-rules.go.lang.security.audit.crypto.use-of-rc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.use-of-rc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.go.lang.security.audit.crypto.use-of-sha1","name":"opengrep-rules.go.lang.security.audit.crypto.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RSA keys should be at least 2048 bits"},"help":{"markdown":"RSA keys should be at least 2048 bits\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"RSA keys should be at least 2048 bits"},"id":"opengrep-rules.go.lang.security.audit.crypto.use-of-weak-rsa-key","name":"opengrep-rules.go.lang.security.audit.crypto.use-of-weak-rsa-key","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.crypto.use-of-weak-rsa-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static command inside Write. Audit the input to '$CW.Write'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside Write. Audit the input to '$CW.Write'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside Write. Audit the input to '$CW.Write'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.go.lang.security.audit.dangerous-command-write","name":"opengrep-rules.go.lang.security.audit.dangerous-command-write","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.dangerous-command-write"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.go.lang.security.audit.dangerous-exec-cmd","name":"opengrep-rules.go.lang.security.audit.dangerous-exec-cmd","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.dangerous-exec-cmd"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.go.lang.security.audit.dangerous-exec-command","name":"opengrep-rules.go.lang.security.audit.dangerous-exec-command","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.dangerous-exec-command"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static command inside Exec. Audit the input to 'syscall.Exec'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside Exec. Audit the input to 'syscall.Exec'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside Exec. Audit the input to 'syscall.Exec'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.go.lang.security.audit.dangerous-syscall-exec","name":"opengrep-rules.go.lang.security.audit.dangerous-syscall-exec","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.dangerous-syscall-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data."},"help":{"markdown":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data."},"id":"opengrep-rules.go.lang.security.audit.database.string-formatted-query","name":"opengrep-rules.go.lang.security.audit.database.string-formatted-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.database.string-formatted-query"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package.\n\n<b>References:</b>\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://pkg.go.dev/golang.org/x/crypto/bcrypt](https://pkg.go.dev/golang.org/x/crypto/bcrypt)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package."},"id":"opengrep-rules.go.lang.security.audit.md5-used-as-password","name":"opengrep-rules.go.lang.security.audit.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string."},"help":{"markdown":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string."},"id":"opengrep-rules.go.lang.security.audit.net.avoid-bind-to-all-interfaces","name":"opengrep-rules.go.lang.security.audit.net.avoid-bind-to-all-interfaces","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.avoid-bind-to-all-interfaces"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie."},"help":{"markdown":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.\n\n<b>References:</b>\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go)\n - [https://golang.org/src/net/http/cookie.go](https://golang.org/src/net/http/cookie.go)\n","text":"A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie."},"id":"opengrep-rules.go.lang.security.audit.net.cookie-missing-httponly","name":"opengrep-rules.go.lang.security.audit.net.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."},"help":{"markdown":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.\n\n<b>References:</b>\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go)\n - [https://golang.org/src/net/http/cookie.go](https://golang.org/src/net/http/cookie.go)\n","text":"A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."},"id":"opengrep-rules.go.lang.security.audit.net.cookie-missing-secure","name":"opengrep-rules.go.lang.security.audit.net.cookie-missing-secure","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.cookie-missing-secure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined."},"help":{"markdown":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\n\n<b>References:</b>\n - [https://github.com/returntocorp/semgrep-rules/issues/518](https://github.com/returntocorp/semgrep-rules/issues/518)\n","text":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined."},"id":"opengrep-rules.go.lang.security.audit.net.dynamic-httptrace-clienttrace","name":"opengrep-rules.go.lang.security.audit.net.dynamic-httptrace-clienttrace","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.dynamic-httptrace-clienttrace"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability."},"help":{"markdown":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\n","text":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability."},"id":"opengrep-rules.go.lang.security.audit.net.formatted-template-string","name":"opengrep-rules.go.lang.security.audit.net.formatted-template-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.formatted-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files."},"help":{"markdown":"Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files.\n\n<b>References:</b>\n - [https://github.com/OWASP/Go-SCP](https://github.com/OWASP/Go-SCP)\n - [https://cwe.mitre.org/data/definitions/548.html](https://cwe.mitre.org/data/definitions/548.html)\n","text":"Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files."},"id":"opengrep-rules.go.lang.security.audit.net.fs-directory-listing","name":"opengrep-rules.go.lang.security.audit.net.fs-directory-listing","properties":{"precision":"very-high","tags":["CWE-548: Exposure of Information Through Directory Listing","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.fs-directory-listing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation."},"help":{"markdown":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\n\n<b>References:</b>\n - [https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/](https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/)\n","text":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation."},"id":"opengrep-rules.go.lang.security.audit.net.pprof-debug-exposure","name":"opengrep-rules.go.lang.security.audit.net.pprof-debug-exposure","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.pprof-debug-exposure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template."},"help":{"markdown":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#HTMLAttr](https://golang.org/pkg/html/template/#HTMLAttr)\n","text":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template."},"id":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-htmlattr","name":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-htmlattr","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.unescaped-data-in-htmlattr"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template."},"help":{"markdown":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#JS](https://golang.org/pkg/html/template/#JS)\n","text":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template."},"id":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-js","name":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-js","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.unescaped-data-in-js"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function."},"help":{"markdown":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#URL](https://golang.org/pkg/html/template/#URL)\n","text":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function."},"id":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-url","name":"opengrep-rules.go.lang.security.audit.net.unescaped-data-in-url","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.unescaped-data-in-url"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information."},"help":{"markdown":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\n\n<b>References:</b>\n - [https://golang.org/pkg/net/http/#ListenAndServeTLS](https://golang.org/pkg/net/http/#ListenAndServeTLS)\n","text":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information."},"id":"opengrep-rules.go.lang.security.audit.net.use-tls","name":"opengrep-rules.go.lang.security.audit.net.use-tls","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.use-tls"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped."},"help":{"markdown":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped."},"id":"opengrep-rules.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf","name":"opengrep-rules.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability."},"help":{"markdown":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability."},"id":"opengrep-rules.go.lang.security.audit.reflect-makefunc","name":"opengrep-rules.go.lang.security.audit.reflect-makefunc","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.reflect-makefunc"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a \"database/sql\" Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a \"database/sql\" Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.\n\n<b>References:</b>\n - [https://golang.org/pkg/database/sql/](https://golang.org/pkg/database/sql/)\n","text":"Detected string concatenation with a non-literal variable in a \"database/sql\" Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."},"id":"opengrep-rules.go.lang.security.audit.sqli.gosql-sqli","name":"opengrep-rules.go.lang.security.audit.sqli.gosql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.sqli.gosql-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a go-pg ORM SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, do not use strings concatenated with user-controlled input. Instead, use parameterized statements."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a go-pg ORM SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, do not use strings concatenated with user-controlled input. Instead, use parameterized statements.\n\n<b>References:</b>\n - [https://pg.uptrace.dev/queries/](https://pg.uptrace.dev/queries/)\n","text":"Detected string concatenation with a non-literal variable in a go-pg ORM SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, do not use strings concatenated with user-controlled input. Instead, use parameterized statements."},"id":"opengrep-rules.go.lang.security.audit.sqli.pg-orm-sqli","name":"opengrep-rules.go.lang.security.audit.sqli.pg-orm-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.sqli.pg-orm-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a go-pg SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead of string concatenation. You can use parameterized queries like so: '(SELECT ? FROM table, data1)'"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a go-pg SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead of string concatenation. You can use parameterized queries like so: '(SELECT ? FROM table, data1)'\n\n<b>References:</b>\n - [https://pg.uptrace.dev/](https://pg.uptrace.dev/)\n - [https://pkg.go.dev/github.com/go-pg/pg/v10](https://pkg.go.dev/github.com/go-pg/pg/v10)\n","text":"Detected string concatenation with a non-literal variable in a go-pg SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead of string concatenation. You can use parameterized queries like so: '(SELECT ? FROM table, data1)'"},"id":"opengrep-rules.go.lang.security.audit.sqli.pg-sqli","name":"opengrep-rules.go.lang.security.audit.sqli.pg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.sqli.pg-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a pgx Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can use parameterized queries like so: (`SELECT $1 FROM table`, `data1)"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a pgx Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can use parameterized queries like so: (`SELECT $1 FROM table`, `data1)\n\n<b>References:</b>\n - [https://github.com/jackc/pgx](https://github.com/jackc/pgx)\n - [https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool](https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool)\n","text":"Detected string concatenation with a non-literal variable in a pgx Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can use parameterized queries like so: (`SELECT $1 FROM table`, `data1)"},"id":"opengrep-rules.go.lang.security.audit.sqli.pgx-sqli","name":"opengrep-rules.go.lang.security.audit.sqli.pgx-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.sqli.pgx-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."},"help":{"markdown":"If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."},"id":"opengrep-rules.go.lang.security.audit.unsafe-reflect-by-name","name":"opengrep-rules.go.lang.security.audit.unsafe-reflect-by-name","properties":{"precision":"very-high","tags":["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.unsafe-reflect-by-name"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing."},"help":{"markdown":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/242.html](https://cwe.mitre.org/data/definitions/242.html)\n","text":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing."},"id":"opengrep-rules.go.lang.security.audit.use-of-unsafe-block","name":"opengrep-rules.go.lang.security.audit.use-of-unsafe-block","properties":{"precision":"very-high","tags":["CWE-242: Use of Inherently Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.use-of-unsafe-block"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities."},"help":{"markdown":"When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/use-golang-these-mistakes-could-compromise-your-apps-security](https://www.veracode.com/blog/secure-development/use-golang-these-mistakes-could-compromise-your-apps-security)\n","text":"When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities."},"id":"opengrep-rules.go.lang.security.audit.xss.import-text-template","name":"opengrep-rules.go.lang.security.audit.xss.import-text-template","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.import-text-template"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected directly writing or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package and render data using 'template.Execute()'."},"help":{"markdown":"Detected directly writing or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package and render data using 'template.Execute()'.\n\n<b>References:</b>\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected directly writing or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package and render data using 'template.Execute()'."},"id":"opengrep-rules.go.lang.security.audit.xss.no-direct-write-to-responsewriter","name":"opengrep-rules.go.lang.security.audit.xss.no-direct-write-to-responsewriter","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-direct-write-to-responsewriter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"help":{"markdown":"Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.\n\n<b>References:</b>\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"id":"opengrep-rules.go.lang.security.audit.xss.no-fprintf-to-responsewriter","name":"opengrep-rules.go.lang.security.audit.xss.no-fprintf-to-responsewriter","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-fprintf-to-responsewriter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead."},"help":{"markdown":"Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead."},"id":"opengrep-rules.go.lang.security.audit.xss.no-interpolation-in-tag","name":"opengrep-rules.go.lang.security.audit.xss.no-interpolation-in-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-interpolation-in-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected template variable interpolation in a JavaScript template string. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over JavaScript but without the need to use escaped characters. Instead, obtain this variable outside of the template string and ensure your template is properly escaped."},"help":{"markdown":"Detected template variable interpolation in a JavaScript template string. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over JavaScript but without the need to use escaped characters. Instead, obtain this variable outside of the template string and ensure your template is properly escaped.\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/9200#issuecomment-66100328](https://github.com/golang/go/issues/9200#issuecomment-66100328)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected template variable interpolation in a JavaScript template string. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over JavaScript but without the need to use escaped characters. Instead, obtain this variable outside of the template string and ensure your template is properly escaped."},"id":"opengrep-rules.go.lang.security.audit.xss.no-interpolation-js-template-string","name":"opengrep-rules.go.lang.security.audit.xss.no-interpolation-js-template-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-interpolation-js-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"help":{"markdown":"Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.\n\n<b>References:</b>\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n - [https://golang.org/pkg/io/#WriteString](https://golang.org/pkg/io/#WriteString)\n","text":"Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"id":"opengrep-rules.go.lang.security.audit.xss.no-io-writestring-to-responsewriter","name":"opengrep-rules.go.lang.security.audit.xss.no-io-writestring-to-responsewriter","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-io-writestring-to-responsewriter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'printf' or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"help":{"markdown":"Detected 'printf' or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.\n\n<b>References:</b>\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected 'printf' or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users."},"id":"opengrep-rules.go.lang.security.audit.xss.no-printf-in-responsewriter","name":"opengrep-rules.go.lang.security.audit.xss.no-printf-in-responsewriter","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.no-printf-in-responsewriter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'."},"help":{"markdown":"Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/vulnerability/xss/xss.go#L33](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/vulnerability/xss/xss.go#L33)\n","text":"Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'."},"id":"opengrep-rules.go.lang.security.audit.xss.unsafe-template-type","name":"opengrep-rules.go.lang.security.audit.xss.unsafe-template-type","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xss.unsafe-template-type"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected enabling of \"XMLParseNoEnt\", which allows parsing of external entities and can lead to XXE if user controlled data is parsed by the library. Instead, do not enable \"XMLParseNoEnt\" or be sure to adequately sanitize user-controlled data when it is being parsed by this library."},"help":{"markdown":"Detected enabling of \"XMLParseNoEnt\", which allows parsing of external entities and can lead to XXE if user controlled data is parsed by the library. Instead, do not enable \"XMLParseNoEnt\" or be sure to adequately sanitize user-controlled data when it is being parsed by this library.\n\n<b>References:</b>\n - [https://knowledge-base.secureflag.com/vulnerabilities/xml_injection/xml_entity_expansion_go_lang.html](https://knowledge-base.secureflag.com/vulnerabilities/xml_injection/xml_entity_expansion_go_lang.html)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n","text":"Detected enabling of \"XMLParseNoEnt\", which allows parsing of external entities and can lead to XXE if user controlled data is parsed by the library. Instead, do not enable \"XMLParseNoEnt\" or be sure to adequately sanitize user-controlled data when it is being parsed by this library."},"id":"opengrep-rules.go.lang.security.audit.xxe.parsing-external-entities-enabled","name":"opengrep-rules.go.lang.security.audit.xxe.parsing-external-entities-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.audit.xxe.parsing-external-entities-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"File creation in shared tmp directory without using ioutil.Tempfile"},"help":{"markdown":"File creation in shared tmp directory without using ioutil.Tempfile\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"File creation in shared tmp directory without using ioutil.Tempfile"},"id":"opengrep-rules.go.lang.security.bad-tmp-file-creation","name":"opengrep-rules.go.lang.security.bad-tmp-file-creation","properties":{"precision":"very-high","tags":["CWE-377: Insecure Temporary File","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.bad-tmp-file-creation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme."},"help":{"markdown":"`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.\n\n<b>References:</b>\n - [https://pkg.go.dev/path#Clean](https://pkg.go.dev/path#Clean)\n - [http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html](http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html)\n - [https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/](https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/)\n - [https://dzx.cz/2021/04/02/go_path_traversal/](https://dzx.cz/2021/04/02/go_path_traversal/)\n - [https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme](https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme)\n","text":"`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme."},"id":"opengrep-rules.go.lang.security.filepath-clean-misuse","name":"opengrep-rules.go.lang.security.filepath-clean-misuse","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.filepath-clean-misuse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist."},"help":{"markdown":"An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist.\n\n<b>References:</b>\n - [https://knowledge-base.secureflag.com/vulnerabilities/unvalidated_redirects___forwards/open_redirect_go_lang.html](https://knowledge-base.secureflag.com/vulnerabilities/unvalidated_redirects___forwards/open_redirect_go_lang.html)\n","text":"An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist."},"id":"opengrep-rules.go.lang.security.injection.open-redirect","name":"opengrep-rules.go.lang.security.injection.open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.injection.open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.\n\n<b>References:</b>\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely."},"id":"opengrep-rules.go.lang.security.injection.raw-html-format","name":"opengrep-rules.go.lang.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.\n\n<b>References:</b>\n - [https://golang.org/doc/database/sql-injection](https://golang.org/doc/database/sql-injection)\n - [https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/](https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library."},"id":"opengrep-rules.go.lang.security.injection.tainted-sql-string","name":"opengrep-rules.go.lang.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist."},"help":{"markdown":"A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.\n\n<b>References:</b>\n - [https://goteleport.com/blog/ssrf-attacks/](https://goteleport.com/blog/ssrf-attacks/)\n","text":"A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist."},"id":"opengrep-rules.go.lang.security.injection.tainted-url-host","name":"opengrep-rules.go.lang.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","HIGH CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"File traversal when extracting zip archive"},"help":{"markdown":"File traversal when extracting zip archive\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"File traversal when extracting zip archive"},"id":"opengrep-rules.go.lang.security.path-traversal-inside-zip-extraction","name":"opengrep-rules.go.lang.security.path-traversal-inside-zip-extraction","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.path-traversal-inside-zip-extraction"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. "},"help":{"markdown":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \n\n<b>References:</b>\n - [https://golang.org/pkg/io/#CopyN](https://golang.org/pkg/io/#CopyN)\n - [https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go](https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go)\n","text":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. "},"id":"opengrep-rules.go.lang.security.potential-dos-via-decompression-bomb","name":"opengrep-rules.go.lang.security.potential-dos-via-decompression-bomb","properties":{"precision":"very-high","tags":["CWE-400: Uncontrolled Resource Consumption","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.potential-dos-via-decompression-bomb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ReverseProxy can remove headers added by Director. Consider using ReverseProxy.Rewrite instead of ReverseProxy.Director."},"help":{"markdown":"ReverseProxy can remove headers added by Director. Consider using ReverseProxy.Rewrite instead of ReverseProxy.Director.\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/50580](https://github.com/golang/go/issues/50580)\n","text":"ReverseProxy can remove headers added by Director. Consider using ReverseProxy.Rewrite instead of ReverseProxy.Director."},"id":"opengrep-rules.go.lang.security.reverseproxy-director","name":"opengrep-rules.go.lang.security.reverseproxy-director","properties":{"precision":"very-high","tags":["CWE-115: Misinterpretation of Input","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.reverseproxy-director"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Shared URL struct may have been accidentally mutated. Ensure that this behavior is intended."},"help":{"markdown":"Shared URL struct may have been accidentally mutated. Ensure that this behavior is intended.\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/63777](https://github.com/golang/go/issues/63777)\n","text":"Shared URL struct may have been accidentally mutated. Ensure that this behavior is intended."},"id":"opengrep-rules.go.lang.security.shared-url-struct-mutation","name":"opengrep-rules.go.lang.security.shared-url-struct-mutation","properties":{"precision":"very-high","tags":["CWE-436: Interpretation Conflict","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.lang.security.shared-url-struct-mutation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.go.otto.security.audit.dangerous-execution","name":"opengrep-rules.go.otto.security.audit.dangerous-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.otto.security.audit.dangerous-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"usage of insecure template types. They are documented as a security risk. See https://golang.org/pkg/html/template/#HTML."},"help":{"markdown":"usage of insecure template types. They are documented as a security risk. See https://golang.org/pkg/html/template/#HTML.\n\n<b>References:</b>\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\n - [https://twitter.com/empijei/status/1275177219011350528](https://twitter.com/empijei/status/1275177219011350528)\n","text":"usage of insecure template types. They are documented as a security risk. See https://golang.org/pkg/html/template/#HTML."},"id":"opengrep-rules.go.template.security.go-insecure-templates","name":"opengrep-rules.go.template.security.go-insecure-templates","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.template.security.go-insecure-templates"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template."},"help":{"markdown":"A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template.\n\n<b>References:</b>\n - [https://www.onsecurity.io/blog/go-ssti-method-research/](https://www.onsecurity.io/blog/go-ssti-method-research/)\n - [http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html](http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html)\n","text":"A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template."},"id":"opengrep-rules.go.template.security.go-ssti","name":"opengrep-rules.go.template.security.go-ssti","properties":{"precision":"very-high","tags":["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.go.template.security.go-ssti"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This page denies crawlers from indexing the page. Remove the robots 'meta' tag."},"help":{"markdown":"This page denies crawlers from indexing the page. Remove the robots 'meta' tag.","text":"This page denies crawlers from indexing the page. Remove the robots 'meta' tag."},"id":"opengrep-rules.html.best-practice.robots-denied","name":"opengrep-rules.html.best-practice.robots-denied","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.best-practice.robots-denied"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The correct attribute name for this meta tag is `http-equiv`, not `https-equiv`."},"help":{"markdown":"The correct attribute name for this meta tag is `http-equiv`, not `https-equiv`.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv)\n","text":"The correct attribute name for this meta tag is `http-equiv`, not `https-equiv`."},"id":"opengrep-rules.html.correctness.https-equiv","name":"opengrep-rules.html.correctness.https-equiv","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.correctness.https-equiv"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of eval(...). This can introduce  a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. Follow OWASP best  practices to ensure you handle XSS within a JavaScript context correct, and consider using safer APIs to evaluate  user-input such as JSON.parse(...). "},"help":{"markdown":"Detected the use of eval(...). This can introduce  a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. Follow OWASP best  practices to ensure you handle XSS within a JavaScript context correct, and consider using safer APIs to evaluate  user-input such as JSON.parse(...). \n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected the use of eval(...). This can introduce  a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. Follow OWASP best  practices to ensure you handle XSS within a JavaScript context correct, and consider using safer APIs to evaluate  user-input such as JSON.parse(...). "},"id":"opengrep-rules.html.security.audit.eval-detected","name":"opengrep-rules.html.security.audit.eval-detected","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.security.audit.eval-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of an inner/outerHTML assignment.  This can introduce a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. If you have to use a dangerous web API,  consider using a sanitization library such as DOMPurify to sanitize  the HTML before it is assigned."},"help":{"markdown":"Detected the use of an inner/outerHTML assignment.  This can introduce a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. If you have to use a dangerous web API,  consider using a sanitization library such as DOMPurify to sanitize  the HTML before it is assigned.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of an inner/outerHTML assignment.  This can introduce a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. If you have to use a dangerous web API,  consider using a sanitization library such as DOMPurify to sanitize  the HTML before it is assigned."},"id":"opengrep-rules.html.security.audit.insecure-document-method","name":"opengrep-rules.html.security.audit.insecure-document-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.security.audit.insecure-document-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."},"help":{"markdown":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."},"id":"opengrep-rules.html.security.audit.missing-integrity","name":"opengrep-rules.html.security.audit.missing-integrity","properties":{"precision":"very-high","tags":["CWE-353: Missing Support for Integrity Check","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.security.audit.missing-integrity"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible."},"help":{"markdown":"This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/319.html](https://cwe.mitre.org/data/definitions/319.html)\n","text":"This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible."},"id":"opengrep-rules.html.security.plaintext-http-link","name":"opengrep-rules.html.security.plaintext-http-link","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.html.security.plaintext-http-link"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Manifest uses both `android:usesCleartextTraffic` and Network Security Config. The `usesCleartextTraffic` directive is ignored on Android 7 (API 24) and above if a Network Security Config is present."},"help":{"markdown":"Manifest uses both `android:usesCleartextTraffic` and Network Security Config. The `usesCleartextTraffic` directive is ignored on Android 7 (API 24) and above if a Network Security Config is present.\n\n<b>References:</b>\n - [https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic](https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic)\n - [https://developer.android.com/training/articles/security-config](https://developer.android.com/training/articles/security-config)\n","text":"Manifest uses both `android:usesCleartextTraffic` and Network Security Config. The `usesCleartextTraffic` directive is ignored on Android 7 (API 24) and above if a Network Security Config is present."},"id":"opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-ignored-by-nsc","name":"opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-ignored-by-nsc","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-ignored-by-nsc"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The Android manifest is configured to allow non-encrypted connections. Evaluate if this is necessary for your app, and disable it if appropriate. This flag is ignored on Android 7 (API 24) and above if a Network Security Config is present."},"help":{"markdown":"The Android manifest is configured to allow non-encrypted connections. Evaluate if this is necessary for your app, and disable it if appropriate. This flag is ignored on Android 7 (API 24) and above if a Network Security Config is present.\n\n<b>References:</b>\n - [https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic](https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic)\n - [https://developer.android.com/training/articles/security-config](https://developer.android.com/training/articles/security-config)\n","text":"The Android manifest is configured to allow non-encrypted connections. Evaluate if this is necessary for your app, and disable it if appropriate. This flag is ignored on Android 7 (API 24) and above if a Network Security Config is present."},"id":"opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-true","name":"opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-true","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.android.best-practice.manifest-usesCleartextTraffic-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane."},"help":{"markdown":"The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/926.html](https://cwe.mitre.org/data/definitions/926.html)\n","text":"The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane."},"id":"opengrep-rules.java.android.security.exported_activity","name":"opengrep-rules.java.android.security.exported_activity","properties":{"precision":"very-high","tags":["CWE-926: Improper Export of Android Application Components","MEDIUM CONFIDENCE","OWASP-A5:2021 Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.android.security.exported_activity"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.java.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.java.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"id":"opengrep-rules.java.aws-lambda.security.tainted-sqli","name":"opengrep-rules.java.aws-lambda.security.tainted-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.aws-lambda.security.tainted-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"id":"opengrep-rules.java.java-jwt.security.audit.java-jwt-decode-without-verify","name":"opengrep-rules.java.java-jwt.security.audit.java-jwt-decode-without-verify","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.java-jwt.security.audit.java-jwt-decode-without-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.java.java-jwt.security.java-jwt-hardcoded-secret","name":"opengrep-rules.java.java-jwt.security.java-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.java-jwt.security.java-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.java.java-jwt.security.java-jwt-none-alg","name":"opengrep-rules.java.java-jwt.security.java-jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.java-jwt.security.java-jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."},"help":{"markdown":"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class.\n\n<b>References:</b>\n - [https://access.redhat.com/blogs/766093/posts/3162112](https://access.redhat.com/blogs/766093/posts/3162112)\n","text":"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."},"id":"opengrep-rules.java.jax-rs.security.default-resteasy-provider-abuse","name":"opengrep-rules.java.jax-rs.security.default-resteasy-provider-abuse","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jax-rs.security.default-resteasy-provider-abuse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When a Restful webservice endpoint is configured to use wildcard mediaType {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution when calling the $Y.getObject method."},"help":{"markdown":"When a Restful webservice endpoint is configured to use wildcard mediaType {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution when calling the $Y.getObject method.\n\n<b>References:</b>\n - [https://access.redhat.com/blogs/766093/posts/3162112](https://access.redhat.com/blogs/766093/posts/3162112)\n","text":"When a Restful webservice endpoint is configured to use wildcard mediaType {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution when calling the $Y.getObject method."},"id":"opengrep-rules.java.jax-rs.security.insecure-resteasy-deserialization","name":"opengrep-rules.java.jax-rs.security.insecure-resteasy-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jax-rs.security.insecure-resteasy-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n<b>References:</b>\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"id":"opengrep-rules.java.jax-rs.security.jax-rs-path-traversal","name":"opengrep-rules.java.jax-rs.security.jax-rs-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jax-rs.security.jax-rs-path-traversal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"In $METHOD, $X is used to construct a SQL query via string concatenation."},"help":{"markdown":"In $METHOD, $X is used to construct a SQL query via string concatenation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"In $METHOD, $X is used to construct a SQL query via string concatenation."},"id":"opengrep-rules.java.jboss.security.find-sql-string-concatenation","name":"opengrep-rules.java.jboss.security.find-sql-string-concatenation","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jboss.security.find-sql-string-concatenation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Seam Logging API support an expression language to introduce bean property to log messages. The expression language can also be the source to unwanted code execution. In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"Seam Logging API support an expression language to introduce bean property to log messages. The expression language can also be the source to unwanted code execution. In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Seam Logging API support an expression language to introduce bean property to log messages. The expression language can also be the source to unwanted code execution. In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.jboss.security.seam-log-injection","name":"opengrep-rules.java.jboss.security.seam-log-injection","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jboss.security.seam-log-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.java.jjwt.security.jjwt-none-alg","name":"opengrep-rules.java.jjwt.security.jjwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.jjwt.security.jjwt-none-alg"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The value of `$X` is being ignored and will be used in the conditional test"},"help":{"markdown":"The value of `$X` is being ignored and will be used in the conditional test","text":"The value of `$X` is being ignored and will be used in the conditional test"},"id":"opengrep-rules.java.lang.correctness.assignment-comparison","name":"opengrep-rules.java.lang.correctness.assignment-comparison","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.correctness.assignment-comparison"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double). To test if `$X` is not-a-number, use `Double.isNaN($X)`."},"help":{"markdown":"`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double). To test if `$X` is not-a-number, use `Double.isNaN($X)`.","text":"`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double). To test if `$X` is not-a-number, use `Double.isNaN($X)`."},"id":"opengrep-rules.java.lang.correctness.eqeq","name":"opengrep-rules.java.lang.correctness.eqeq","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.correctness.eqeq"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"This if statement will always have the same behavior and is therefore unnecessary."},"help":{"markdown":"This if statement will always have the same behavior and is therefore unnecessary.","text":"This if statement will always have the same behavior and is therefore unnecessary."},"id":"opengrep-rules.java.lang.correctness.hardcoded-conditional","name":"opengrep-rules.java.lang.correctness.hardcoded-conditional","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.correctness.hardcoded-conditional"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Strings should not be compared with '=='. This is a reference comparison operator. Use '.equals()' instead."},"help":{"markdown":"Strings should not be compared with '=='. This is a reference comparison operator. Use '.equals()' instead.","text":"Strings should not be compared with '=='. This is a reference comparison operator. Use '.equals()' instead."},"id":"opengrep-rules.java.lang.correctness.no-string-eqeq","name":"opengrep-rules.java.lang.correctness.no-string-eqeq","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.correctness.no-string-eqeq"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"help":{"markdown":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"id":"opengrep-rules.java.lang.security.audit.anonymous-ldap-bind","name":"opengrep-rules.java.lang.security.audit.anonymous-ldap-bind","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.anonymous-ldap-bind"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead."},"help":{"markdown":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/704.html](https://cwe.mitre.org/data/definitions/704.html)\n","text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead."},"id":"opengrep-rules.java.lang.security.audit.bad-hexa-conversion","name":"opengrep-rules.java.lang.security.audit.bad-hexa-conversion","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.bad-hexa-conversion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."},"help":{"markdown":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."},"id":"opengrep-rules.java.lang.security.audit.blowfish-insufficient-key-size","name":"opengrep-rules.java.lang.security.audit.blowfish-insufficient-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.blowfish-insufficient-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."},"help":{"markdown":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\n\n<b>References:</b>\n - [https://capec.mitre.org/data/definitions/463.html](https://capec.mitre.org/data/definitions/463.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n - [https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY](https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY)\n","text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."},"id":"opengrep-rules.java.lang.security.audit.cbc-padding-oracle","name":"opengrep-rules.java.lang.security.audit.cbc-padding-oracle","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.cbc-padding-oracle"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"id":"opengrep-rules.java.lang.security.audit.command-injection-formatted-runtime-call","name":"opengrep-rules.java.lang.security.audit.command-injection-formatted-runtime-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.command-injection-formatted-runtime-call"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"id":"opengrep-rules.java.lang.security.audit.command-injection-process-builder","name":"opengrep-rules.java.lang.security.audit.command-injection-process-builder","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.command-injection-process-builder"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"help":{"markdown":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"id":"opengrep-rules.java.lang.security.audit.cookie-missing-httponly","name":"opengrep-rules.java.lang.security.audit.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"help":{"markdown":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"id":"opengrep-rules.java.lang.security.audit.cookie-missing-secure-flag","name":"opengrep-rules.java.lang.security.audit.cookie-missing-secure-flag","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.cookie-missing-secure-flag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"help":{"markdown":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"id":"opengrep-rules.java.lang.security.audit.crlf-injection-logs","name":"opengrep-rules.java.lang.security.audit.crlf-injection-logs","properties":{"precision":"very-high","tags":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crlf-injection-logs"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"help":{"markdown":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\n\n<b>References:</b>\n - [https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard](https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.des-is-deprecated","name":"opengrep-rules.java.lang.security.audit.crypto.des-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.des-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"help":{"markdown":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\n\n<b>References:</b>\n - [https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA](https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA)\n","text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"id":"opengrep-rules.java.lang.security.audit.crypto.desede-is-deprecated","name":"opengrep-rules.java.lang.security.audit.crypto.desede-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.desede-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"help":{"markdown":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"id":"opengrep-rules.java.lang.security.audit.crypto.ecb-cipher","name":"opengrep-rules.java.lang.security.audit.crypto.ecb-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.ecb-cipher"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different. Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted."},"help":{"markdown":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different. Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/323.html](https://cwe.mitre.org/data/definitions/323.html)\n","text":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different. Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted."},"id":"opengrep-rules.java.lang.security.audit.crypto.gcm-detection","name":"opengrep-rules.java.lang.security.audit.crypto.gcm-detection","properties":{"precision":"very-high","tags":["CWE-323: Reusing a Nonce, Key Pair in Encryption","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.gcm-detection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"GCM IV/nonce is reused: encryption can be totally useless"},"help":{"markdown":"GCM IV/nonce is reused: encryption can be totally useless\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"GCM IV/nonce is reused: encryption can be totally useless"},"id":"opengrep-rules.java.lang.security.audit.crypto.gcm-nonce-reuse","name":"opengrep-rules.java.lang.security.audit.crypto.gcm-nonce-reuse","properties":{"precision":"very-high","tags":["CWE-323: Reusing a Nonce, Key Pair in Encryption","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.gcm-nonce-reuse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.no-null-cipher","name":"opengrep-rules.java.lang.security.audit.crypto.no-null-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.no-null-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."},"help":{"markdown":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/329.html](https://cwe.mitre.org/data/definitions/329.html)\n","text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."},"id":"opengrep-rules.java.lang.security.audit.crypto.no-static-initialization-vector","name":"opengrep-rules.java.lang.security.audit.crypto.no-static-initialization-vector","properties":{"precision":"very-high","tags":["CWE-329: Generation of Predictable IV with CBC Mode","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.no-static-initialization-vector"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using RSA without OAEP mode weakens the encryption."},"help":{"markdown":"Using RSA without OAEP mode weakens the encryption.\n\n<b>References:</b>\n - [https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/](https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)\n","text":"Using RSA without OAEP mode weakens the encryption."},"id":"opengrep-rules.java.lang.security.audit.crypto.rsa-no-padding","name":"opengrep-rules.java.lang.security.audit.crypto.rsa-no-padding","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.rsa-no-padding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");"},"help":{"markdown":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms)\n","text":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");"},"id":"opengrep-rules.java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests","name":"opengrep-rules.java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."},"help":{"markdown":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."},"id":"opengrep-rules.java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated","name":"opengrep-rules.java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks."},"help":{"markdown":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks."},"id":"opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-hostname-verifier","name":"opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-hostname-verifier","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-hostname-verifier"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."},"help":{"markdown":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https](https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https)\n","text":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-trust-manager","name":"opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-trust-manager","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.ssl.insecure-trust-manager"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."},"help":{"markdown":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."},"id":"opengrep-rules.java.lang.security.audit.crypto.unencrypted-socket","name":"opengrep-rules.java.lang.security.audit.crypto.unencrypted-socket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.unencrypted-socket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-aes-ecb","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-aes-ecb","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-aes-ecb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-blowfish","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-blowfish","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-blowfish"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-default-aes","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-default-aes","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-default-aes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-md5","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-md5-digest-utils","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-md5-digest-utils","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-md5-digest-utils"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-rc2","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-rc2","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-rc2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-rc4","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-rc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-rc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-sha1","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"help":{"markdown":"RSA keys should be at least 2048 bits based on NIST recommendation.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"id":"opengrep-rules.java.lang.security.audit.crypto.use-of-weak-rsa-key","name":"opengrep-rules.java.lang.security.audit.crypto.use-of-weak-rsa-key","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.use-of-weak-rsa-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."},"help":{"markdown":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."},"id":"opengrep-rules.java.lang.security.audit.crypto.weak-random","name":"opengrep-rules.java.lang.security.audit.crypto.weak-random","properties":{"precision":"very-high","tags":["CWE-330: Use of Insufficiently Random Values","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.crypto.weak-random"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.lang.security.audit.dangerous-groovy-shell","name":"opengrep-rules.java.lang.security.audit.dangerous-groovy-shell","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.dangerous-groovy-shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.lang.security.audit.el-injection","name":"opengrep-rules.java.lang.security.audit.el-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.el-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps)\n - [https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.formatted-sql-string","name":"opengrep-rules.java.lang.security.audit.formatted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.formatted-sql-string"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."},"help":{"markdown":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\n\n<b>References:</b>\n - [https://www.owasp.org/index.php/HTTP_Response_Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)\n","text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."},"id":"opengrep-rules.java.lang.security.audit.http-response-splitting","name":"opengrep-rules.java.lang.security.audit.http-response-splitting","properties":{"precision":"very-high","tags":["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.http-response-splitting"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."},"help":{"markdown":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."},"id":"opengrep-rules.java.lang.security.audit.insecure-smtp-connection","name":"opengrep-rules.java.lang.security.audit.insecure-smtp-connection","properties":{"precision":"very-high","tags":["CWE-297: Improper Validation of Certificate with Host Mismatch","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.insecure-smtp-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep found potential reverse shell behavior"},"help":{"markdown":"Semgrep found potential reverse shell behavior\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Semgrep found potential reverse shell behavior"},"id":"opengrep-rules.java.lang.security.audit.java-reverse-shell","name":"opengrep-rules.java.lang.security.audit.java-reverse-shell","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.java-reverse-shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'"},"help":{"markdown":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'"},"id":"opengrep-rules.java.lang.security.audit.jdbc-sql-formatted-string","name":"opengrep-rules.java.lang.security.audit.jdbc-sql-formatted-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.jdbc-sql-formatted-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution."},"help":{"markdown":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\n\n<b>References:</b>\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n","text":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution."},"id":"opengrep-rules.java.lang.security.audit.ldap-entry-poisoning","name":"opengrep-rules.java.lang.security.audit.ldap-entry-poisoning","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.ldap-entry-poisoning"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data."},"help":{"markdown":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data."},"id":"opengrep-rules.java.lang.security.audit.ldap-injection","name":"opengrep-rules.java.lang.security.audit.ldap-injection","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.ldap-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.\n\n<b>References:</b>\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory](https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory)\n - [https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html](https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."},"id":"opengrep-rules.java.lang.security.audit.md5-used-as-password","name":"opengrep-rules.java.lang.security.audit.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."},"help":{"markdown":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\n\n<b>References:</b>\n - [https://www.owasp.org/index.php/Deserialization_of_untrusted_data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data)\n - [https://www.oracle.com/java/technologies/javase/seccodeguide.html#8](https://www.oracle.com/java/technologies/javase/seccodeguide.html#8)\n","text":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."},"id":"opengrep-rules.java.lang.security.audit.object-deserialization","name":"opengrep-rules.java.lang.security.audit.object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.lang.security.audit.ognl-injection","name":"opengrep-rules.java.lang.security.audit.ognl-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.ognl-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need."},"help":{"markdown":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need."},"id":"opengrep-rules.java.lang.security.audit.overly-permissive-file-permission","name":"opengrep-rules.java.lang.security.audit.overly-permissive-file-permission","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.overly-permissive-file-permission"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks."},"help":{"markdown":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks."},"id":"opengrep-rules.java.lang.security.audit.permissive-cors","name":"opengrep-rules.java.lang.security.audit.permissive-cors","properties":{"precision":"very-high","tags":["CWE-183: Permissive List of Allowed Inputs","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.permissive-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability."},"help":{"markdown":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability."},"id":"opengrep-rules.java.lang.security.audit.script-engine-injection","name":"opengrep-rules.java.lang.security.audit.script-engine-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.script-engine-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.hibernate-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.hibernate-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.hibernate-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.jdbc-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.jdbc-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.jdbc-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.jdo-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.jdo-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.jdo-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.jpa-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.jpa-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.jpa-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"id":"opengrep-rules.java.lang.security.audit.sqli.tainted-sql-from-http-request","name":"opengrep-rules.java.lang.security.audit.sqli.tainted-sql-from-http-request","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.tainted-sql-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.turbine-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.turbine-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.turbine-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.lang.security.audit.sqli.vertx-sqli","name":"opengrep-rules.java.lang.security.audit.sqli.vertx-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.sqli.vertx-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"id":"opengrep-rules.java.lang.security.audit.tainted-cmd-from-http-request","name":"opengrep-rules.java.lang.security.audit.tainted-cmd-from-http-request","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.tainted-cmd-from-http-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`."},"help":{"markdown":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`."},"id":"opengrep-rules.java.lang.security.audit.tainted-env-from-http-request","name":"opengrep-rules.java.lang.security.audit.tainted-env-from-http-request","properties":{"precision":"very-high","tags":["CWE-454: External Initialization of Trusted Variables or Data Stores","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.tainted-env-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"help":{"markdown":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n<b>References:</b>\n - [https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection](https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection)\n","text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"id":"opengrep-rules.java.lang.security.audit.tainted-ldapi-from-http-request","name":"opengrep-rules.java.lang.security.audit.tainted-ldapi-from-http-request","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.tainted-ldapi-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"id":"opengrep-rules.java.lang.security.audit.tainted-session-from-http-request","name":"opengrep-rules.java.lang.security.audit.tainted-session-from-http-request","properties":{"precision":"very-high","tags":["CWE-501: Trust Boundary Violation","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.tainted-session-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"id":"opengrep-rules.java.lang.security.audit.tainted-xpath-from-http-request","name":"opengrep-rules.java.lang.security.audit.tainted-xpath-from-http-request","properties":{"precision":"very-high","tags":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.tainted-xpath-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."},"help":{"markdown":"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."},"id":"opengrep-rules.java.lang.security.audit.unsafe-reflection","name":"opengrep-rules.java.lang.security.audit.unsafe-reflection","properties":{"precision":"very-high","tags":["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.unsafe-reflection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."},"help":{"markdown":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."},"id":"opengrep-rules.java.lang.security.audit.unvalidated-redirect","name":"opengrep-rules.java.lang.security.audit.unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.unvalidated-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties."},"help":{"markdown":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties."},"id":"opengrep-rules.java.lang.security.audit.url-rewriting","name":"opengrep-rules.java.lang.security.audit.url-rewriting","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.url-rewriting"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."},"help":{"markdown":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n","text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."},"id":"opengrep-rules.java.lang.security.audit.weak-ssl-context","name":"opengrep-rules.java.lang.security.audit.weak-ssl-context","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.weak-ssl-context"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention."},"help":{"markdown":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention."},"id":"opengrep-rules.java.lang.security.audit.xml-decoder","name":"opengrep-rules.java.lang.security.audit.xml-decoder","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xml-decoder"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an element with disabled HTML escaping. If external data can reach this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data can reach here, or remove 'escape=false' from this element."},"help":{"markdown":"Detected an element with disabled HTML escaping. If external data can reach this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data can reach here, or remove 'escape=false' from this element.\n\n<b>References:</b>\n - [https://stackoverflow.com/a/7442668](https://stackoverflow.com/a/7442668)\n","text":"Detected an element with disabled HTML escaping. If external data can reach this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data can reach here, or remove 'escape=false' from this element."},"id":"opengrep-rules.java.lang.security.audit.xss.jsf.autoescape-disabled","name":"opengrep-rules.java.lang.security.audit.xss.jsf.autoescape-disabled","properties":{"precision":"very-high","tags":["CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences","LOW CONFIDENCE","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xss.jsf.autoescape-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JSP scriptlet detected. Scriptlets are difficult to use securely and are considered bad practice. See https://stackoverflow.com/a/3180202. Instead, consider migrating to JSF or using the Expression Language '${...}' with the escapeXml function in your JSP files."},"help":{"markdown":"JSP scriptlet detected. Scriptlets are difficult to use securely and are considered bad practice. See https://stackoverflow.com/a/3180202. Instead, consider migrating to JSF or using the Expression Language '${...}' with the escapeXml function in your JSP files.\n\n<b>References:</b>\n - [https://stackoverflow.com/a/3180202](https://stackoverflow.com/a/3180202)\n - [https://stackoverflow.com/a/4948856](https://stackoverflow.com/a/4948856)\n","text":"JSP scriptlet detected. Scriptlets are difficult to use securely and are considered bad practice. See https://stackoverflow.com/a/3180202. Instead, consider migrating to JSF or using the Expression Language '${...}' with the escapeXml function in your JSP files."},"id":"opengrep-rules.java.lang.security.audit.xss.jsp.no-scriptlets","name":"opengrep-rules.java.lang.security.audit.xss.jsp.no-scriptlets","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xss.jsp.no-scriptlets"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'escapeXml' function from the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm for more information."},"help":{"markdown":"Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'escapeXml' function from the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm for more information.\n\n<b>References:</b>\n - [https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm](https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm)\n - [https://stackoverflow.com/a/4948856](https://stackoverflow.com/a/4948856)\n - [https://stackoverflow.com/a/3180202](https://stackoverflow.com/a/3180202)\n","text":"Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'escapeXml' function from the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm for more information."},"id":"opengrep-rules.java.lang.security.audit.xss.jsp.use-escapexml","name":"opengrep-rules.java.lang.security.audit.xss.jsp.use-escapexml","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xss.jsp.use-escapexml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information."},"help":{"markdown":"Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.\n\n<b>References:</b>\n - [https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm](https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm)\n - [https://stackoverflow.com/a/4948856](https://stackoverflow.com/a/4948856)\n - [https://stackoverflow.com/a/3180202](https://stackoverflow.com/a/3180202)\n","text":"Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information."},"id":"opengrep-rules.java.lang.security.audit.xss.jsp.use-jstl-escaping","name":"opengrep-rules.java.lang.security.audit.xss.jsp.use-jstl-escaping","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xss.jsp.use-jstl-escaping"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"help":{"markdown":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n<b>References:</b>\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n","text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"id":"opengrep-rules.java.lang.security.audit.xss.no-direct-response-writer","name":"opengrep-rules.java.lang.security.audit.xss.no-direct-response-writer","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xss.no-direct-response-writer"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself."},"help":{"markdown":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself."},"id":"opengrep-rules.java.lang.security.audit.xssrequestwrapper-is-insecure","name":"opengrep-rules.java.lang.security.audit.xssrequestwrapper-is-insecure","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xssrequestwrapper-is-insecure"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"id":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false","name":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"id":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing","name":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."},"help":{"markdown":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n","text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."},"id":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true","name":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n","text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"id":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true","name":"opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."},"help":{"markdown":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."},"id":"opengrep-rules.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing","name":"opengrep-rules.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\"."},"help":{"markdown":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\"."},"id":"opengrep-rules.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled","name":"opengrep-rules.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Marking code as privileged enables a piece of trusted code to temporarily enable access to more resources than are available directly to the code that called it. Be very careful in your use of the privileged construct, and always remember to make the privileged code section as small as possible."},"help":{"markdown":"Marking code as privileged enables a piece of trusted code to temporarily enable access to more resources than are available directly to the code that called it. Be very careful in your use of the privileged construct, and always remember to make the privileged code section as small as possible.\n\n<b>References:</b>\n - [https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html](https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html)\n - [https://wiki.sei.cmu.edu/confluence/display/java/Privilege+Escalation](https://wiki.sei.cmu.edu/confluence/display/java/Privilege+Escalation)\n - [http://phrack.org/papers/escaping_the_java_sandbox.html](http://phrack.org/papers/escaping_the_java_sandbox.html)\n","text":"Marking code as privileged enables a piece of trusted code to temporarily enable access to more resources than are available directly to the code that called it. Be very careful in your use of the privileged construct, and always remember to make the privileged code section as small as possible."},"id":"opengrep-rules.java.lang.security.do-privileged-use","name":"opengrep-rules.java.lang.security.do-privileged-use","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.do-privileged-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n<b>References:</b>\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"id":"opengrep-rules.java.lang.security.httpservlet-path-traversal","name":"opengrep-rules.java.lang.security.httpservlet-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.httpservlet-path-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."},"help":{"markdown":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.\n\n<b>References:</b>\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)\n","text":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."},"id":"opengrep-rules.java.lang.security.insecure-jms-deserialization","name":"opengrep-rules.java.lang.security.insecure-jms-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.insecure-jms-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization."},"help":{"markdown":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.\n\n<b>References:</b>\n - [https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038](https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038)\n - [https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/](https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/)\n","text":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization."},"id":"opengrep-rules.java.lang.security.jackson-unsafe-deserialization","name":"opengrep-rules.java.lang.security.jackson-unsafe-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A8:2017 Insecure Deserialization","OWASP-A8:2021 Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.jackson-unsafe-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."},"help":{"markdown":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."},"id":"opengrep-rules.java.lang.security.servletresponse-writer-xss","name":"opengrep-rules.java.lang.security.servletresponse-writer-xss","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.servletresponse-writer-xss"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."},"help":{"markdown":"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument.\n\n<b>References:</b>\n - [https://securitylab.github.com/research/swagger-yaml-parser-vulnerability/#snakeyaml-deserialization-vulnerability](https://securitylab.github.com/research/swagger-yaml-parser-vulnerability/#snakeyaml-deserialization-vulnerability)\n","text":"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."},"id":"opengrep-rules.java.lang.security.use-snakeyaml-constructor","name":"opengrep-rules.java.lang.security.use-snakeyaml-constructor","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.use-snakeyaml-constructor"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"help":{"markdown":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n","text":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"id":"opengrep-rules.java.lang.security.xmlinputfactory-external-entities-enabled","name":"opengrep-rules.java.lang.security.xmlinputfactory-external-entities-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.xmlinputfactory-external-entities-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"help":{"markdown":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser)\n","text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"id":"opengrep-rules.java.lang.security.xmlinputfactory-possible-xxe","name":"opengrep-rules.java.lang.security.xmlinputfactory-possible-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.lang.security.xmlinputfactory-possible-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-constant data passed into a NoSQL query using the 'where' evaluation operator. If this data can be controlled by an external user, this is a NoSQL injection. Ensure data passed to the NoSQL query is not user controllable, or properly sanitize the data. Ideally, avoid using the 'where' operator at all and instead use the helper methods provided by com.mongodb.client.model.Filters with comparative operators such as eq, ne, lt, gt, etc."},"help":{"markdown":"Detected non-constant data passed into a NoSQL query using the 'where' evaluation operator. If this data can be controlled by an external user, this is a NoSQL injection. Ensure data passed to the NoSQL query is not user controllable, or properly sanitize the data. Ideally, avoid using the 'where' operator at all and instead use the helper methods provided by com.mongodb.client.model.Filters with comparative operators such as eq, ne, lt, gt, etc.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n - [https://www.mongodb.com/docs/manual/tutorial/query-documents/](https://www.mongodb.com/docs/manual/tutorial/query-documents/)\n - [https://www.mongodb.com/docs/manual/reference/operator/query/where/](https://www.mongodb.com/docs/manual/reference/operator/query/where/)\n","text":"Detected non-constant data passed into a NoSQL query using the 'where' evaluation operator. If this data can be controlled by an external user, this is a NoSQL injection. Ensure data passed to the NoSQL query is not user controllable, or properly sanitize the data. Ideally, avoid using the 'where' operator at all and instead use the helper methods provided by com.mongodb.client.model.Filters with comparative operators such as eq, ne, lt, gt, etc."},"id":"opengrep-rules.java.mongodb.security.injection.audit.mongodb-nosqli","name":"opengrep-rules.java.mongodb.security.injection.audit.mongodb-nosqli","properties":{"precision":"very-high","tags":["CWE-943: Improper Neutralization of Special Elements in Data Query Logic","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.mongodb.security.injection.audit.mongodb-nosqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending on the underlying implementation. This object could be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."},"help":{"markdown":"Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending on the underlying implementation. This object could be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\n\n<b>References:</b>\n - [https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/](https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/)\n","text":"Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending on the underlying implementation. This object could be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."},"id":"opengrep-rules.java.rmi.security.server-dangerous-class-deserialization","name":"opengrep-rules.java.rmi.security.server-dangerous-class-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.rmi.security.server-dangerous-class-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."},"help":{"markdown":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\n\n<b>References:</b>\n - [https://frohoff.github.io/appseccali-marshalling-pickles/](https://frohoff.github.io/appseccali-marshalling-pickles/)\n - [https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi](https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi)\n - [https://youtu.be/t_aw1mDNhzI](https://youtu.be/t_aw1mDNhzI)\n - [https://github.com/qtc-de/remote-method-guesser](https://github.com/qtc-de/remote-method-guesser)\n - [https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331](https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331)\n","text":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."},"id":"opengrep-rules.java.rmi.security.server-dangerous-object-deserialization","name":"opengrep-rules.java.rmi.security.server-dangerous-object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.rmi.security.server-dangerous-object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks."},"help":{"markdown":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.\n\n<b>References:</b>\n - [https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)](https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean))\n - [https://owasp.org/www-community/controls/SecureCookieAttribute](https://owasp.org/www-community/controls/SecureCookieAttribute)\n","text":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks."},"id":"opengrep-rules.java.servlets.security.cookie-issecure-false","name":"opengrep-rules.java.servlets.security.cookie-issecure-false","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.servlets.security.cookie-issecure-false"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks."},"help":{"markdown":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.\n\n<b>References:</b>\n - [https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)](https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean))\n - [https://owasp.org/www-community/controls/SecureCookieAttribute](https://owasp.org/www-community/controls/SecureCookieAttribute)\n","text":"Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks."},"id":"opengrep-rules.java.servlets.security.cookie-setSecure","name":"opengrep-rules.java.servlets.security.cookie-setSecure","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.servlets.security.cookie-setSecure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.spring.security.audit.spel-injection","name":"opengrep-rules.java.spring.security.audit.spel-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spel-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured."},"help":{"markdown":"Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured.\n\n<b>References:</b>\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n","text":"Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured."},"id":"opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled","name":"opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured."},"help":{"markdown":"Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured.\n\n<b>References:</b>\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n","text":"Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured."},"id":"opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled-yaml","name":"opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled-yaml","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-actuator-dangerous-endpoints-enabled-yaml"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk."},"help":{"markdown":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.\n\n<b>References:</b>\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n","text":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk."},"id":"opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled","name":"opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk."},"help":{"markdown":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.\n\n<b>References:</b>\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n","text":"Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk."},"id":"opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled-yaml","name":"opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled-yaml","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-actuator-fully-enabled-yaml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"help":{"markdown":"CSRF protection is disabled for this configuration. This is a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"CSRF protection is disabled for this configuration. This is a security risk."},"id":"opengrep-rules.java.spring.security.audit.spring-csrf-disabled","name":"opengrep-rules.java.spring.security.audit.spring-csrf-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-csrf-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"id":"opengrep-rules.java.spring.security.audit.spring-jsp-eval","name":"opengrep-rules.java.spring.security.audit.spring-jsp-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-jsp-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"id":"opengrep-rules.java.spring.security.audit.spring-sqli","name":"opengrep-rules.java.spring.security.audit.spring-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."},"help":{"markdown":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."},"id":"opengrep-rules.java.spring.security.audit.spring-unvalidated-redirect","name":"opengrep-rules.java.spring.security.audit.spring-unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.audit.spring-unvalidated-redirect"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"id":"opengrep-rules.java.spring.security.injection.tainted-file-path","name":"opengrep-rules.java.spring.security.injection.tainted-file-path","properties":{"precision":"very-high","tags":["CWE-23: Relative Path Traversal","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.injection.tainted-file-path"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."},"id":"opengrep-rules.java.spring.security.injection.tainted-html-string","name":"opengrep-rules.java.spring.security.injection.tainted-html-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.injection.tainted-html-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n<b>References:</b>\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"id":"opengrep-rules.java.spring.security.injection.tainted-sql-string","name":"opengrep-rules.java.spring.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."},"help":{"markdown":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.\n\n<b>References:</b>\n - [https://www.stackhawk.com/blog/command-injection-java/](https://www.stackhawk.com/blog/command-injection-java/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\n - [https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java](https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java)\n","text":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."},"id":"opengrep-rules.java.spring.security.injection.tainted-system-command","name":"opengrep-rules.java.spring.security.injection.tainted-system-command","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.injection.tainted-system-command"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters."},"id":"opengrep-rules.java.spring.security.injection.tainted-url-host","name":"opengrep-rules.java.spring.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"help":{"markdown":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\n\n<b>References:</b>\n - [https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING](https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING)\n","text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"id":"opengrep-rules.java.spring.security.unrestricted-request-mapping","name":"opengrep-rules.java.spring.security.unrestricted-request-mapping","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.java.spring.security.unrestricted-request-mapping"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production."},"help":{"markdown":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production.\n\n<b>References:</b>\n - [https://ajv.js.org/options.html#allerrors](https://ajv.js.org/options.html#allerrors)\n","text":"By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production."},"id":"opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true","name":"opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true","properties":{"precision":"very-high","tags":["CWE-400: Uncontrolled Resource Consumption","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.ajv.security.audit.ajv-allerrors-true"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"help":{"markdown":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/function/angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"id":"opengrep-rules.javascript.angular.security.detect-angular-element-methods","name":"opengrep-rules.javascript.angular.security.detect-angular-element-methods","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-element-methods"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"help":{"markdown":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/function/angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."},"id":"opengrep-rules.javascript.angular.security.detect-angular-element-taint","name":"opengrep-rules.javascript.angular.security.detect-angular-element-taint","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-element-taint"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use of $window.location.href can lead to open-redirect if user input is used for redirection."},"help":{"markdown":"Use of $window.location.href can lead to open-redirect if user input is used for redirection.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"Use of $window.location.href can lead to open-redirect if user input is used for redirection."},"id":"opengrep-rules.javascript.angular.security.detect-angular-open-redirect","name":"opengrep-rules.javascript.angular.security.detect-angular-open-redirect","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used."},"help":{"markdown":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"$sceDelegateProvider allowlisting can introduce security issues if wildcards are used."},"id":"opengrep-rules.javascript.angular.security.detect-angular-resource-loading","name":"opengrep-rules.javascript.angular.security.detect-angular-resource-loading","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-resource-loading"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."},"help":{"markdown":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."},"id":"opengrep-rules.javascript.angular.security.detect-angular-sce-disabled","name":"opengrep-rules.javascript.angular.security.detect-angular-sce-disabled","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-sce-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API."},"help":{"markdown":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $translateProvider.translations method can be dangerous if user input is provided to this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method","name":"opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-translateprovider-translations-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsCss](https://docs.angularjs.org/api/ng/service/$sce#trustAsCss)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-css-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml](https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-html-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsJs](https://docs.angularjs.org/api/ng/service/$sce#trustAsJs)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-js-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-resourceurl-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API."},"help":{"markdown":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API.\n\n<b>References:</b>\n - [https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl](https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n","text":"The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API."},"id":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method","name":"opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.angular.security.detect-angular-trust-as-url-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary."},"help":{"markdown":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary.\n\n<b>References:</b>\n - [https://www.cvedetails.com/cve/CVE-2020-28168/](https://www.cvedetails.com/cve/CVE-2020-28168/)\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n","text":"User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary."},"id":"opengrep-rules.javascript.apollo.security.apollo-axios-ssrf","name":"opengrep-rules.javascript.apollo.security.apollo-axios-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.apollo.security.apollo-axios-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."},"help":{"markdown":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n - [https://eprint.iacr.org/2016/759.pdf](https://eprint.iacr.org/2016/759.pdf)\n - [https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf](https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf)\n - [https://datatracker.ietf.org/doc/html/rfc9106#section-4](https://datatracker.ietf.org/doc/html/rfc9106#section-4)\n","text":"Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."},"id":"opengrep-rules.javascript.argon2.security.unsafe-argon2-config","name":"opengrep-rules.javascript.argon2.security.unsafe-argon2-config","properties":{"precision":"very-high","tags":["CWE-916: Use of Password Hash With Insufficient Computational Effort","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.argon2.security.unsafe-argon2-config"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."},"help":{"markdown":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/dompurify](https://www.npmjs.com/package/dompurify)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."},"id":"opengrep-rules.javascript.audit.detect-replaceall-sanitization","name":"opengrep-rules.javascript.audit.detect-replaceall-sanitization","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.audit.detect-replaceall-sanitization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."},"help":{"markdown":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."},"id":"opengrep-rules.javascript.aws-lambda.security.detect-child-process","name":"opengrep-rules.javascript.aws-lambda.security.detect-child-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.detect-child-process"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"help":{"markdown":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"id":"opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object","name":"opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object","properties":{"precision":"very-high","tags":["CWE-943: Improper Neutralization of Special Elements in Data Query Logic","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.dynamodb-request-object"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.knex-sqli","name":"opengrep-rules.javascript.aws-lambda.security.knex-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.knex-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mysql2](https://www.npmjs.com/package/mysql2)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.mysql-sqli","name":"opengrep-rules.javascript.aws-lambda.security.mysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.mysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://node-postgres.com/features/queries](https://node-postgres.com/features/queries)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.aws-lambda.security.pg-sqli","name":"opengrep-rules.javascript.aws-lambda.security.pg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.pg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`\n\n<b>References:</b>\n - [https://sequelize.org/master/manual/raw-queries.html](https://sequelize.org/master/manual/raw-queries.html)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"},"id":"opengrep-rules.javascript.aws-lambda.security.sequelize-sqli","name":"opengrep-rules.javascript.aws-lambda.security.sequelize-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.sequelize-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-eval","name":"opengrep-rules.javascript.aws-lambda.security.tainted-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"help":{"markdown":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-html-response","name":"opengrep-rules.javascript.aws-lambda.security.tainted-html-response","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-html-response"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-html-string","name":"opengrep-rules.javascript.aws-lambda.security.tainted-html-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-html-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.javascript.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.javascript.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."},"help":{"markdown":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."},"id":"opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection","name":"opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.aws-lambda.security.vm-runincontext-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()"},"help":{"markdown":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()\n\n<b>References:</b>\n - [http://bluebirdjs.com/docs/getting-started.html](http://bluebirdjs.com/docs/getting-started.html)\n","text":"Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()"},"id":"opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution","name":"opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.bluebird.security.audit.tofastproperties-code-execution"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL."},"help":{"markdown":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/DOM_Based_XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS)\n","text":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL."},"id":"opengrep-rules.javascript.browser.security.dom-based-xss","name":"opengrep-rules.javascript.browser.security.dom-based-xss","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.dom-based-xss"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.javascript.browser.security.eval-detected","name":"opengrep-rules.javascript.browser.security.eval-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.eval-detected"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.browser.security.insecure-document-method","name":"opengrep-rules.javascript.browser.security.insecure-document-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insecure-document-method"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.browser.security.insecure-innerhtml","name":"opengrep-rules.javascript.browser.security.insecure-innerhtml","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insecure-innerhtml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS)."},"help":{"markdown":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS)."},"id":"opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation","name":"opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.insufficient-postmessage-origin-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"help":{"markdown":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"id":"opengrep-rules.javascript.browser.security.js-open-redirect","name":"opengrep-rules.javascript.browser.security.js-open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.js-open-redirect"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"help":{"markdown":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."},"id":"opengrep-rules.javascript.browser.security.js-open-redirect-from-function","name":"opengrep-rules.javascript.browser.security.js-open-redirect-from-function","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.js-open-redirect-from-function"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a HTML string may result in XSS"},"help":{"markdown":"User controlled data in a HTML string may result in XSS\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"User controlled data in a HTML string may result in XSS"},"id":"opengrep-rules.javascript.browser.security.raw-html-concat","name":"opengrep-rules.javascript.browser.security.raw-html-concat","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.raw-html-concat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a HTML string may result in XSS"},"help":{"markdown":"User controlled data in a HTML string may result in XSS\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"User controlled data in a HTML string may result in XSS"},"id":"opengrep-rules.javascript.browser.security.raw-html-join","name":"opengrep-rules.javascript.browser.security.raw-html-join","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.raw-html-join"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."},"help":{"markdown":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."},"id":"opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration","name":"opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.browser.security.wildcard-postmessage-configuration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://github.com/cyrus-and/chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface)\n","text":"If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection","name":"opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."},"help":{"markdown":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.\n\n<b>References:</b>\n - [https://deno.land/manual/examples/subprocess#simple-example](https://deno.land/manual/examples/subprocess#simple-example)\n","text":"Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."},"id":"opengrep-rules.javascript.deno.security.audit.deno-dangerous-run","name":"opengrep-rules.javascript.deno.security.audit.deno-dangerous-run","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.deno.security.audit.deno-dangerous-run"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"help":{"markdown":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/csurf](https://www.npmjs.com/package/csurf)\n - [https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."},"id":"opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage","name":"opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-check-csurf-middleware-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."},"help":{"markdown":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n","text":"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."},"id":"opengrep-rules.javascript.express.security.audit.express-check-directory-listing","name":"opengrep-rules.javascript.express.security.audit.express-check-directory-listing","properties":{"precision":"very-high","tags":["CWE-548: Exposure of Information Through Directory Listing","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-check-directory-listing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."},"help":{"markdown":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-default-name"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."},"help":{"markdown":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-domain"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."},"help":{"markdown":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-expires"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."},"help":{"markdown":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."},"help":{"markdown":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-path"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."},"help":{"markdown":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."},"id":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure","name":"opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-cookie-session-no-secure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function."},"help":{"markdown":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.\n\n<b>References:</b>\n - [https://github.com/mmckegg/notevil](https://github.com/mmckegg/notevil)\n","text":"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function."},"id":"opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage","name":"opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage","properties":{"precision":"very-high","tags":["CWE-1104: Use of Unmaintained Third Party Components","LOW CONFIDENCE","OWASP-A06:2021 - Vulnerable and Outdated Components","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-detect-notevil-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."},"help":{"markdown":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."},"id":"opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked","name":"opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-jwt-not-revoked"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."},"help":{"markdown":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."},"id":"opengrep-rules.javascript.express.security.audit.express-libxml-noent","name":"opengrep-rules.javascript.express.security.audit.express-libxml-noent","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-libxml-noent"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it."},"help":{"markdown":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it."},"id":"opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent","name":"opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-libxml-vm-noent"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."},"help":{"markdown":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."},"id":"opengrep-rules.javascript.express.security.audit.express-open-redirect","name":"opengrep-rules.javascript.express.security.audit.express-open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination"},"help":{"markdown":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Possible writing outside of the destination, make sure that the target path is nested in the intended destination"},"id":"opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal","name":"opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-path-join-resolve-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."},"help":{"markdown":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n","text":"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."},"id":"opengrep-rules.javascript.express.security.audit.express-res-sendfile","name":"opengrep-rules.javascript.express.security.audit.express-res-sendfile","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-res-sendfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret","name":"opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-session-hardcoded-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "},"help":{"markdown":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. \n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "},"id":"opengrep-rules.javascript.express.security.audit.express-ssrf","name":"opengrep-rules.javascript.express.security.audit.express-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."},"help":{"markdown":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n","text":"The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."},"id":"opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization","name":"opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","HIGH CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-third-party-object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n","text":"Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event","name":"opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.express-xml2json-xxe-event"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."},"help":{"markdown":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n","text":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."},"id":"opengrep-rules.javascript.express.security.audit.remote-property-injection","name":"opengrep-rules.javascript.express.security.audit.remote-property-injection","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.remote-property-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."},"help":{"markdown":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.\n\n<b>References:</b>\n - [http://expressjs.com/en/4x/api.html#res.render](http://expressjs.com/en/4x/api.html#res.render)\n","text":"User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."},"id":"opengrep-rules.javascript.express.security.audit.res-render-injection","name":"opengrep-rules.javascript.express.security.audit.res-render-injection","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.res-render-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."},"help":{"markdown":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."},"id":"opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect","name":"opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.unknown-value-in-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"help":{"markdown":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."},"id":"opengrep-rules.javascript.express.security.audit.xss.direct-response-write","name":"opengrep-rules.javascript.express.security.audit.xss.direct-response-write","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.direct-response-write"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n<b>References:</b>\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n","text":"Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"help":{"markdown":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-src"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.ejs.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'."},"help":{"markdown":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'.\n\n<b>References:</b>\n - [https://github.com/janl/mustache.js/#variables](https://github.com/janl/mustache.js/#variables)\n","text":"The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.escape-function-overwrite"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://github.com/janl/mustache.js/#variables](https://github.com/janl/mustache.js/#variables)\n - [https://ractive.js.org/v0.x/0.7/mustaches#variables](https://ractive.js.org/v0.x/0.7/mustaches#variables)\n","text":"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://pugjs.org/language/attributes.html#attributes](https://pugjs.org/language/attributes.html#attributes)\n","text":"Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes","name":"opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.template-and-attributes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"help":{"markdown":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [https://pugjs.org/language/code.html#unescaped-buffered-code](https://pugjs.org/language/code.html#unescaped-buffered-code)\n - [https://pugjs.org/language/attributes.html#unescaped-attributes](https://pugjs.org/language/attributes.html#unescaped-attributes)\n","text":"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape","name":"opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.template-explicit-unescape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href","name":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.\n\n<b>References:</b>\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI."},"id":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag","name":"opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.audit.xss.pug.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."},"help":{"markdown":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n","text":"By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."},"id":"opengrep-rules.javascript.express.security.cors-misconfiguration","name":"opengrep-rules.javascript.express.security.cors-misconfiguration","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.cors-misconfiguration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"help":{"markdown":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.\n\n<b>References:</b>\n - [https://en.wikipedia.org/wiki/Mass_assignment_vulnerability](https://en.wikipedia.org/wiki/Mass_assignment_vulnerability)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"id":"opengrep-rules.javascript.express.security.express-data-exfiltration","name":"opengrep-rules.javascript.express.security.express-data-exfiltration","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-data-exfiltration"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."},"help":{"markdown":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.\n\n<b>References:</b>\n - [https://github.com/astro/node-expat](https://github.com/astro/node-expat)\n","text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."},"id":"opengrep-rules.javascript.express.security.express-expat-xxe","name":"opengrep-rules.javascript.express.security.express-expat-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-expat-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."},"help":{"markdown":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."},"id":"opengrep-rules.javascript.express.security.express-insecure-template-usage","name":"opengrep-rules.javascript.express.security.express-insecure-template-usage","properties":{"precision":"very-high","tags":["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-insecure-template-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret","name":"opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://phantomjs.org/page-automation.html](https://phantomjs.org/page-automation.html)\n","text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-phantom-injection","name":"opengrep-rules.javascript.express.security.express-phantom-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-phantom-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://pptr.dev/api/puppeteer.page](https://pptr.dev/api/puppeteer.page)\n","text":"If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-puppeteer-injection","name":"opengrep-rules.javascript.express.security.express-puppeteer-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-puppeteer-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach `sandbox`."},"help":{"markdown":"Make sure that unverified user data can not reach `sandbox`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `sandbox`."},"id":"opengrep-rules.javascript.express.security.express-sandbox-code-injection","name":"opengrep-rules.javascript.express.security.express-sandbox-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-sandbox-code-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach `$VM`."},"help":{"markdown":"Make sure that unverified user data can not reach `$VM`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `$VM`."},"id":"opengrep-rules.javascript.express.security.express-vm-injection","name":"opengrep-rules.javascript.express.security.express-vm-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-vm-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.express.security.express-vm2-injection","name":"opengrep-rules.javascript.express.security.express-vm2-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-vm2-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/wkhtmltopdf](https://www.npmjs.com/package/wkhtmltopdf)\n","text":"If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection","name":"opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-wkhtmltoimage-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/wkhtmltopdf](https://www.npmjs.com/package/wkhtmltopdf)\n","text":"If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection","name":"opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-wkhtmltopdf-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n","text":"Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.express.security.express-xml2json-xxe","name":"opengrep-rules.javascript.express.security.express-xml2json-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.express-xml2json-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."},"help":{"markdown":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."},"id":"opengrep-rules.javascript.express.security.injection.raw-html-format","name":"opengrep-rules.javascript.express.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.javascript.express.security.injection.tainted-sql-string","name":"opengrep-rules.javascript.express.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."},"help":{"markdown":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.\n\n<b>References:</b>\n - [https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it](https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it)\n","text":"If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."},"id":"opengrep-rules.javascript.express.security.require-request","name":"opengrep-rules.javascript.express.security.require-request","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.require-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."},"help":{"markdown":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\n","text":"By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."},"id":"opengrep-rules.javascript.express.security.x-frame-options-misconfiguration","name":"opengrep-rules.javascript.express.security.x-frame-options-misconfiguration","properties":{"precision":"very-high","tags":["CWE-451: User Interface (UI) Misrepresentation of Critical Information","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.express.security.x-frame-options-misconfiguration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup","name":"opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.fbjs.security.audit.insecure-createnodesfrommarkup"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."},"help":{"markdown":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\n\n<b>References:</b>\n - [https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security](https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security)\n","text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."},"id":"opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection","name":"opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.grpc.security.grpc-nodejs-insecure-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"},"help":{"markdown":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile\n\n<b>References:</b>\n - [https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile](https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile)\n","text":"Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`. This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"},"id":"opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash","name":"opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.javascript.jose.security.audit.jose-exposed-data","name":"opengrep-rules.javascript.jose.security.audit.jose-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.audit.jose-exposed-data"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.jose.security.hardcoded-jwt-secret","name":"opengrep-rules.javascript.jose.security.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.javascript.jose.security.jwt-none-alg","name":"opengrep-rules.javascript.jose.security.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jose.security.jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n - [https://bugs.jquery.com/ticket/9521](https://bugs.jquery.com/ticket/9521)\n","text":"User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method","name":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.jquery-insecure-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"help":{"markdown":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n - [https://bugs.jquery.com/ticket/9521](https://bugs.jquery.com/ticket/9521)\n","text":"User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities"},"id":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector","name":"opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.jquery-insecure-selector"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."},"help":{"markdown":"## Remediation\nAvoid using JQuery's html() function. If the string is plain text, use the text() function instead.\nOtherwise, use a function that escapes html such as edx's HtmlUtils.setHtml().\n\n\n<b>References:</b>\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html)\n - [https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks](https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks)\n - [https://api.jquery.com/text/#text-text](https://api.jquery.com/text/#text-text)\n","text":"## Remediation\nAvoid using JQuery's html() function. If the string is plain text, use the text() function instead.\nOtherwise, use a function that escapes html such as edx's HtmlUtils.setHtml().\n"},"id":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html","name":"opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jquery.security.audit.prohibit-jquery-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"id":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify","name":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-decode-without-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data","name":"opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.audit.jwt-exposed-data"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret","name":"opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg","name":"opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jsonwebtoken.security.jwt-none-alg"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/jwt-simple](https://www.npmjs.com/package/jwt-simple)\n - [https://cwe.mitre.org/data/definitions/287](https://cwe.mitre.org/data/definitions/287)\n - [https://cwe.mitre.org/data/definitions/345](https://cwe.mitre.org/data/definitions/345)\n - [https://cwe.mitre.org/data/definitions/347](https://cwe.mitre.org/data/definitions/347)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."},"id":"opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify","name":"opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","CWE-345: Insufficient Verification of Data Authenticity","CWE-347: Improper Verification of Cryptographic Signature","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.jwt-simple.security.jwt-simple-noverify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs."},"help":{"markdown":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs.","text":"`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs."},"id":"opengrep-rules.javascript.lang.best-practice.assigned-undefined","name":"opengrep-rules.javascript.lang.best-practice.assigned-undefined","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.assigned-undefined"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found alert() call; should this be in production code?"},"help":{"markdown":"found alert() call; should this be in production code?","text":"found alert() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-alert","name":"opengrep-rules.javascript.lang.best-practice.javascript-alert","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-alert"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found confirm() call; should this be in production code?"},"help":{"markdown":"found confirm() call; should this be in production code?","text":"found confirm() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-confirm","name":"opengrep-rules.javascript.lang.best-practice.javascript-confirm","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-confirm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found debugger call; should this be in production code?"},"help":{"markdown":"found debugger call; should this be in production code?","text":"found debugger call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-debugger","name":"opengrep-rules.javascript.lang.best-practice.javascript-debugger","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-debugger"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"found prompt() call; should this be in production code?"},"help":{"markdown":"found prompt() call; should this be in production code?","text":"found prompt() call; should this be in production code?"},"id":"opengrep-rules.javascript.lang.best-practice.javascript-prompt","name":"opengrep-rules.javascript.lang.best-practice.javascript-prompt","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.javascript-prompt"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions."},"help":{"markdown":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.\n\n<b>References:</b>\n - [https://nodesecroadmap.fyi/chapter-2/dynamism.html](https://nodesecroadmap.fyi/chapter-2/dynamism.html)\n - [https://github.com/goldbergyoni/nodebestpractices#-38-require-modules-first-not-inside-functions](https://github.com/goldbergyoni/nodebestpractices#-38-require-modules-first-not-inside-functions)\n","text":"Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions."},"id":"opengrep-rules.javascript.lang.best-practice.lazy-load-module","name":"opengrep-rules.javascript.lang.best-practice.lazy-load-module","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.lazy-load-module"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort."},"help":{"markdown":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort.\n\n<b>References:</b>\n - [https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations](https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations)\n","text":"Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort."},"id":"opengrep-rules.javascript.lang.best-practice.zlib-async-loop","name":"opengrep-rules.javascript.lang.best-practice.zlib-async-loop","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.best-practice.zlib-async-loop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex."},"help":{"markdown":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.","text":"Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex."},"id":"opengrep-rules.javascript.lang.correctness.eqeq-is-bad","name":"opengrep-rules.javascript.lang.correctness.eqeq-is-bad","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.eqeq-is-bad"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?"},"help":{"markdown":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?","text":"This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?"},"id":"opengrep-rules.javascript.lang.correctness.missing-template-string-indicator","name":"opengrep-rules.javascript.lang.correctness.missing-template-string-indicator","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.missing-template-string-indicator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)"},"help":{"markdown":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)\n\n<b>References:</b>\n - [https://discourse.threejs.org/t/replaceall-is-not-a-function/14585](https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)\n","text":"The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)"},"id":"opengrep-rules.javascript.lang.correctness.no-replaceall","name":"opengrep-rules.javascript.lang.correctness.no-replaceall","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.no-replaceall"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead."},"help":{"markdown":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/json-stable-stringify](https://www.npmjs.com/package/json-stable-stringify)\n - [https://stackoverflow.com/a/16168003](https://stackoverflow.com/a/16168003)\n","text":"JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead."},"id":"opengrep-rules.javascript.lang.correctness.no-stringify-keys","name":"opengrep-rules.javascript.lang.correctness.no-stringify-keys","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.no-stringify-keys"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"`$X` is assigned twice; the first assignment is useless"},"help":{"markdown":"`$X` is assigned twice; the first assignment is useless","text":"`$X` is assigned twice; the first assignment is useless"},"id":"opengrep-rules.javascript.lang.correctness.useless-assignment","name":"opengrep-rules.javascript.lang.correctness.useless-assignment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.correctness.useless-assignment"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."},"help":{"markdown":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\n - [https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback](https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback)\n - [https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/](https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/)\n - [https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html](https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html)\n","text":"Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."},"id":"opengrep-rules.javascript.lang.security.audit.code-string-concat","name":"opengrep-rules.javascript.lang.security.audit.code-string-concat","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.code-string-concat"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."},"help":{"markdown":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\n","text":"Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."},"id":"opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell","name":"opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.dangerous-spawn-shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."},"help":{"markdown":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-fs-filename"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"help":{"markdown":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n","text":"RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-regexp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."},"help":{"markdown":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js](https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js)\n","text":"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."},"id":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-require","name":"opengrep-rules.javascript.lang.security.audit.detect-non-literal-require","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-non-literal-require"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."},"help":{"markdown":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://www.regular-expressions.info/redos.html](https://www.regular-expressions.info/redos.html)\n","text":"Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."},"id":"opengrep-rules.javascript.lang.security.audit.detect-redos","name":"opengrep-rules.javascript.lang.security.audit.detect-redos","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.detect-redos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."},"help":{"markdown":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.\n\n<b>References:</b>\n - [https://rules.sonarsource.com/javascript/RSPEC-2068](https://rules.sonarsource.com/javascript/RSPEC-2068)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management)\n","text":"Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."},"id":"opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key","name":"opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.hardcoded-hmac-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"help":{"markdown":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag."},"id":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization","name":"opengrep-rules.javascript.lang.security.audit.incomplete-sanitization","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.incomplete-sanitization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package.\n\n<b>References:</b>\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package."},"id":"opengrep-rules.javascript.lang.security.audit.md5-used-as-password","name":"opengrep-rules.javascript.lang.security.audit.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."},"help":{"markdown":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."},"id":"opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal","name":"opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"help":{"markdown":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.\n\n<b>References:</b>\n - [https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n","text":"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"id":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment","name":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"help":{"markdown":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.\n\n<b>References:</b>\n - [https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n","text":"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."},"id":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop","name":"opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."},"help":{"markdown":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."},"id":"opengrep-rules.javascript.lang.security.audit.spawn-shell-true","name":"opengrep-rules.javascript.lang.security.audit.spawn-shell-true","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.spawn-shell-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."},"help":{"markdown":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.\n\n<b>References:</b>\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-knex-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mssql](https://www.npmjs.com/package/mssql)\n","text":"Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`"},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-mssql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"help":{"markdown":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/mysql2](https://www.npmjs.com/package/mysql2)\n - [https://www.npmjs.com/package/mysql](https://www.npmjs.com/package/mysql)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-mysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`\n\n<b>References:</b>\n - [https://node-postgres.com/features/queries](https://node-postgres.com/features/queries)\n","text":"Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"},"id":"opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli","name":"opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.sqli.node-postgres-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."},"help":{"markdown":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\n\n<b>References:</b>\n - [https://www.developsec.com/2017/11/09/xss-in-a-script-tag/](https://www.developsec.com/2017/11/09/xss-in-a-script-tag/)\n - [https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68](https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68)\n","text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."},"id":"opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag","name":"opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unknown-value-with-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"help":{"markdown":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."},"id":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method","name":"opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unsafe-dynamic-method"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/134.html](https://cwe.mitre.org/data/definitions/134.html)\n","text":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."},"id":"opengrep-rules.javascript.lang.security.audit.unsafe-formatstring","name":"opengrep-rules.javascript.lang.security.audit.unsafe-formatstring","properties":{"precision":"very-high","tags":["CWE-134: Use of Externally-Controlled Format String","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.audit.unsafe-formatstring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."},"help":{"markdown":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/119.html](https://cwe.mitre.org/data/definitions/119.html)\n","text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."},"id":"opengrep-rules.javascript.lang.security.detect-buffer-noassert","name":"opengrep-rules.javascript.lang.security.detect-buffer-noassert","properties":{"precision":"very-high","tags":["CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-buffer-noassert"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "},"help":{"markdown":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\n","text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "},"id":"opengrep-rules.javascript.lang.security.detect-child-process","name":"opengrep-rules.javascript.lang.security.detect-child-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-child-process"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."},"help":{"markdown":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."},"id":"opengrep-rules.javascript.lang.security.detect-disable-mustache-escape","name":"opengrep-rules.javascript.lang.security.detect-disable-mustache-escape","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-disable-mustache-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."},"help":{"markdown":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\n","text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."},"id":"opengrep-rules.javascript.lang.security.detect-eval-with-expression","name":"opengrep-rules.javascript.lang.security.detect-eval-with-expression","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-eval-with-expression"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."},"help":{"markdown":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."},"id":"opengrep-rules.javascript.lang.security.detect-insecure-websocket","name":"opengrep-rules.javascript.lang.security.detect-insecure-websocket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-insecure-websocket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."},"help":{"markdown":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\n\n<b>References:</b>\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md)\n","text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."},"id":"opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override","name":"opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-no-csrf-before-method-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."},"help":{"markdown":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."},"id":"opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes","name":"opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.detect-pseudoRandomBytes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."},"help":{"markdown":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."},"id":"opengrep-rules.javascript.lang.security.html-in-template-string","name":"opengrep-rules.javascript.lang.security.html-in-template-string","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.html-in-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"help":{"markdown":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n - [https://en.wikipedia.org/wiki/Mass_assignment_vulnerability](https://en.wikipedia.org/wiki/Mass_assignment_vulnerability)\n","text":"Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability."},"id":"opengrep-rules.javascript.lang.security.insecure-object-assign","name":"opengrep-rules.javascript.lang.security.insecure-object-assign","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.insecure-object-assign"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."},"help":{"markdown":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."},"id":"opengrep-rules.javascript.lang.security.spawn-git-clone","name":"opengrep-rules.javascript.lang.security.spawn-git-clone","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.lang.security.spawn-git-clone"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input."},"help":{"markdown":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input.\n\n<b>References:</b>\n - [https://github.com/microsoft/monaco-editor/issues/801](https://github.com/microsoft/monaco-editor/issues/801)\n","text":"If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input."},"id":"opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport","name":"opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.monaco-editor.security.audit.monaco-hover-htmlsupport"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext."},"help":{"markdown":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext.\n\n<b>References:</b>\n - [https://nodejs.org/api/crypto.html#deciphersetauthtagbuffer-encoding](https://nodejs.org/api/crypto.html#deciphersetauthtagbuffer-encoding)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"The 'final' call of a Decipher object checks the authentication tag in a mode for authenticated encryption. Failing to call 'final' will invalidate all integrity guarantees of the released ciphertext."},"id":"opengrep-rules.javascript.node-crypto.security.aead-no-final","name":"opengrep-rules.javascript.node-crypto.security.aead-no-final","properties":{"precision":"very-high","tags":["CWE-310: CWE CATEGORY: Cryptographic Issues","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.aead-no-final"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead."},"help":{"markdown":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead.\n\n<b>References:</b>\n - [https://nodejs.org/api/crypto.html#cryptocreatecipheralgorithm-password-options](https://nodejs.org/api/crypto.html#cryptocreatecipheralgorithm-password-options)\n - [https://nodejs.org/api/crypto.html#cryptocreatedecipheralgorithm-password-options](https://nodejs.org/api/crypto.html#cryptocreatedecipheralgorithm-password-options)\n","text":"The deprecated functions 'createCipher' and 'createDecipher' generate the same initialization vector every time. For counter modes such as CTR, GCM, or CCM this leads to break of both confidentiality and integrity, if the key is used more than once. Other modes are still affected in their strength, though they're not completely broken. Use 'createCipheriv' or 'createDecipheriv' instead."},"id":"opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv","name":"opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv","properties":{"precision":"very-high","tags":["CWE-1204: Generation of Weak Initialization Vector (IV)","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.create-de-cipher-no-iv"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries."},"help":{"markdown":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries.\n\n<b>References:</b>\n - [https://www.securesystems.de/blog/forging_ciphertexts_under_Galois_Counter_Mode_for_the_Node_js_crypto_module/](https://www.securesystems.de/blog/forging_ciphertexts_under_Galois_Counter_Mode_for_the_Node_js_crypto_module/)\n - [https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options](https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n","text":"The call to 'createDecipheriv' with the Galois Counter Mode (GCM) mode of operation is missing an expected authentication tag length. If the expected authentication tag length is not specified or otherwise checked, the application might be tricked into verifying a shorter-than-expected authentication tag. This can be abused by an attacker to spoof ciphertexts or recover the implicit authentication key of GCM, allowing arbitrary forgeries."},"id":"opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length","name":"opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length","properties":{"precision":"very-high","tags":["CWE-310: CWE CATEGORY: Cryptographic Issues","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-crypto.security.gcm-no-tag-length"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.node-expat.security.audit.expat-xxe","name":"opengrep-rules.javascript.node-expat.security.audit.expat-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.node-expat.security.audit.expat-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret","name":"opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.passport-jwt.security.hardcoded-passport-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.phantom.security.audit.phantom-injection","name":"opengrep-rules.javascript.phantom.security.audit.phantom-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.phantom.security.audit.phantom-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-addinitscript-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-arg-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-evaluate-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"help":{"markdown":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools","name":"opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-exposed-chrome-devtools"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-goto-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection","name":"opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.playwright.security.audit.playwright-setcontent-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"help":{"markdown":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk."},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-goto-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection","name":"opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.puppeteer.security.audit.puppeteer-setcontent-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?"},"help":{"markdown":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?","text":"Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?"},"id":"opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state","name":"opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.react.correctness.hooks.calling-set-state-on-current-state"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `sandbox`."},"help":{"markdown":"Make sure that unverified user data can not reach `sandbox`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `sandbox`."},"id":"opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection","name":"opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sandbox.security.audit.sandbox-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."},"help":{"markdown":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\n\n<b>References:</b>\n - [https://github.com/Leonidas-from-XIV/node-xml2js/issues/415](https://github.com/Leonidas-from-XIV/node-xml2js/issues/415)\n - [https://github.com/isaacs/sax-js](https://github.com/isaacs/sax-js)\n","text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."},"id":"opengrep-rules.javascript.sax.security.audit.sax-xxe","name":"opengrep-rules.javascript.sax.security.audit.sax-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sax.security.audit.sax-xxe"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"help":{"markdown":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n","text":"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."},"id":"opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection","name":"opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.express-sequelize-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""},"help":{"markdown":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n - [https://nodejs.org/api/tls.html#tls_tls_default_min_version](https://nodejs.org/api/tls.html#tls_tls_default_min_version)\n","text":"If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-enforce-tls"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html"},"help":{"markdown":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html\n\n<b>References:</b>\n - [https://sequelize.org/master/manual/raw-queries.html](https://sequelize.org/master/manual/raw-queries.html)\n","text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html"},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-raw-query"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"help":{"markdown":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n","text":"Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"help":{"markdown":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.\n\n<b>References:</b>\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n - [https://nodejs.org/api/tls.html#tls_tls_default_min_version](https://nodejs.org/api/tls.html#tls_tls_default_min_version)\n","text":"TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious."},"id":"opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version","name":"opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.sequelize.security.audit.sequelize-weak-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."},"help":{"markdown":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."},"id":"opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript","name":"opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript","properties":{"precision":"very-high","tags":["CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.serialize-javascript.security.audit.unsafe-serialize-javascript"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If unverified user data can reach the `exec` method it can result in Remote Code Execution"},"help":{"markdown":"If unverified user data can reach the `exec` method it can result in Remote Code Execution\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"If unverified user data can reach the `exec` method it can result in Remote Code Execution"},"id":"opengrep-rules.javascript.shelljs.security.shelljs-exec-injection","name":"opengrep-rules.javascript.shelljs.security.shelljs-exec-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.shelljs.security.shelljs-exec-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential arbitrary code execution, piped to eval"},"help":{"markdown":"Potential arbitrary code execution, piped to eval\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Potential arbitrary code execution, piped to eval"},"id":"opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution","name":"opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.thenify.security.audit.multiargs-code-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.vm2.security.audit.vm2-code-injection","name":"opengrep-rules.javascript.vm2.security.audit.vm2-code-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vm2.security.audit.vm2-code-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Make sure that unverified user data can not reach `vm2`."},"help":{"markdown":"Make sure that unverified user data can not reach `vm2`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Make sure that unverified user data can not reach `vm2`."},"id":"opengrep-rules.javascript.vm2.security.audit.vm2-context-injection","name":"opengrep-rules.javascript.vm2.security.audit.vm2-context-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vm2.security.audit.vm2-context-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content."},"help":{"markdown":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.\n\n<b>References:</b>\n - [https://vuejs.org/v2/guide/syntax.html#Raw-HTML](https://vuejs.org/v2/guide/syntax.html#Raw-HTML)\n","text":"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content."},"id":"opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html","name":"opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.vue.security.audit.xss.templates.avoid-v-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection","name":"opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities"},"help":{"markdown":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities"},"id":"opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection","name":"opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"id":"opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe","name":"opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.javascript.xml2json.security.audit.xml2json-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values."},"help":{"markdown":"Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values.\n\n<b>References:</b>\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html)\n","text":"Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values."},"id":"opengrep-rules.json.aws.security.public-s3-bucket","name":"opengrep-rules.json.aws.security.public-s3-bucket","properties":{"precision":"very-high","tags":["CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.json.aws.security.public-s3-bucket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket."},"help":{"markdown":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\n\n<b>References:</b>\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html)\n","text":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket."},"id":"opengrep-rules.json.aws.security.public-s3-policy-statement","name":"opengrep-rules.json.aws.security.public-s3-policy-statement","properties":{"precision":"very-high","tags":["CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.json.aws.security.public-s3-policy-statement"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`."},"help":{"markdown":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.\n\n<b>References:</b>\n - [https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/](https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/)\n","text":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`."},"id":"opengrep-rules.json.aws.security.wildcard-assume-role","name":"opengrep-rules.json.aws.security.wildcard-assume-role","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.json.aws.security.wildcard-assume-role"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy."},"help":{"markdown":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy."},"id":"opengrep-rules.kotlin.gradle.security.build-gradle-password-hardcoded","name":"opengrep-rules.kotlin.gradle.security.build-gradle-password-hardcoded","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.gradle.security.build-gradle-password-hardcoded"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"help":{"markdown":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"id":"opengrep-rules.kotlin.lang.security.anonymous-ldap-bind","name":"opengrep-rules.kotlin.lang.security.anonymous-ldap-bind","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.anonymous-ldap-bind"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead."},"help":{"markdown":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/704.html](https://cwe.mitre.org/data/definitions/704.html)\n","text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead."},"id":"opengrep-rules.kotlin.lang.security.bad-hexa-conversion","name":"opengrep-rules.kotlin.lang.security.bad-hexa-conversion","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.bad-hexa-conversion"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"id":"opengrep-rules.kotlin.lang.security.command-injection-formatted-runtime-call","name":"opengrep-rules.kotlin.lang.security.command-injection-formatted-runtime-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.command-injection-formatted-runtime-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"help":{"markdown":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"id":"opengrep-rules.kotlin.lang.security.cookie-missing-httponly","name":"opengrep-rules.kotlin.lang.security.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"help":{"markdown":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"id":"opengrep-rules.kotlin.lang.security.cookie-missing-secure-flag","name":"opengrep-rules.kotlin.lang.security.cookie-missing-secure-flag","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.cookie-missing-secure-flag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient instead, which supports TLS1.2."},"help":{"markdown":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient instead, which supports TLS1.2.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient instead, which supports TLS1.2."},"id":"opengrep-rules.kotlin.lang.security.defaulthttpclient-is-deprecated","name":"opengrep-rules.kotlin.lang.security.defaulthttpclient-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.defaulthttpclient-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"help":{"markdown":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"id":"opengrep-rules.kotlin.lang.security.ecb-cipher","name":"opengrep-rules.kotlin.lang.security.ecb-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.ecb-cipher"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different.Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted."},"help":{"markdown":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different.Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/323.html](https://cwe.mitre.org/data/definitions/323.html)\n","text":"GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different.Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted."},"id":"opengrep-rules.kotlin.lang.security.gcm-detection","name":"opengrep-rules.kotlin.lang.security.gcm-detection","properties":{"precision":"very-high","tags":["CWE-323: Reusing a Nonce, Key Pair in Encryption","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.gcm-detection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"id":"opengrep-rules.kotlin.lang.security.no-null-cipher","name":"opengrep-rules.kotlin.lang.security.no-null-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.no-null-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This socket is not encrypted. The traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead"},"help":{"markdown":"This socket is not encrypted. The traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"This socket is not encrypted. The traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead"},"id":"opengrep-rules.kotlin.lang.security.unencrypted-socket","name":"opengrep-rules.kotlin.lang.security.unencrypted-socket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.unencrypted-socket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.kotlin.lang.security.use-of-md5","name":"opengrep-rules.kotlin.lang.security.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.kotlin.lang.security.use-of-sha1","name":"opengrep-rules.kotlin.lang.security.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"help":{"markdown":"RSA keys should be at least 2048 bits based on NIST recommendation.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"id":"opengrep-rules.kotlin.lang.security.use-of-weak-rsa-key","name":"opengrep-rules.kotlin.lang.security.use-of-weak-rsa-key","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.kotlin.lang.security.use-of-weak-rsa-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should not re-raise exceptions using 'raise' because it loses track of where the exception was raised originally, leading to a useless and possibly confusing stack trace. Instead, you should obtain a stack backtrace as soon as the exception is caught using 'try ... with exn -> let trace = Printexc.get_raw_backtrace () in ...', and keep it around until you re-raise the exception using 'Printexc.raise_with_backtrace exn trace'. You must collect the stack backtrace before calling another function which might internally raise and catch exceptions. To avoid false positives from Semgrep, write 'raise (Foo args)' instead of 'let e = Foo args in raise e'."},"help":{"markdown":"You should not re-raise exceptions using 'raise' because it loses track of where the exception was raised originally, leading to a useless and possibly confusing stack trace. Instead, you should obtain a stack backtrace as soon as the exception is caught using 'try ... with exn -> let trace = Printexc.get_raw_backtrace () in ...', and keep it around until you re-raise the exception using 'Printexc.raise_with_backtrace exn trace'. You must collect the stack backtrace before calling another function which might internally raise and catch exceptions. To avoid false positives from Semgrep, write 'raise (Foo args)' instead of 'let e = Foo args in raise e'.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Printexc.html](https://v2.ocaml.org/api/Printexc.html)\n","text":"You should not re-raise exceptions using 'raise' because it loses track of where the exception was raised originally, leading to a useless and possibly confusing stack trace. Instead, you should obtain a stack backtrace as soon as the exception is caught using 'try ... with exn -> let trace = Printexc.get_raw_backtrace () in ...', and keep it around until you re-raise the exception using 'Printexc.raise_with_backtrace exn trace'. You must collect the stack backtrace before calling another function which might internally raise and catch exceptions. To avoid false positives from Semgrep, write 'raise (Foo args)' instead of 'let e = Foo args in raise e'."},"id":"opengrep-rules.ocaml.lang.best-practice.bad-reraise","name":"opengrep-rules.ocaml.lang.best-practice.bad-reraise","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.bad-reraise"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt"},"help":{"markdown":"You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt","text":"You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt"},"id":"opengrep-rules.ocaml.lang.best-practice.hashtbl-find-outside-try","name":"opengrep-rules.ocaml.lang.best-practice.hashtbl-find-outside-try","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.hashtbl-find-outside-try"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should not use List.find outside of a try, or you should use List.find_opt"},"help":{"markdown":"You should not use List.find outside of a try, or you should use List.find_opt","text":"You should not use List.find outside of a try, or you should use List.find_opt"},"id":"opengrep-rules.ocaml.lang.best-practice.list-find-outside-try","name":"opengrep-rules.ocaml.lang.best-practice.list-find-outside-try","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.list-find-outside-try"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Backwards if. Rewrite the code as 'if not $E then $E2'."},"help":{"markdown":"Backwards if. Rewrite the code as 'if not $E then $E2'.","text":"Backwards if. Rewrite the code as 'if not $E then $E2'."},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-backwards-if","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-backwards-if","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-backwards-if"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Comparison to boolean. Just use `not $X`"},"help":{"markdown":"Comparison to boolean. Just use `not $X`","text":"Comparison to boolean. Just use `not $X`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-false","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-false","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-false"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Comparison to boolean. Just use `$X`"},"help":{"markdown":"Comparison to boolean. Just use `$X`","text":"Comparison to boolean. Just use `$X`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-true","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-true","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-bool-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should use `decr`"},"help":{"markdown":"You should use `decr`\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Stdlib.html#VALdecr](https://v2.ocaml.org/api/Stdlib.html#VALdecr)\n - [https://v2.ocaml.org/api/Atomic.html#VALdecr](https://v2.ocaml.org/api/Atomic.html#VALdecr)\n","text":"You should use `decr`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-decr","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-decr","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-decr"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should use `incr`"},"help":{"markdown":"You should use `incr`\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Stdlib.html#VALincr](https://v2.ocaml.org/api/Stdlib.html#VALincr)\n - [https://v2.ocaml.org/api/Atomic.html#VALincr](https://v2.ocaml.org/api/Atomic.html#VALincr)\n","text":"You should use `incr`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-incr","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-incr","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-ref-incr"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use instead `Str.first_chars`"},"help":{"markdown":"Use instead `Str.first_chars`","text":"Use instead `Str.first_chars`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-first-chars","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-first-chars","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-str-first-chars"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use instead `Str.last_chars`"},"help":{"markdown":"Use instead `Str.last_chars`","text":"Use instead `Str.last_chars`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-last-chars","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-last-chars","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-str-last-chars"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use instead `Str.string_after`"},"help":{"markdown":"Use instead `Str.string_after`","text":"Use instead `Str.string_after`"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-string-after","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-str-string-after","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-str-string-after"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Useless else. Just remove the else branch;"},"help":{"markdown":"Useless else. Just remove the else branch;","text":"Useless else. Just remove the else branch;"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-else","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-else","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-else"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Useless sprintf"},"help":{"markdown":"Useless sprintf","text":"Useless sprintf"},"id":"opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-sprintf","name":"opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-sprintf","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.best-practice.ocamllint-useless-sprintf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Pervasives is deprecated and will not be available after 4.10. Use Stdlib."},"help":{"markdown":"Pervasives is deprecated and will not be available after 4.10. Use Stdlib.","text":"Pervasives is deprecated and will not be available after 4.10. Use Stdlib."},"id":"opengrep-rules.ocaml.lang.compatibility.deprecated-pervasives","name":"opengrep-rules.ocaml.lang.compatibility.deprecated-pervasives","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.compatibility.deprecated-pervasives"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Useless if. Both branches are equal."},"help":{"markdown":"Useless if. Both branches are equal.","text":"Useless if. Both branches are equal."},"id":"opengrep-rules.ocaml.lang.correctness.ocamllint-useless-if","name":"opengrep-rules.ocaml.lang.correctness.ocamllint-useless-if","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.ocamllint-useless-if"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You probably want the structural equality operator ="},"help":{"markdown":"You probably want the structural equality operator =\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Stdlib.html#1_Comparisons](https://v2.ocaml.org/api/Stdlib.html#1_Comparisons)\n","text":"You probably want the structural equality operator ="},"id":"opengrep-rules.ocaml.lang.correctness.physical-equal","name":"opengrep-rules.ocaml.lang.correctness.physical-equal","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.physical-equal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You probably want the structural inequality operator <>"},"help":{"markdown":"You probably want the structural inequality operator <>\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Stdlib.html#1_Comparisons](https://v2.ocaml.org/api/Stdlib.html#1_Comparisons)\n","text":"You probably want the structural inequality operator <>"},"id":"opengrep-rules.ocaml.lang.correctness.physical-not-equal","name":"opengrep-rules.ocaml.lang.correctness.physical-not-equal","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.physical-not-equal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"This comparison is useless because the expressions being compared are identical. This is expected to always return the same result, 0, unless your code is really strange."},"help":{"markdown":"This comparison is useless because the expressions being compared are identical. This is expected to always return the same result, 0, unless your code is really strange.","text":"This comparison is useless because the expressions being compared are identical. This is expected to always return the same result, 0, unless your code is really strange."},"id":"opengrep-rules.ocaml.lang.correctness.useless-compare","name":"opengrep-rules.ocaml.lang.correctness.useless-compare","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.useless-compare"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"This is always true. If testing for floating point NaN, use `Float.is_nan` instead."},"help":{"markdown":"This is always true. If testing for floating point NaN, use `Float.is_nan` instead.","text":"This is always true. If testing for floating point NaN, use `Float.is_nan` instead."},"id":"opengrep-rules.ocaml.lang.correctness.useless-equal","name":"opengrep-rules.ocaml.lang.correctness.useless-equal","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.useless-equal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Useless let"},"help":{"markdown":"Useless let","text":"Useless let"},"id":"opengrep-rules.ocaml.lang.correctness.useless-let","name":"opengrep-rules.ocaml.lang.correctness.useless-let","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.correctness.useless-let"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You probably want $X = [], which is faster."},"help":{"markdown":"You probably want $X = [], which is faster.","text":"You probably want $X = [], which is faster."},"id":"opengrep-rules.ocaml.lang.performance.ocamllint-length-list-zero","name":"opengrep-rules.ocaml.lang.performance.ocamllint-length-list-zero","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.performance.ocamllint-length-list-zero"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You probably want $X <> [], which is faster."},"help":{"markdown":"You probably want $X <> [], which is faster.","text":"You probably want $X <> [], which is faster."},"id":"opengrep-rules.ocaml.lang.performance.ocamllint-length-more-than-zero","name":"opengrep-rules.ocaml.lang.performance.ocamllint-length-more-than-zero","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.performance.ocamllint-length-more-than-zero"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'input_line' leaves a '\\r' (CR) character when reading lines from a Windows text file, whose lines end in \"\\r\\n\" (CRLF). This is a problem for any Windows file that is being read either on a Unix-like platform or on Windows in binary mode. If the code already takes care of removing any trailing '\\r' after reading the line, add a '(* nosemgrep *)' comment to disable this warning."},"help":{"markdown":"'input_line' leaves a '\\r' (CR) character when reading lines from a Windows text file, whose lines end in \"\\r\\n\" (CRLF). This is a problem for any Windows file that is being read either on a Unix-like platform or on Windows in binary mode. If the code already takes care of removing any trailing '\\r' after reading the line, add a '(* nosemgrep *)' comment to disable this warning.","text":"'input_line' leaves a '\\r' (CR) character when reading lines from a Windows text file, whose lines end in \"\\r\\n\" (CRLF). This is a problem for any Windows file that is being read either on a Unix-like platform or on Windows in binary mode. If the code already takes care of removing any trailing '\\r' after reading the line, add a '(* nosemgrep *)' comment to disable this warning."},"id":"opengrep-rules.ocaml.lang.portability.broken-input-line","name":"opengrep-rules.ocaml.lang.portability.broken-input-line","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.portability.broken-input-line"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should probably use Filename.get_temp_dirname()."},"help":{"markdown":"You should probably use Filename.get_temp_dirname().","text":"You should probably use Filename.get_temp_dirname()."},"id":"opengrep-rules.ocaml.lang.portability.not-portable-tmp-string","name":"opengrep-rules.ocaml.lang.portability.not-portable-tmp-string","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.portability.not-portable-tmp-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'open_in' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_in_bin' or 'open_in_gen [Open_binary]'. If you really want CRLF-to-LF translations to take place when running on Windows, use 'open_in_gen [Open_text]'."},"help":{"markdown":"'open_in' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_in_bin' or 'open_in_gen [Open_binary]'. If you really want CRLF-to-LF translations to take place when running on Windows, use 'open_in_gen [Open_text]'.","text":"'open_in' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_in_bin' or 'open_in_gen [Open_binary]'. If you really want CRLF-to-LF translations to take place when running on Windows, use 'open_in_gen [Open_text]'."},"id":"opengrep-rules.ocaml.lang.portability.prefer-read-in-binary-mode","name":"opengrep-rules.ocaml.lang.portability.prefer-read-in-binary-mode","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.portability.prefer-read-in-binary-mode"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'open_out' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_out_bin' or 'open_out_gen [Open_binary]'. If you really want LF-to-CRLF translations to take place when running on Windows, use 'open_out_gen [Open_text]'."},"help":{"markdown":"'open_out' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_out_bin' or 'open_out_gen [Open_binary]'. If you really want LF-to-CRLF translations to take place when running on Windows, use 'open_out_gen [Open_text]'.","text":"'open_out' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_out_bin' or 'open_out_gen [Open_binary]'. If you really want LF-to-CRLF translations to take place when running on Windows, use 'open_out_gen [Open_text]'."},"id":"opengrep-rules.ocaml.lang.portability.prefer-write-in-binary-mode","name":"opengrep-rules.ocaml.lang.portability.prefer-write-in-binary-mode","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.portability.prefer-write-in-binary-mode"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Digest uses MD5 and should not be used for security purposes. Consider using SHA256 instead."},"help":{"markdown":"Digest uses MD5 and should not be used for security purposes. Consider using SHA256 instead.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Digest.html](https://v2.ocaml.org/api/Digest.html)\n","text":"Digest uses MD5 and should not be used for security purposes. Consider using SHA256 instead."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-digest","name":"opengrep-rules.ocaml.lang.security.ocamllint-digest","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash (4.12)","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-digest"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Executing external programs might lead to comand or argument injection vulnerabilities."},"help":{"markdown":"Executing external programs might lead to comand or argument injection vulnerabilities.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Unix.html](https://v2.ocaml.org/api/Unix.html)\n","text":"Executing external programs might lead to comand or argument injection vulnerabilities."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-exec","name":"opengrep-rules.ocaml.lang.security.ocamllint-exec","properties":{"precision":"very-high","tags":["CWE-78: OS Command Injection","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When attacker supplied data is passed to Filename.concat directory traversal attacks might be possible."},"help":{"markdown":"When attacker supplied data is passed to Filename.concat directory traversal attacks might be possible.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Filename.html](https://v2.ocaml.org/api/Filename.html)\n","text":"When attacker supplied data is passed to Filename.concat directory traversal attacks might be possible."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-filenameconcat","name":"opengrep-rules.ocaml.lang.security.ocamllint-filenameconcat","properties":{"precision":"very-high","tags":["CWE-35: Path Traversal","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-filenameconcat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Creating a Hashtbl without the optional random number parameter makes it prone to DoS attacks when attackers are able to fill the table with malicious content. Hashtbl.randomize or the R flag in the OCAMLRUNPARAM are other ways to randomize it."},"help":{"markdown":"Creating a Hashtbl without the optional random number parameter makes it prone to DoS attacks when attackers are able to fill the table with malicious content. Hashtbl.randomize or the R flag in the OCAMLRUNPARAM are other ways to randomize it.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Hashtbl.html](https://v2.ocaml.org/api/Hashtbl.html)\n","text":"Creating a Hashtbl without the optional random number parameter makes it prone to DoS attacks when attackers are able to fill the table with malicious content. Hashtbl.randomize or the R flag in the OCAMLRUNPARAM are other ways to randomize it."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-hashtable-dos","name":"opengrep-rules.ocaml.lang.security.ocamllint-hashtable-dos","properties":{"precision":"very-high","tags":["CWE-399: Resource Management Errors (4.12)","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-hashtable-dos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Marshaling is currently not type-safe and can lead to insecure behaviour when untrusted data is marshalled. Marshalling can lead to out-of-bound reads as well."},"help":{"markdown":"Marshaling is currently not type-safe and can lead to insecure behaviour when untrusted data is marshalled. Marshalling can lead to out-of-bound reads as well.\n\n<b>References:</b>\n - [https://eternal.red/2021/secure-ocaml-sandbox/](https://eternal.red/2021/secure-ocaml-sandbox/)\n","text":"Marshaling is currently not type-safe and can lead to insecure behaviour when untrusted data is marshalled. Marshalling can lead to out-of-bound reads as well."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-marshal","name":"opengrep-rules.ocaml.lang.security.ocamllint-marshal","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-marshal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Filename.temp_file might lead to race conditions, since the file could be altered or replaced by a symlink before being opened."},"help":{"markdown":"Filename.temp_file might lead to race conditions, since the file could be altered or replaced by a symlink before being opened.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Filename.html](https://v2.ocaml.org/api/Filename.html)\n","text":"Filename.temp_file might lead to race conditions, since the file could be altered or replaced by a symlink before being opened."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-tempfile","name":"opengrep-rules.ocaml.lang.security.ocamllint-tempfile","properties":{"precision":"very-high","tags":["CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-tempfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Unsafe functions do not perform boundary checks or have other side effects, use with care."},"help":{"markdown":"Unsafe functions do not perform boundary checks or have other side effects, use with care.\n\n<b>References:</b>\n - [https://v2.ocaml.org/api/Bigarray.Array1.html#VALunsafe_get](https://v2.ocaml.org/api/Bigarray.Array1.html#VALunsafe_get)\n - [https://v2.ocaml.org/api/Bytes.html#VALunsafe_to_string](https://v2.ocaml.org/api/Bytes.html#VALunsafe_to_string)\n","text":"Unsafe functions do not perform boundary checks or have other side effects, use with care."},"id":"opengrep-rules.ocaml.lang.security.ocamllint-unsafe","name":"opengrep-rules.ocaml.lang.security.ocamllint-unsafe","properties":{"precision":"very-high","tags":["CWE-242: Use of Inherently Dangerous Function (4.12)","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ocaml.lang.security.ocamllint-unsafe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a Doctrine DBAL query method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a Doctrine DBAL query method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.\n\n<b>References:</b>\n - [https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"Detected string concatenation with a non-literal variable in a Doctrine DBAL query method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."},"id":"opengrep-rules.php.doctrine.security.audit.doctrine-dbal-dangerous-query","name":"opengrep-rules.php.doctrine.security.audit.doctrine-dbal-dangerous-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.doctrine.security.audit.doctrine-dbal-dangerous-query"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."},"help":{"markdown":"`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.\n\n<b>References:</b>\n - [https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","text":"`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."},"id":"opengrep-rules.php.doctrine.security.audit.doctrine-orm-dangerous-query","name":"opengrep-rules.php.doctrine.security.audit.doctrine-orm-dangerous-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.doctrine.security.audit.doctrine-orm-dangerous-query"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling assert with user input is equivalent to eval'ing."},"help":{"markdown":"Calling assert with user input is equivalent to eval'ing.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.assert](https://www.php.net/manual/en/function.assert)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php)\n","text":"Calling assert with user input is equivalent to eval'ing."},"id":"opengrep-rules.php.lang.security.assert-use","name":"opengrep-rules.php.lang.security.assert-use","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.assert-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling assert with user input is equivalent to eval'ing."},"help":{"markdown":"Calling assert with user input is equivalent to eval'ing.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.assert](https://www.php.net/manual/en/function.assert)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php)\n","text":"Calling assert with user input is equivalent to eval'ing."},"id":"opengrep-rules.php.lang.security.audit.assert-use-audit","name":"opengrep-rules.php.lang.security.audit.assert-use-audit","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.audit.assert-use-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`."},"help":{"markdown":"The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.openssl-decrypt.php](https://www.php.net/manual/en/function.openssl-decrypt.php)\n","text":"The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`."},"id":"opengrep-rules.php.lang.security.audit.openssl-decrypt-validate","name":"opengrep-rules.php.lang.security.audit.openssl-decrypt-validate","properties":{"precision":"very-high","tags":["CWE-252: Unchecked Return Value","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.audit.openssl-decrypt-validate"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Backticks use may lead to command injection vulnerabilities."},"help":{"markdown":"Backticks use may lead to command injection vulnerabilities.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/language.operators.execution.php](https://www.php.net/manual/en/language.operators.execution.php)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/BackticksSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/BackticksSniff.php)\n","text":"Backticks use may lead to command injection vulnerabilities."},"id":"opengrep-rules.php.lang.security.backticks-use","name":"opengrep-rules.php.lang.security.backticks-use","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.backticks-use"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens."},"help":{"markdown":"The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens.\n\n<b>References:</b>\n - [https://www.php.net/base_convert](https://www.php.net/base_convert)\n - [https://www.sjoerdlangkemper.nl/2017/03/15/dont-use-base-convert-on-random-tokens/](https://www.sjoerdlangkemper.nl/2017/03/15/dont-use-base-convert-on-random-tokens/)\n","text":"The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens."},"id":"opengrep-rules.php.lang.security.base-convert-loses-precision","name":"opengrep-rules.php.lang.security.base-convert-loses-precision","properties":{"precision":"very-high","tags":["CWE-190: Integer Overflow or Wraparound","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.base-convert-loses-precision"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)"},"help":{"markdown":"SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)\n\n<b>References:</b>\n - [https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/](https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/)\n","text":"SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)"},"id":"opengrep-rules.php.lang.security.curl-ssl-verifypeer-off","name":"opengrep-rules.php.lang.security.curl-ssl-verifypeer-off","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.curl-ssl-verifypeer-off"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Evaluating non-constant commands. This can lead to command injection."},"help":{"markdown":"Evaluating non-constant commands. This can lead to command injection.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.eval](https://www.php.net/manual/en/function.eval)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php)\n","text":"Evaluating non-constant commands. This can lead to command injection."},"id":"opengrep-rules.php.lang.security.eval-use","name":"opengrep-rules.php.lang.security.eval-use","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.eval-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Executing non-constant commands. This can lead to command injection."},"help":{"markdown":"Executing non-constant commands. This can lead to command injection.\n\n<b>References:</b>\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php)\n","text":"Executing non-constant commands. This can lead to command injection."},"id":"opengrep-rules.php.lang.security.exec-use","name":"opengrep-rules.php.lang.security.exec-use","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.exec-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables."},"help":{"markdown":"Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes](https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes)\n","text":"Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables."},"id":"opengrep-rules.php.lang.security.extract-user-data","name":"opengrep-rules.php.lang.security.extract-user-data","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.extract-user-data"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."},"help":{"markdown":"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.include.php](https://www.php.net/manual/en/function.include.php)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php)\n - [https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion](https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion)\n","text":"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."},"id":"opengrep-rules.php.lang.security.file-inclusion","name":"opengrep-rules.php.lang.security.file-inclusion","properties":{"precision":"very-high","tags":["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.file-inclusion"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"FTP allows for unencrypted file transfers. Consider using an encrypted alternative."},"help":{"markdown":"FTP allows for unencrypted file transfers. Consider using an encrypted alternative.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/intro.ftp.php](https://www.php.net/manual/en/intro.ftp.php)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/FringeFunctionsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/FringeFunctionsSniff.php)\n","text":"FTP allows for unencrypted file transfers. Consider using an encrypted alternative."},"id":"opengrep-rules.php.lang.security.ftp-use","name":"opengrep-rules.php.lang.security.ftp-use","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.ftp-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."},"help":{"markdown":"`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.htmlentities.php](https://www.php.net/manual/en/function.htmlentities.php)\n - [https://www.php.net/manual/en/reserved.variables.request.php](https://www.php.net/manual/en/reserved.variables.request.php)\n - [https://www.php.net/manual/en/reserved.variables.post.php](https://www.php.net/manual/en/reserved.variables.post.php)\n - [https://www.php.net/manual/en/reserved.variables.get.php](https://www.php.net/manual/en/reserved.variables.get.php)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."},"id":"opengrep-rules.php.lang.security.injection.echoed-request","name":"opengrep-rules.php.lang.security.injection.echoed-request","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.echoed-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."},"help":{"markdown":"`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.htmlentities.php](https://www.php.net/manual/en/function.htmlentities.php)\n - [https://www.php.net/manual/en/reserved.variables.request.php](https://www.php.net/manual/en/reserved.variables.request.php)\n - [https://www.php.net/manual/en/reserved.variables.post.php](https://www.php.net/manual/en/reserved.variables.post.php)\n - [https://www.php.net/manual/en/reserved.variables.get.php](https://www.php.net/manual/en/reserved.variables.get.php)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."},"id":"opengrep-rules.php.lang.security.injection.printed-request","name":"opengrep-rules.php.lang.security.injection.printed-request","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.printed-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Callable based on user input risks remote code execution."},"help":{"markdown":"Callable based on user input risks remote code execution.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/language.types.callable.php](https://www.php.net/manual/en/language.types.callable.php)\n","text":"Callable based on user input risks remote code execution."},"id":"opengrep-rules.php.lang.security.injection.tainted-callable","name":"opengrep-rules.php.lang.security.injection.tainted-callable","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-callable"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User input is passed to a function that executes a shell command. This can lead to remote code execution."},"help":{"markdown":"User input is passed to a function that executes a shell command. This can lead to remote code execution.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"User input is passed to a function that executes a shell command. This can lead to remote code execution."},"id":"opengrep-rules.php.lang.security.injection.tainted-exec","name":"opengrep-rules.php.lang.security.injection.tainted-exec","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"File name based on user input risks server-side request forgery."},"help":{"markdown":"File name based on user input risks server-side request forgery.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n","text":"File name based on user input risks server-side request forgery."},"id":"opengrep-rules.php.lang.security.injection.tainted-filename","name":"opengrep-rules.php.lang.security.injection.tainted-filename","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-filename"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application."},"help":{"markdown":"<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application."},"id":"opengrep-rules.php.lang.security.injection.tainted-object-instantiation","name":"opengrep-rules.php.lang.security.injection.tainted-object-instantiation","properties":{"precision":"very-high","tags":["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-object-instantiation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues."},"help":{"markdown":"Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues.\n\n<b>References:</b>\n - [https://en.wikipedia.org/wiki/Session_poisoning](https://en.wikipedia.org/wiki/Session_poisoning)\n","text":"Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues."},"id":"opengrep-rules.php.lang.security.injection.tainted-session","name":"opengrep-rules.php.lang.security.injection.tainted-session","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-session"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library."},"id":"opengrep-rules.php.lang.security.injection.tainted-sql-string","name":"opengrep-rules.php.lang.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.php.lang.security.injection.tainted-url-host","name":"opengrep-rules.php.lang.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP."},"help":{"markdown":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.ldap-bind.php](https://www.php.net/manual/en/function.ldap-bind.php)\n","text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP."},"id":"opengrep-rules.php.lang.security.ldap-bind-without-password","name":"opengrep-rules.php.lang.security.ldap-bind-without-password","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.ldap-bind-without-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling mb_ereg_replace with user input in the options can lead to arbitrary code execution. The eval modifier (`e`) evaluates the replacement argument as code."},"help":{"markdown":"Calling mb_ereg_replace with user input in the options can lead to arbitrary code execution. The eval modifier (`e`) evaluates the replacement argument as code.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.mb-ereg-replace.php](https://www.php.net/manual/en/function.mb-ereg-replace.php)\n - [https://www.php.net/manual/en/function.mb-regex-set-options.php](https://www.php.net/manual/en/function.mb-regex-set-options.php)\n","text":"Calling mb_ereg_replace with user input in the options can lead to arbitrary code execution. The eval modifier (`e`) evaluates the replacement argument as code."},"id":"opengrep-rules.php.lang.security.mb-ereg-replace-eval","name":"opengrep-rules.php.lang.security.mb-ereg-replace-eval","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.mb-ereg-replace-eval"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL."},"help":{"markdown":"Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/intro.mcrypt.php](https://www.php.net/manual/en/intro.mcrypt.php)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php)\n","text":"Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL."},"id":"opengrep-rules.php.lang.security.mcrypt-use","name":"opengrep-rules.php.lang.security.mcrypt-use","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.mcrypt-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues"},"help":{"markdown":"Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues\n\n<b>References:</b>\n - [https://www.php.net/manual/en/types.comparisons.php](https://www.php.net/manual/en/types.comparisons.php)\n - [https://www.whitehatsec.com/blog/magic-hashes/](https://www.whitehatsec.com/blog/magic-hashes/)\n","text":"Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues"},"id":"opengrep-rules.php.lang.security.md5-loose-equality","name":"opengrep-rules.php.lang.security.md5-loose-equality","properties":{"precision":"very-high","tags":["CWE-697: Incorrect Comparison","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.md5-loose-equality"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://www.php.net/password_hash](https://www.php.net/password_hash)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`."},"id":"opengrep-rules.php.lang.security.md5-used-as-password","name":"opengrep-rules.php.lang.security.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.md5-used-as-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data."},"help":{"markdown":"Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data.\n\n<b>References:</b>\n - [https://csrc.nist.gov/publications/detail/sp/800-38a/final](https://csrc.nist.gov/publications/detail/sp/800-38a/final)\n","text":"Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data."},"id":"opengrep-rules.php.lang.security.openssl-cbc-static-iv","name":"opengrep-rules.php.lang.security.openssl-cbc-static-iv","properties":{"precision":"very-high","tags":["CWE-329: Generation of Predictable IV with CBC Mode","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.openssl-cbc-static-iv"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"help":{"markdown":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.\n\n<b>References:</b>\n - [https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin](https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)\n","text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"id":"opengrep-rules.php.lang.security.php-permissive-cors","name":"opengrep-rules.php.lang.security.php-permissive-cors","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.php-permissive-cors"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function $FUNCS with payload $DATA"},"help":{"markdown":"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function $FUNCS with payload $DATA\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function $FUNCS with payload $DATA"},"id":"opengrep-rules.php.lang.security.php-ssrf","name":"opengrep-rules.php.lang.security.php-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.php-ssrf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The 'phpinfo' function may reveal sensitive information about your environment."},"help":{"markdown":"The 'phpinfo' function may reveal sensitive information about your environment.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.phpinfo](https://www.php.net/manual/en/function.phpinfo)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php)\n","text":"The 'phpinfo' function may reveal sensitive information about your environment."},"id":"opengrep-rules.php.lang.security.phpinfo-use","name":"opengrep-rules.php.lang.security.phpinfo-use","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.phpinfo-use"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain."},"help":{"markdown":"Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/reserved.variables.server.php](https://www.php.net/manual/en/reserved.variables.server.php)\n - [https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html](https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html)\n","text":"Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain."},"id":"opengrep-rules.php.lang.security.redirect-to-request-uri","name":"opengrep-rules.php.lang.security.redirect-to-request-uri","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.redirect-to-request-uri"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command."},"help":{"markdown":"Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.\n\n<b>References:</b>\n - [https://www.stackhawk.com/blog/php-command-injection/](https://www.stackhawk.com/blog/php-command-injection/)\n - [https://brightsec.com/blog/code-injection-php/](https://brightsec.com/blog/code-injection-php/)\n - [https://www.acunetix.com/websitesecurity/php-security-2/](https://www.acunetix.com/websitesecurity/php-security-2/)\n","text":"Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command."},"id":"opengrep-rules.php.lang.security.tainted-exec","name":"opengrep-rules.php.lang.security.tainted-exec","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.tainted-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"help":{"markdown":"Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.unlink](https://www.php.net/manual/en/function.unlink)\n - [https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html](https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html)\n","text":"Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"id":"opengrep-rules.php.lang.security.unlink-use","name":"opengrep-rules.php.lang.security.unlink-use","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.unlink-use"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers)."},"help":{"markdown":"Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).\n\n<b>References:</b>\n - [https://www.php.net/manual/en/function.unserialize.php](https://www.php.net/manual/en/function.unserialize.php)\n - [https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html](https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html)\n","text":"Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers)."},"id":"opengrep-rules.php.lang.security.unserialize-use","name":"opengrep-rules.php.lang.security.unserialize-use","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.unserialize-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected usage of weak crypto function. Consider using stronger alternatives."},"help":{"markdown":"Detected usage of weak crypto function. Consider using stronger alternatives.\n\n<b>References:</b>\n - [https://www.php.net/manual/en/book.sodium.php](https://www.php.net/manual/en/book.sodium.php)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php)\n","text":"Detected usage of weak crypto function. Consider using stronger alternatives."},"id":"opengrep-rules.php.lang.security.weak-crypto","name":"opengrep-rules.php.lang.security.weak-crypto","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.lang.security.weak-crypto"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an instance setting the APP_DEBUG environment variable to true. In your production environment, this should always be false. Otherwise, you risk exposing sensitive configuration values to potential attackers. Instead, set this to false."},"help":{"markdown":"Found an instance setting the APP_DEBUG environment variable to true. In your production environment, this should always be false. Otherwise, you risk exposing sensitive configuration values to potential attackers. Instead, set this to false.\n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n - [https://laravel.com/docs/9.x/configuration](https://laravel.com/docs/9.x/configuration)\n","text":"Found an instance setting the APP_DEBUG environment variable to true. In your production environment, this should always be false. Otherwise, you risk exposing sensitive configuration values to potential attackers. Instead, set this to false."},"id":"opengrep-rules.php.laravel.security.laravel-active-debug-code","name":"opengrep-rules.php.laravel.security.laravel-active-debug-code","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-active-debug-code"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation."},"help":{"markdown":"HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.\n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation."},"id":"opengrep-rules.php.laravel.security.laravel-api-route-sql-injection","name":"opengrep-rules.php.laravel.security.laravel-api-route-sql-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-api-route-sql-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a form executing a state-changing HTTP method `$METHOD` to route definition `$...ROUTE` without a Laravel CSRF decorator or explicit CSRF token implementation. If this form modifies sensitive state this will open your application to Cross-Site Request Forgery (CSRF) attacks."},"help":{"markdown":"Detected a form executing a state-changing HTTP method `$METHOD` to route definition `$...ROUTE` without a Laravel CSRF decorator or explicit CSRF token implementation. If this form modifies sensitive state this will open your application to Cross-Site Request Forgery (CSRF) attacks.\n\n<b>References:</b>\n - [https://laravel.com/docs/9.x/csrf](https://laravel.com/docs/9.x/csrf)\n","text":"Detected a form executing a state-changing HTTP method `$METHOD` to route definition `$...ROUTE` without a Laravel CSRF decorator or explicit CSRF token implementation. If this form modifies sensitive state this will open your application to Cross-Site Request Forgery (CSRF) attacks."},"id":"opengrep-rules.php.laravel.security.laravel-blade-form-missing-csrf","name":"opengrep-rules.php.laravel.security.laravel-blade-form-missing-csrf","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-blade-form-missing-csrf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a configuration file where the HttpOnly attribute is not set to true. Setting `http_only` to true makes sure that your cookies are inaccessible from Javascript, which mitigates XSS attacks. Instead, set the 'http_only' like so: `http_only` => true "},"help":{"markdown":"Found a configuration file where the HttpOnly attribute is not set to true. Setting `http_only` to true makes sure that your cookies are inaccessible from Javascript, which mitigates XSS attacks. Instead, set the 'http_only' like so: `http_only` => true \n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Found a configuration file where the HttpOnly attribute is not set to true. Setting `http_only` to true makes sure that your cookies are inaccessible from Javascript, which mitigates XSS attacks. Instead, set the 'http_only' like so: `http_only` => true "},"id":"opengrep-rules.php.laravel.security.laravel-cookie-http-only","name":"opengrep-rules.php.laravel.security.laravel-cookie-http-only","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-cookie-http-only"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a configuration file where the lifetime attribute is over 30 minutes."},"help":{"markdown":"Found a configuration file where the lifetime attribute is over 30 minutes.\n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Found a configuration file where the lifetime attribute is over 30 minutes."},"id":"opengrep-rules.php.laravel.security.laravel-cookie-long-timeout","name":"opengrep-rules.php.laravel.security.laravel-cookie-long-timeout","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-cookie-long-timeout"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a configuration file where the domain attribute is not set to null. It is recommended (unless you are using sub-domain route registrations) to set this attribute to null so that only the same origin can set the cookie, thus protecting your cookies. "},"help":{"markdown":"Found a configuration file where the domain attribute is not set to null. It is recommended (unless you are using sub-domain route registrations) to set this attribute to null so that only the same origin can set the cookie, thus protecting your cookies. \n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Found a configuration file where the domain attribute is not set to null. It is recommended (unless you are using sub-domain route registrations) to set this attribute to null so that only the same origin can set the cookie, thus protecting your cookies. "},"id":"opengrep-rules.php.laravel.security.laravel-cookie-null-domain","name":"opengrep-rules.php.laravel.security.laravel-cookie-null-domain","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-cookie-null-domain"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a configuration file where the same_site attribute is not set to 'lax' or 'strict'. Setting 'same_site' to 'lax' or 'strict' restricts cookies to a first-party or same-site context, which will protect your cookies and prevent CSRF."},"help":{"markdown":"Found a configuration file where the same_site attribute is not set to 'lax' or 'strict'. Setting 'same_site' to 'lax' or 'strict' restricts cookies to a first-party or same-site context, which will protect your cookies and prevent CSRF.\n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Found a configuration file where the same_site attribute is not set to 'lax' or 'strict'. Setting 'same_site' to 'lax' or 'strict' restricts cookies to a first-party or same-site context, which will protect your cookies and prevent CSRF."},"id":"opengrep-rules.php.laravel.security.laravel-cookie-same-site","name":"opengrep-rules.php.laravel.security.laravel-cookie-same-site","properties":{"precision":"very-high","tags":["CWE-1275: Sensitive Cookie with Improper SameSite Attribute","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-cookie-same-site"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a configuration file where the secure attribute is not set to 'true'. Setting 'secure' to 'true' prevents the client from transmitting the cookie over unencrypted channels and therefore prevents cookies from being stolen through man in the middle attacks. "},"help":{"markdown":"Found a configuration file where the secure attribute is not set to 'true'. Setting 'secure' to 'true' prevents the client from transmitting the cookie over unencrypted channels and therefore prevents cookies from being stolen through man in the middle attacks. \n\n<b>References:</b>\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Found a configuration file where the secure attribute is not set to 'true'. Setting 'secure' to 'true' prevents the client from transmitting the cookie over unencrypted channels and therefore prevents cookies from being stolen through man in the middle attacks. "},"id":"opengrep-rules.php.laravel.security.laravel-cookie-secure-set","name":"opengrep-rules.php.laravel.security.laravel-cookie-secure-set","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-cookie-secure-set"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Setting `$guarded` to an empty array allows mass assignment to every property in a Laravel model. This explicitly overrides Eloquent's safe-by-default mass assignment protections."},"help":{"markdown":"Setting `$guarded` to an empty array allows mass assignment to every property in a Laravel model. This explicitly overrides Eloquent's safe-by-default mass assignment protections.\n\n<b>References:</b>\n - [https://laravel.com/docs/9.x/eloquent#allowing-mass-assignment](https://laravel.com/docs/9.x/eloquent#allowing-mass-assignment)\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n","text":"Setting `$guarded` to an empty array allows mass assignment to every property in a Laravel model. This explicitly overrides Eloquent's safe-by-default mass assignment protections."},"id":"opengrep-rules.php.laravel.security.laravel-dangerous-model-construction","name":"opengrep-rules.php.laravel.security.laravel-dangerous-model-construction","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-dangerous-model-construction"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements."},"help":{"markdown":"Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.\n\n<b>References:</b>\n - [https://laravel.com/docs/8.x/queries](https://laravel.com/docs/8.x/queries)\n","text":"Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements."},"id":"opengrep-rules.php.laravel.security.laravel-sql-injection","name":"opengrep-rules.php.laravel.security.laravel-sql-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-sql-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection."},"help":{"markdown":"Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.\n\n<b>References:</b>\n - [https://laravel.com/docs/9.x/validation#rule-unique](https://laravel.com/docs/9.x/validation#rule-unique)\n","text":"Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection."},"id":"opengrep-rules.php.laravel.security.laravel-unsafe-validator","name":"opengrep-rules.php.laravel.security.laravel-unsafe-validator","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.laravel.security.laravel-unsafe-validator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CSRF protection is disabled for this configuration. This is a security risk. Make sure that it is safe or consider setting `csrf_protection` property to `true`."},"help":{"markdown":"CSRF protection is disabled for this configuration. This is a security risk. Make sure that it is safe or consider setting `csrf_protection` property to `true`.\n\n<b>References:</b>\n - [https://symfony.com/doc/current/security/csrf.html](https://symfony.com/doc/current/security/csrf.html)\n","text":"CSRF protection is disabled for this configuration. This is a security risk. Make sure that it is safe or consider setting `csrf_protection` property to `true`."},"id":"opengrep-rules.php.symfony.security.audit.symfony-csrf-protection-disabled","name":"opengrep-rules.php.symfony.security.audit.symfony-csrf-protection-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.symfony.security.audit.symfony-csrf-protection-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs."},"help":{"markdown":"The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs.\n\n<b>References:</b>\n - [https://symfony.com/doc/current/controller.html#redirecting](https://symfony.com/doc/current/controller.html#redirecting)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs."},"id":"opengrep-rules.php.symfony.security.audit.symfony-non-literal-redirect","name":"opengrep-rules.php.symfony.security.audit.symfony-non-literal-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.symfony.security.audit.symfony-non-literal-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"help":{"markdown":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.\n\n<b>References:</b>\n - [https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin](https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)\n","text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"id":"opengrep-rules.php.symfony.security.audit.symfony-permissive-cors","name":"opengrep-rules.php.symfony.security.audit.symfony-permissive-cors","properties":{"precision":"very-high","tags":["CWE-346: Origin Validation Error","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.symfony.security.audit.symfony-permissive-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These hooks allow the developer to handle the custom AJAX endpoints.\"wp_ajax_$action\" hook get fires for any authenticated user and \"wp_ajax_nopriv_$action\" hook get fires for non-authenticated users."},"help":{"markdown":"These hooks allow the developer to handle the custom AJAX endpoints.\"wp_ajax_$action\" hook get fires for any authenticated user and \"wp_ajax_nopriv_$action\" hook get fires for non-authenticated users.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#authorisation](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#authorisation)\n - [https://developer.wordpress.org/reference/hooks/wp_ajax_action/](https://developer.wordpress.org/reference/hooks/wp_ajax_action/)\n","text":"These hooks allow the developer to handle the custom AJAX endpoints.\"wp_ajax_$action\" hook get fires for any authenticated user and \"wp_ajax_nopriv_$action\" hook get fires for non-authenticated users."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-ajax-no-auth-and-auth-hooks-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-ajax-no-auth-and-auth-hooks-audit","properties":{"precision":"very-high","tags":["CWE-285: Improper Authorization","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-ajax-no-auth-and-auth-hooks-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These are some of the patterns used for authorisation. Look properly if the authorisation is proper or not."},"help":{"markdown":"These are some of the patterns used for authorisation. Look properly if the authorisation is proper or not.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#authorisation](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#authorisation)\n","text":"These are some of the patterns used for authorisation. Look properly if the authorisation is proper or not."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-authorisation-checks-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-authorisation-checks-audit","properties":{"precision":"very-high","tags":["CWE-285: Improper Authorization","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-authorisation-checks-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These functions can lead to code injection if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"help":{"markdown":"These functions can lead to code injection if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#php-code-execution](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#php-code-execution)\n","text":"These functions can lead to code injection if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-code-execution-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-code-execution-audit","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-code-execution-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These functions can lead to command execution if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"help":{"markdown":"These functions can lead to command execution if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#command-execution](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#command-execution)\n","text":"These functions can lead to command execution if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-command-execution-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-command-execution-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-command-execution-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Passing false or 0 as the third argument to this function will not cause the script to die, making the check useless."},"help":{"markdown":"Passing false or 0 as the third argument to this function will not cause the script to die, making the check useless.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#cross-site-request-forgery-csrf](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#cross-site-request-forgery-csrf)\n - [https://developer.wordpress.org/reference/functions/check_ajax_referer/](https://developer.wordpress.org/reference/functions/check_ajax_referer/)\n","text":"Passing false or 0 as the third argument to this function will not cause the script to die, making the check useless."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-csrf-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-csrf-audit","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-csrf-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These functions can be used to read to content of the files if the data inside is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"help":{"markdown":"These functions can be used to read to content of the files if the data inside is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-download](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-download)\n","text":"These functions can be used to read to content of the files if the data inside is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-download-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-download-audit","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-file-download-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These functions can lead to Local File Inclusion (LFI) or Remote File Inclusion (RFI) if the data inside is user-controlled. Validate the data properly before passing it to these functions."},"help":{"markdown":"These functions can lead to Local File Inclusion (LFI) or Remote File Inclusion (RFI) if the data inside is user-controlled. Validate the data properly before passing it to these functions.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-inclusion](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-inclusion)\n","text":"These functions can lead to Local File Inclusion (LFI) or Remote File Inclusion (RFI) if the data inside is user-controlled. Validate the data properly before passing it to these functions."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-inclusion-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-inclusion-audit","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","CWE-73: The software allows user input to control or influence paths of file names that are used in filesystem operations.","CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-file-inclusion-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These functions can be used to delete the files if the data inside the functions are user controlled. Use these functions carefully."},"help":{"markdown":"These functions can be used to delete the files if the data inside the functions are user controlled. Use these functions carefully.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-manipulation](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#file-manipulation)\n","text":"These functions can be used to delete the files if the data inside the functions are user controlled. Use these functions carefully."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-manipulation-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-file-manipulation-audit","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","CWE-73: The software allows user input to control or influence paths of file names that are used in filesystem operations.","CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-file-manipulation-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This function can be used to redirect to user supplied URLs. If user input is not sanitised or validated, this could lead to Open Redirect vulnerabilities. Use \"wp_safe_redirect()\" to prevent this kind of attack."},"help":{"markdown":"This function can be used to redirect to user supplied URLs. If user input is not sanitised or validated, this could lead to Open Redirect vulnerabilities. Use \"wp_safe_redirect()\" to prevent this kind of attack.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#open-redirect](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#open-redirect)\n - [https://developer.wordpress.org/reference/functions/wp_safe_redirect/](https://developer.wordpress.org/reference/functions/wp_safe_redirect/)\n","text":"This function can be used to redirect to user supplied URLs. If user input is not sanitised or validated, this could lead to Open Redirect vulnerabilities. Use \"wp_safe_redirect()\" to prevent this kind of attack."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-open-redirect-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-open-redirect-audit","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-open-redirect-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If the data used inside the patterns are directly used without proper sanitization, then this could lead to PHP Object Injection. Do not use these function with user-supplied input, use JSON functions instead."},"help":{"markdown":"If the data used inside the patterns are directly used without proper sanitization, then this could lead to PHP Object Injection. Do not use these function with user-supplied input, use JSON functions instead.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#php-object-injection](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#php-object-injection)\n - [https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection](https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection)\n","text":"If the data used inside the patterns are directly used without proper sanitization, then this could lead to PHP Object Injection. Do not use these function with user-supplied input, use JSON functions instead."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-php-object-injection-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-php-object-injection-audit","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-php-object-injection-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected unsafe API methods. This could lead to SQL Injection if the used variable in the functions are user controlled and not properly escaped or sanitized. In order to prevent SQL Injection, use safe api methods like \"$wpdb->prepare\" properly or escape/sanitize the data properly."},"help":{"markdown":"Detected unsafe API methods. This could lead to SQL Injection if the used variable in the functions are user controlled and not properly escaped or sanitized. In order to prevent SQL Injection, use safe api methods like \"$wpdb->prepare\" properly or escape/sanitize the data properly.\n\n<b>References:</b>\n - [https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#sql-injection](https://github.com/wpscanteam/wpscan/wiki/WordPress-Plugin-Security-Testing-Cheat-Sheet#sql-injection)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected unsafe API methods. This could lead to SQL Injection if the used variable in the functions are user controlled and not properly escaped or sanitized. In order to prevent SQL Injection, use safe api methods like \"$wpdb->prepare\" properly or escape/sanitize the data properly."},"id":"opengrep-rules.php.wordpress-plugins.security.audit.wp-sql-injection-audit","name":"opengrep-rules.php.wordpress-plugins.security.audit.wp-sql-injection-audit","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.php.wordpress-plugins.security.audit.wp-sql-injection-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"help":{"markdown":"Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate](https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate)\n","text":"Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"help":{"markdown":"Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle](https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle)\n","text":"Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","HIGH CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."},"help":{"markdown":"Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.\n\n<b>References:</b>\n - [https://godoc.org/github.com/jlaffaye/ftp#Dial](https://godoc.org/github.com/jlaffaye/ftp#Dial)\n - [https://github.com/jlaffaye/ftp](https://github.com/jlaffaye/ftp)\n","text":"Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.ftp-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.ftp-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.ftp-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"help":{"markdown":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n<b>References:</b>\n - [https://github.com/parnurzeal/gorequest](https://github.com/parnurzeal/gorequest)\n","text":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"help":{"markdown":"Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n<b>References:</b>\n - [https://godoc.org/github.com/levigross/grequests#DoRegularRequest](https://godoc.org/github.com/levigross/grequests#DoRegularRequest)\n - [https://github.com/levigross/grequests](https://github.com/levigross/grequests)\n","text":"Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://golang.org/pkg/net/http/#NewRequest](https://golang.org/pkg/net/http/#NewRequest)\n","text":"Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-customized-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-customized-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-customized-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://golang.org/pkg/net/http/#Get](https://golang.org/pkg/net/http/#Get)\n","text":"Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"help":{"markdown":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n<b>References:</b>\n - [https://godoc.org/github.com/dghubble/sling#Sling.Add](https://godoc.org/github.com/dghubble/sling#Sling.Add)\n - [https://github.com/dghubble/sling](https://github.com/dghubble/sling)\n","text":"Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.sling-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.sling-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.sling-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks."},"help":{"markdown":"Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks.\n\n<b>References:</b>\n - [https://godoc.org/github.com/reiver/go-telnet](https://godoc.org/github.com/reiver/go-telnet)\n","text":"Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks."},"id":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.telnet-request","name":"opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.telnet-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.go-stdlib.telnet-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"help":{"markdown":"Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate](https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate)\n - [https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1](https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1)\n","text":"Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification","name":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."},"help":{"markdown":"Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.\n\n<b>References:</b>\n - [https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-](https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-)\n","text":"Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-ftp-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-ftp-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-ftp-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-)\n - [https://www.baeldung.com/rest-template](https://www.baeldung.com/rest-template)\n","text":"Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-spring.spring-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"help":{"markdown":"Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n<b>References:</b>\n - [https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-](https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-)\n - [https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1](https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1)\n","text":"Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"help":{"markdown":"Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle](https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle)\n","text":"Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"help":{"markdown":"Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications](https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications)\n","text":"Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."},"help":{"markdown":"Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.\n\n<b>References:</b>\n - [https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server](https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server)\n - [https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html](https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html)\n","text":"Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.ftp-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.ftp-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.ftp-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://hc.apache.org/httpcomponents-client-ga/quickstart.html](https://hc.apache.org/httpcomponents-client-ga/quickstart.html)\n","text":"Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.http-components-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.http-components-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.http-components-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://openjdk.java.net/groups/net/httpclient/intro.html](https://openjdk.java.net/groups/net/httpclient/intro.html)\n","text":"Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS."},"help":{"markdown":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n\n<b>References:</b>\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n","text":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS."},"help":{"markdown":"Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n\n<b>References:</b>\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n","text":"Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure transport rules to catch socket connections to http, telnet, and ftp servers. This is dangerous because these are protocols that do not encrypt traffic."},"help":{"markdown":"Insecure transport rules to catch socket connections to http, telnet, and ftp servers. This is dangerous because these are protocols that do not encrypt traffic.\n\n<b>References:</b>\n - [https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html](https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html)\n","text":"Insecure transport rules to catch socket connections to http, telnet, and ftp servers. This is dangerous because these are protocols that do not encrypt traffic."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.socket-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.socket-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.socket-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"help":{"markdown":"Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n<b>References:</b>\n - [https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html](https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html)\n","text":"Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.telnet-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.telnet-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.telnet-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection."},"help":{"markdown":"Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection.\n\n<b>References:</b>\n - [https://www.oracle.com/java/technologies/javase/tlsreadme.html](https://www.oracle.com/java/technologies/javase/tlsreadme.html)\n","text":"Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"help":{"markdown":"Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n<b>References:</b>\n - [https://kong.github.io/unirest-java/#requests](https://kong.github.io/unirest-java/#requests)\n","text":"Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."},"id":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used."},"help":{"markdown":"Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.\n\n<b>References:</b>\n - [https://nodejs.org/api/https.html#https_https_request_options_callback](https://nodejs.org/api/https.html#https_https_request_options_callback)\n - [https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100](https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100)\n","text":"Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"help":{"markdown":"Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n<b>References:</b>\n - [https://us-cert.cisa.gov/ncas/alerts/TA14-290A](https://us-cert.cisa.gov/ncas/alerts/TA14-290A)\n - [https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs](https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs)\n - [https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)\n","text":"Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"help":{"markdown":"Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n<b>References:</b>\n - [https://us-cert.cisa.gov/ncas/alerts/TA14-290A](https://us-cert.cisa.gov/ncas/alerts/TA14-290A)\n - [https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs](https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs)\n - [https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)\n","text":"Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module."},"help":{"markdown":"Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/ftp](https://www.npmjs.com/package/ftp)\n - [https://openbase.io/js/ftp](https://openbase.io/js/ftp)\n","text":"Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.ftp-request","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.ftp-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.ftp-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."},"help":{"markdown":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.\n\n<b>References:</b>\n - [https://nodejs.org/api/http.html#http_http_request_options_callback](https://nodejs.org/api/http.html#http_http_request_options_callback)\n","text":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got."},"help":{"markdown":"Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\n - [https://www.npmjs.com/package/got](https://www.npmjs.com/package/got)\n - [https://www.npmjs.com/package/node-rest-client](https://www.npmjs.com/package/node-rest-client)\n","text":"Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.rest-http-client-support","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.rest-http-client-support","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.rest-http-client-support"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"help":{"markdown":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/telnet](https://www.npmjs.com/package/telnet)\n - [https://www.npmjs.com/package/telnet-client](https://www.npmjs.com/package/telnet-client)\n","text":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.telnet-request","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.telnet-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.telnet-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information."},"help":{"markdown":"Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.\n\n<b>References:</b>\n - [https://nodejs.org/api/http.html#http_class_http_agent](https://nodejs.org/api/http.html#http_class_http_agent)\n - [https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY](https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY)\n","text":"Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information."},"id":"opengrep-rules.problem-based-packs.insecure-transport.js-node.using-http-server","name":"opengrep-rules.problem-based-packs.insecure-transport.js-node.using-http-server","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.js-node.using-http-server"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient."},"help":{"markdown":"Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient.\n\n<b>References:</b>\n - [https://github.com/rest-client/rest-client](https://github.com/rest-client/rest-client)\n - [https://github.com/jnunemaker/httparty/tree/master/docs](https://github.com/jnunemaker/httparty/tree/master/docs)\n","text":"Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient."},"id":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests","name":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."},"help":{"markdown":"Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.\n\n<b>References:</b>\n - [https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html](https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html)\n","text":"Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."},"id":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request","name":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."},"help":{"markdown":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.\n\n<b>References:</b>\n - [https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/](https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/)\n","text":"Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."},"id":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request","name":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"help":{"markdown":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n<b>References:</b>\n - [https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html](https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html)\n - [https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet](https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet)\n","text":"Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."},"id":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request","name":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for requests to http and ftp (unencrypted) sites using OpenURI."},"help":{"markdown":"Checks for requests to http and ftp (unencrypted) sites using OpenURI.\n\n<b>References:</b>\n - [https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html](https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html)\n","text":"Checks for requests to http and ftp (unencrypted) sites using OpenURI."},"id":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request","name":"opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources."},"help":{"markdown":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources."},"id":"opengrep-rules.python.airflow.security.audit.formatted-string-bashoperator","name":"opengrep-rules.python.airflow.security.audit.formatted-string-bashoperator","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.airflow.security.audit.formatted-string-bashoperator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Unsafe usage of mutable initializer with attr.s decorator. Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior. Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list"},"help":{"markdown":"Unsafe usage of mutable initializer with attr.s decorator. Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior. Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list","text":"Unsafe usage of mutable initializer with attr.s decorator. Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior. Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list"},"id":"opengrep-rules.python.attr.correctness.attr-mutable-initializer","name":"opengrep-rules.python.attr.correctness.attr-mutable-initializer","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.attr.correctness.attr-mutable-initializer"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n","text":"Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-create-exec","name":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-create-exec","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-asyncio-create-exec"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n","text":"Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-exec","name":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-exec","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-asyncio-exec"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html](https://docs.python.org/3/library/asyncio-subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n","text":"Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-shell","name":"opengrep-rules.python.aws-lambda.security.dangerous-asyncio-shell","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-asyncio-shell"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"help":{"markdown":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-spawn-process","name":"opengrep-rules.python.aws-lambda.security.dangerous-spawn-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-spawn-process"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose."},"help":{"markdown":"Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n","text":"Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-subprocess-use","name":"opengrep-rules.python.aws-lambda.security.dangerous-subprocess-use","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-subprocess-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"help":{"markdown":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"id":"opengrep-rules.python.aws-lambda.security.dangerous-system-call","name":"opengrep-rules.python.aws-lambda.security.dangerous-system-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dangerous-system-call"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"help":{"markdown":"Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.\n\n<b>References:</b>\n - [https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac](https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac)\n","text":"Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."},"id":"opengrep-rules.python.aws-lambda.security.dynamodb-filter-injection","name":"opengrep-rules.python.aws-lambda.security.dynamodb-filter-injection","properties":{"precision":"very-high","tags":["CWE-943: Improper Neutralization of Special Elements in Data Query Logic","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.dynamodb-filter-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`\n\n<b>References:</b>\n - [https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html)\n - [https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"},"id":"opengrep-rules.python.aws-lambda.security.mysql-sqli","name":"opengrep-rules.python.aws-lambda.security.mysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.mysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`\n\n<b>References:</b>\n - [https://www.psycopg.org/docs/cursor.html#cursor.execute](https://www.psycopg.org/docs/cursor.html#cursor.execute)\n - [https://www.psycopg.org/docs/cursor.html#cursor.executemany](https://www.psycopg.org/docs/cursor.html#cursor.executemany)\n - [https://www.psycopg.org/docs/cursor.html#cursor.mogrify](https://www.psycopg.org/docs/cursor.html#cursor.mogrify)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"},"id":"opengrep-rules.python.aws-lambda.security.psycopg-sqli","name":"opengrep-rules.python.aws-lambda.security.psycopg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.psycopg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`\n\n<b>References:</b>\n - [https://pypi.org/project/pymssql/](https://pypi.org/project/pymssql/)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"},"id":"opengrep-rules.python.aws-lambda.security.pymssql-sqli","name":"opengrep-rules.python.aws-lambda.security.pymssql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.pymssql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`\n\n<b>References:</b>\n - [https://pypi.org/project/PyMySQL/#id4](https://pypi.org/project/PyMySQL/#id4)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"},"id":"opengrep-rules.python.aws-lambda.security.pymysql-sqli","name":"opengrep-rules.python.aws-lambda.security.pymysql-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.pymysql-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute](https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`"},"id":"opengrep-rules.python.aws-lambda.security.sqlalchemy-sqli","name":"opengrep-rules.python.aws-lambda.security.sqlalchemy-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.sqlalchemy-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.python.aws-lambda.security.tainted-code-exec","name":"opengrep-rules.python.aws-lambda.security.tainted-code-exec","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.tainted-code-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"help":{"markdown":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."},"id":"opengrep-rules.python.aws-lambda.security.tainted-html-response","name":"opengrep-rules.python.aws-lambda.security.tainted-html-response","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.tainted-html-response"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."},"id":"opengrep-rules.python.aws-lambda.security.tainted-html-string","name":"opengrep-rules.python.aws-lambda.security.tainted-html-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.tainted-html-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n - [https://davidhamann.de/2020/04/05/exploiting-python-pickle/](https://davidhamann.de/2020/04/05/exploiting-python-pickle/)\n","text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"id":"opengrep-rules.python.aws-lambda.security.tainted-pickle-deserialization","name":"opengrep-rules.python.aws-lambda.security.tainted-pickle-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.tainted-pickle-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.python.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.python.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations"},"help":{"markdown":"These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations","text":"These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations"},"id":"opengrep-rules.python.bokeh.maintainability.deprecated.bokeh-deprecated-apis","name":"opengrep-rules.python.bokeh.maintainability.deprecated.bokeh-deprecated-apis","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.bokeh.maintainability.deprecated.bokeh-deprecated-apis"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n - [https://bento.dev/checks/boto3/hardcoded-access-token/](https://bento.dev/checks/boto3/hardcoded-access-token/)\n - [https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/](https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.python.boto3.security.hardcoded-token","name":"opengrep-rules.python.boto3.security.hardcoded-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.boto3.security.hardcoded-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use `click.secho($X)` instead. It combines click.echo() and click.style()."},"help":{"markdown":"Use `click.secho($X)` instead. It combines click.echo() and click.style().","text":"Use `click.secho($X)` instead. It combines click.echo() and click.style()."},"id":"opengrep-rules.python.click.best-practice.use-click-secho","name":"opengrep-rules.python.click.best-practice.use-click-secho","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.click.best-practice.use-click-secho"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This expression will always return False because 0 is a false-y value. So if $X is 0, then the first part of this expression will return False but if it is not, the second part will return False. Perhaps you meant to check if $X was None explicitly."},"help":{"markdown":"This expression will always return False because 0 is a false-y value. So if $X is 0, then the first part of this expression will return False but if it is not, the second part will return False. Perhaps you meant to check if $X was None explicitly.\n\n<b>References:</b>\n - [https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python/](https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python/)\n","text":"This expression will always return False because 0 is a false-y value. So if $X is 0, then the first part of this expression will return False but if it is not, the second part will return False. Perhaps you meant to check if $X was None explicitly."},"id":"opengrep-rules.python.correctness.check-is-none-explicitly","name":"opengrep-rules.python.correctness.check-is-none-explicitly","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.correctness.check-is-none-explicitly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Socket is not closed if shutdown fails. When socket.shutdown fails on an OSError, socket.close is not called and the code fails to clean up the socket and allow garbage collection to release the memory used for it. The OSError on shutdown can occur when the remote side of the connection closes the connection first."},"help":{"markdown":"Socket is not closed if shutdown fails. When socket.shutdown fails on an OSError, socket.close is not called and the code fails to clean up the socket and allow garbage collection to release the memory used for it. The OSError on shutdown can occur when the remote side of the connection closes the connection first.\n\n<b>References:</b>\n - [https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html](https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html)\n","text":"Socket is not closed if shutdown fails. When socket.shutdown fails on an OSError, socket.close is not called and the code fails to clean up the socket and allow garbage collection to release the memory used for it. The OSError on shutdown can occur when the remote side of the connection closes the connection first."},"id":"opengrep-rules.python.correctness.socket-shutdown-close","name":"opengrep-rules.python.correctness.socket-shutdown-close","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.correctness.socket-shutdown-close"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Having a `break`, `continue`, or `return` in a `finally` block will cause strange behaviors, like exceptions not being caught."},"help":{"markdown":"Having a `break`, `continue`, or `return` in a `finally` block will cause strange behaviors, like exceptions not being caught.\n\n<b>References:</b>\n - [https://docs.python.org/3/reference/compound_stmts.html#the-try-statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement)\n - [https://www.python.org/dev/peps/pep-0601/#rejection-note](https://www.python.org/dev/peps/pep-0601/#rejection-note)\n","text":"Having a `break`, `continue`, or `return` in a `finally` block will cause strange behaviors, like exceptions not being caught."},"id":"opengrep-rules.python.correctness.suppressed-exception-handling-finally-break","name":"opengrep-rules.python.correctness.suppressed-exception-handling-finally-break","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.correctness.suppressed-exception-handling-finally-break"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "},"help":{"markdown":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. \n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "},"id":"opengrep-rules.python.cryptography.security.crypto-mode-without-authentication","name":"opengrep-rules.python.cryptography.security.crypto-mode-without-authentication","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.crypto-mode-without-authentication"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption."},"help":{"markdown":"Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/327.html](https://cwe.mitre.org/data/definitions/327.html)\n - [https://cwe.mitre.org/data/definitions/310.html](https://cwe.mitre.org/data/definitions/310.html)\n","text":"Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption."},"id":"opengrep-rules.python.cryptography.security.empty-aes-key","name":"opengrep-rules.python.cryptography.security.empty-aes-key","properties":{"precision":"very-high","tags":["CWE-310: Cryptographic Issues","CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A6:2017 misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.empty-aes-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"help":{"markdown":"ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers)\n","text":"ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"id":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-arc4","name":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-arc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-arc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"help":{"markdown":"Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers)\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\n","text":"Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"id":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-blowfish","name":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-blowfish","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-blowfish"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"help":{"markdown":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA)\n","text":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"id":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-idea","name":"opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-idea","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-cipher-algorithm-idea"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM."},"help":{"markdown":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes)\n - [https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption](https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption)\n","text":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM."},"id":"opengrep-rules.python.cryptography.security.insecure-cipher-mode-ecb","name":"opengrep-rules.python.cryptography.security.insecure-cipher-mode-ecb","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-cipher-mode-ecb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#md5](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#md5)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.python.cryptography.security.insecure-hash-algorithm-md5","name":"opengrep-rules.python.cryptography.security.insecure-hash-algorithm-md5","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-hash-algorithm-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.python.cryptography.security.insecure-hash-algorithm-sha1","name":"opengrep-rules.python.cryptography.security.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."},"help":{"markdown":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.\n\n<b>References:</b>\n - [https://www.cosic.esat.kuleuven.be/ecrypt/ecrypt2/documents/D.SPA.20.pdf](https://www.cosic.esat.kuleuven.be/ecrypt/ecrypt2/documents/D.SPA.20.pdf)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dsa/](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dsa/)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n","text":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."},"id":"opengrep-rules.python.cryptography.security.insufficient-dsa-key-size","name":"opengrep-rules.python.cryptography.security.insufficient-dsa-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insufficient-dsa-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."},"help":{"markdown":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\n\n<b>References:</b>\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves)\n","text":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."},"id":"opengrep-rules.python.cryptography.security.insufficient-ec-key-size","name":"opengrep-rules.python.cryptography.security.insufficient-ec-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insufficient-ec-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."},"help":{"markdown":"Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.\n\n<b>References:</b>\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n","text":"Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."},"id":"opengrep-rules.python.cryptography.security.insufficient-rsa-key-size","name":"opengrep-rules.python.cryptography.security.insufficient-rsa-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.cryptography.security.insufficient-rsa-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security."},"help":{"markdown":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.\n\n<b>References:</b>\n - [https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters](https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters)\n","text":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security."},"id":"opengrep-rules.python.distributed.require-encryption","name":"opengrep-rules.python.distributed.require-encryption","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.distributed.require-encryption"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"You are using environment variables inside django app. Use `django-environ` as it a better alternative for deployment."},"help":{"markdown":"You are using environment variables inside django app. Use `django-environ` as it a better alternative for deployment.","text":"You are using environment variables inside django app. Use `django-environ` as it a better alternative for deployment."},"id":"opengrep-rules.python.django.best-practice.use-django-environ","name":"opengrep-rules.python.django.best-practice.use-django-environ","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.best-practice.use-django-environ"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use JsonResponse instead"},"help":{"markdown":"Use JsonResponse instead","text":"Use JsonResponse instead"},"id":"opengrep-rules.python.django.best-practice.use-json-response","name":"opengrep-rules.python.django.best-practice.use-json-response","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.best-practice.use-json-response"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True. 'OneToOneField' is used to create one-to-one relationships."},"help":{"markdown":"Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True. 'OneToOneField' is used to create one-to-one relationships.","text":"Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True. 'OneToOneField' is used to create one-to-one relationships."},"id":"opengrep-rules.python.django.best-practice.use-onetoonefield","name":"opengrep-rules.python.django.best-practice.use-onetoonefield","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.best-practice.use-onetoonefield"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The host argument to assertRedirects is removed in Django 2.0."},"help":{"markdown":"The host argument to assertRedirects is removed in Django 2.0.","text":"The host argument to assertRedirects is removed in Django 2.0."},"id":"opengrep-rules.python.django.compatibility.django-compat-2_0-assert-redirects-helper","name":"opengrep-rules.python.django.compatibility.django-compat-2_0-assert-redirects-helper","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.compatibility.django-compat-2_0-assert-redirects-helper"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The assignment_tag helper is removed in Django 2.0."},"help":{"markdown":"The assignment_tag helper is removed in Django 2.0.","text":"The assignment_tag helper is removed in Django 2.0."},"id":"opengrep-rules.python.django.compatibility.django-compat-2_0-assignment-tag","name":"opengrep-rules.python.django.compatibility.django-compat-2_0-assignment-tag","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.compatibility.django-compat-2_0-assignment-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"django.db.backends.base.BaseDatabaseOperations.check_aggregate_support() is removed in Django 2.0."},"help":{"markdown":"django.db.backends.base.BaseDatabaseOperations.check_aggregate_support() is removed in Django 2.0.","text":"django.db.backends.base.BaseDatabaseOperations.check_aggregate_support() is removed in Django 2.0."},"id":"opengrep-rules.python.django.compatibility.django-compat-2_0-check-aggregate-support","name":"opengrep-rules.python.django.compatibility.django-compat-2_0-check-aggregate-support","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.compatibility.django-compat-2_0-check-aggregate-support"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The django.forms.extras package is removed in Django 2.0."},"help":{"markdown":"The django.forms.extras package is removed in Django 2.0.","text":"The django.forms.extras package is removed in Django 2.0."},"id":"opengrep-rules.python.django.compatibility.django-compat-2_0-extra-forms","name":"opengrep-rules.python.django.compatibility.django-compat-2_0-extra-forms","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.compatibility.django-compat-2_0-extra-forms"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The weak argument to django.dispatch.signals.Signal.disconnect() is removed in Django 2.0."},"help":{"markdown":"The weak argument to django.dispatch.signals.Signal.disconnect() is removed in Django 2.0.","text":"The weak argument to django.dispatch.signals.Signal.disconnect() is removed in Django 2.0."},"id":"opengrep-rules.python.django.compatibility.django-compat-2_0-signals-weak","name":"opengrep-rules.python.django.compatibility.django-compat-2_0-signals-weak","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.compatibility.django-compat-2_0-signals-weak"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a django model `$MODEL` is not calling super().save() inside of the save method."},"help":{"markdown":"Detected a django model `$MODEL` is not calling super().save() inside of the save method.","text":"Detected a django model `$MODEL` is not calling super().save() inside of the save method."},"id":"opengrep-rules.python.django.correctness.django-db-model-save-super","name":"opengrep-rules.python.django.correctness.django-db-model-save-super","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.correctness.django-db-model-save-super"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL."},"help":{"markdown":"Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.","text":"Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL."},"id":"opengrep-rules.python.django.correctness.no-null-string-field","name":"opengrep-rules.python.django.correctness.no-null-string-field","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.correctness.no-null-string-field"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"null=True should be set if blank=True is set on non-text fields."},"help":{"markdown":"null=True should be set if blank=True is set on non-text fields.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/4.0/ref/models/fields/#null](https://docs.djangoproject.com/en/4.0/ref/models/fields/#null)\n","text":"null=True should be set if blank=True is set on non-text fields."},"id":"opengrep-rules.python.django.correctness.nontext-field-must-set-null-true","name":"opengrep-rules.python.django.correctness.nontext-field-must-set-null-true","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.correctness.nontext-field-must-set-null-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"If a text field declares unique=True and blank=True, null=True must also be set to avoid unique constraint violations when saving multiple objects with blank values."},"help":{"markdown":"If a text field declares unique=True and blank=True, null=True must also be set to avoid unique constraint violations when saving multiple objects with blank values.","text":"If a text field declares unique=True and blank=True, null=True must also be set to avoid unique constraint violations when saving multiple objects with blank values."},"id":"opengrep-rules.python.django.correctness.string-field-must-set-null-true","name":"opengrep-rules.python.django.correctness.string-field-must-set-null-true","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.correctness.string-field-must-set-null-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a FloatField used for variable $F. Use DecimalField for currency fields to avoid float-rounding errors."},"help":{"markdown":"Found a FloatField used for variable $F. Use DecimalField for currency fields to avoid float-rounding errors.","text":"Found a FloatField used for variable $F. Use DecimalField for currency fields to avoid float-rounding errors."},"id":"opengrep-rules.python.django.correctness.use-decimalfield-for-money","name":"opengrep-rules.python.django.correctness.use-decimalfield-for-money","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.correctness.use-decimalfield-for-money"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The path for `$URL` is assigned once to view `$VIEW` and once to `$DIFFERENT_VIEW`, which can lead to unexpected behavior. Verify what the intended target view is and delete the other route."},"help":{"markdown":"The path for `$URL` is assigned once to view `$VIEW` and once to `$DIFFERENT_VIEW`, which can lead to unexpected behavior. Verify what the intended target view is and delete the other route.","text":"The path for `$URL` is assigned once to view `$VIEW` and once to `$DIFFERENT_VIEW`, which can lead to unexpected behavior. Verify what the intended target view is and delete the other route."},"id":"opengrep-rules.python.django.maintainability.conflicting-path-assignment","name":"opengrep-rules.python.django.maintainability.conflicting-path-assignment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.maintainability.conflicting-path-assignment"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The name `$NAME` is used for both `$URL` and `$OTHER_URL`, which can lead to unexpected behavior when using URL reversing. Pick a unique name for each path."},"help":{"markdown":"The name `$NAME` is used for both `$URL` and `$OTHER_URL`, which can lead to unexpected behavior when using URL reversing. Pick a unique name for each path.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.2/topics/http/urls/#naming-url-patterns](https://docs.djangoproject.com/en/3.2/topics/http/urls/#naming-url-patterns)\n","text":"The name `$NAME` is used for both `$URL` and `$OTHER_URL`, which can lead to unexpected behavior when using URL reversing. Pick a unique name for each path."},"id":"opengrep-rules.python.django.maintainability.duplicate-name-assignment","name":"opengrep-rules.python.django.maintainability.duplicate-name-assignment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.maintainability.duplicate-name-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"path for `$URL` is uselessly assigned twice"},"help":{"markdown":"path for `$URL` is uselessly assigned twice","text":"path for `$URL` is uselessly assigned twice"},"id":"opengrep-rules.python.django.maintainability.duplicate-path-assignment","name":"opengrep-rules.python.django.maintainability.duplicate-path-assignment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.maintainability.duplicate-path-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"path for `$URL` is assigned twice with different names"},"help":{"markdown":"path for `$URL` is assigned twice with different names","text":"path for `$URL` is assigned twice with different names"},"id":"opengrep-rules.python.django.maintainability.duplicate-path-assignment-different-names","name":"opengrep-rules.python.django.maintainability.duplicate-path-assignment-different-names","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.maintainability.duplicate-path-assignment-different-names"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"You should use ITEM.user_id rather than ITEM.user.id to prevent running an extra query."},"help":{"markdown":"You should use ITEM.user_id rather than ITEM.user.id to prevent running an extra query.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/5.0/topics/db/optimization/#use-foreign-key-values-directly](https://docs.djangoproject.com/en/5.0/topics/db/optimization/#use-foreign-key-values-directly)\n","text":"You should use ITEM.user_id rather than ITEM.user.id to prevent running an extra query."},"id":"opengrep-rules.python.django.performance.access-foreign-keys","name":"opengrep-rules.python.django.performance.access-foreign-keys","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.performance.access-foreign-keys"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Looks like you need to determine the number of records. Django provides the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/"},"help":{"markdown":"Looks like you need to determine the number of records. Django provides the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/","text":"Looks like you need to determine the number of records. Django provides the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/"},"id":"opengrep-rules.python.django.performance.use-count-method","name":"opengrep-rules.python.django.performance.use-count-method","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.performance.use-count-method"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Looks like you are only accessing first element of an ordered QuerySet. Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest"},"help":{"markdown":"Looks like you are only accessing first element of an ordered QuerySet. Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest","text":"Looks like you are only accessing first element of an ordered QuerySet. Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest"},"id":"opengrep-rules.python.django.performance.use-earliest-or-latest","name":"opengrep-rules.python.django.performance.use-earliest-or-latest","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.performance.use-earliest-or-latest"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."},"help":{"markdown":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."},"id":"opengrep-rules.python.django.security.audit.avoid-insecure-deserialization","name":"opengrep-rules.python.django.security.audit.avoid-insecure-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.avoid-insecure-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead."},"help":{"markdown":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe)\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html)\n","text":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead."},"id":"opengrep-rules.python.django.security.audit.avoid-mark-safe","name":"opengrep-rules.python.django.security.audit.avoid-mark-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.avoid-mark-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`."},"help":{"markdown":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`."},"id":"opengrep-rules.python.django.security.audit.avoid-query-set-extra","name":"opengrep-rules.python.django.security.audit.avoid-query-set-extra","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.avoid-query-set-extra"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`"},"help":{"markdown":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`"},"id":"opengrep-rules.python.django.security.audit.avoid-raw-sql","name":"opengrep-rules.python.django.security.audit.avoid-raw-sql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.avoid-raw-sql"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"help":{"markdown":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"id":"opengrep-rules.python.django.security.audit.custom-expression-as-sql","name":"opengrep-rules.python.django.security.audit.custom-expression-as-sql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.custom-expression-as-sql"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application."},"help":{"markdown":"Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.\n\n<b>References:</b>\n - [https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy](https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy)\n","text":"Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application."},"id":"opengrep-rules.python.django.security.audit.django-rest-framework.missing-throttle-config","name":"opengrep-rules.python.django.security.audit.django-rest-framework.missing-throttle-config","properties":{"precision":"very-high","tags":["CWE-400: Uncontrolled Resource Consumption","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.django-rest-framework.missing-throttle-config"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."},"help":{"markdown":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie](https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie)\n - [https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/](https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/)\n - [https://bento.dev/checks/flask/secure-set-cookie/](https://bento.dev/checks/flask/secure-set-cookie/)\n","text":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."},"id":"opengrep-rules.python.django.security.audit.django-secure-set-cookie","name":"opengrep-rules.python.django.security.audit.django-secure-set-cookie","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.django-secure-set-cookie"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"help":{"markdown":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"id":"opengrep-rules.python.django.security.audit.extends-custom-expression","name":"opengrep-rules.python.django.security.audit.extends-custom-expression","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.extends-custom-expression"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator."},"help":{"markdown":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator."},"id":"opengrep-rules.python.django.security.audit.no-csrf-exempt","name":"opengrep-rules.python.django.security.audit.no-csrf-exempt","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.no-csrf-exempt"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a debug template tag in a Django template. This dumps debugging information to the page when debug mode is enabled. Showing debug information to users is dangerous because it may reveal information about your environment that malicious actors can use to gain access to the system. Remove the debug tag."},"help":{"markdown":"Detected a debug template tag in a Django template. This dumps debugging information to the page when debug mode is enabled. Showing debug information to users is dangerous because it may reveal information about your environment that malicious actors can use to gain access to the system. Remove the debug tag.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/4.2/ref/templates/builtins/#debug](https://docs.djangoproject.com/en/4.2/ref/templates/builtins/#debug)\n - [https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page](https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page)\n","text":"Detected a debug template tag in a Django template. This dumps debugging information to the page when debug mode is enabled. Showing debug information to users is dangerous because it may reveal information about your environment that malicious actors can use to gain access to the system. Remove the debug tag."},"id":"opengrep-rules.python.django.security.audit.templates.debug-template-tag","name":"opengrep-rules.python.django.security.audit.templates.debug-template-tag","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.templates.debug-template-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information."},"help":{"markdown":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation](https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation)\n","text":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information."},"id":"opengrep-rules.python.django.security.audit.unvalidated-password","name":"opengrep-rules.python.django.security.audit.unvalidated-password","properties":{"precision":"very-high","tags":["CWE-521: Weak Password Requirements","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.unvalidated-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are for bypassing the escaping engine built in to Django and should not be used directly. Improper use of this class exposes your application to cross-site scripting (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead and ensure no user data can reach it."},"help":{"markdown":"Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are for bypassing the escaping engine built in to Django and should not be used directly. Improper use of this class exposes your application to cross-site scripting (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead and ensure no user data can reach it.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping](https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping)\n - [https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11](https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11)\n","text":"Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are for bypassing the escaping engine built in to Django and should not be used directly. Improper use of this class exposes your application to cross-site scripting (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead and ensure no user data can reach it."},"id":"opengrep-rules.python.django.security.audit.xss.class-extends-safestring","name":"opengrep-rules.python.django.security.audit.xss.class-extends-safestring","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.class-extends-safestring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"help":{"markdown":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\n","text":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"id":"opengrep-rules.python.django.security.audit.xss.context-autoescape-off","name":"opengrep-rules.python.django.security.audit.xss.context-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.context-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML."},"help":{"markdown":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render](https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render)\n - [https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render](https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render)\n","text":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML."},"id":"opengrep-rules.python.django.security.audit.xss.direct-use-of-httpresponse","name":"opengrep-rules.python.django.security.audit.xss.direct-use-of-httpresponse","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.direct-use-of-httpresponse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'."},"help":{"markdown":"Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection](https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection)\n - [https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping](https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping)\n - [https://stackoverflow.com/questions/7665512/why-use-is-safe](https://stackoverflow.com/questions/7665512/why-use-is-safe)\n","text":"Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'."},"id":"opengrep-rules.python.django.security.audit.xss.filter-with-is-safe","name":"opengrep-rules.python.django.security.audit.xss.filter-with-is-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.filter-with-is-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Passing a formatted string as first parameter to `format_html` disables the proper encoding of variables. Any HTML in the first parameter is not encoded. Using a formatted string as first parameter obscures which parameters are encoded. Correct use of `format_html` is passing a static format string as first parameter, and the variables to substitute as subsequent parameters."},"help":{"markdown":"Passing a formatted string as first parameter to `format_html` disables the proper encoding of variables. Any HTML in the first parameter is not encoded. Using a formatted string as first parameter obscures which parameters are encoded. Correct use of `format_html` is passing a static format string as first parameter, and the variables to substitute as subsequent parameters.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html](https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html)\n","text":"Passing a formatted string as first parameter to `format_html` disables the proper encoding of variables. Any HTML in the first parameter is not encoded. Using a formatted string as first parameter obscures which parameters are encoded. Correct use of `format_html` is passing a static format string as first parameter, and the variables to substitute as subsequent parameters."},"id":"opengrep-rules.python.django.security.audit.xss.formathtml-fstring-parameter","name":"opengrep-rules.python.django.security.audit.xss.formathtml-fstring-parameter","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.formathtml-fstring-parameter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"help":{"markdown":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\n","text":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"id":"opengrep-rules.python.django.security.audit.xss.global-autoescape-off","name":"opengrep-rules.python.django.security.audit.xss.global-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.global-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method."},"help":{"markdown":"The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape](https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape)\n - [https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5](https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5)\n","text":"The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method."},"id":"opengrep-rules.python.django.security.audit.xss.html-magic-method","name":"opengrep-rules.python.django.security.audit.xss.html-magic-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.html-magic-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method."},"help":{"markdown":"`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#html_safe](https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#html_safe)\n - [https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5](https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5)\n","text":"`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method."},"id":"opengrep-rules.python.django.security.audit.xss.html-safe","name":"opengrep-rules.python.django.security.audit.xss.html-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.html-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code."},"help":{"markdown":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape)\n","text":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code."},"id":"opengrep-rules.python.django.security.audit.xss.template-autoescape-off","name":"opengrep-rules.python.django.security.audit.xss.template-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.template-autoescape-off"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"help":{"markdown":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\n\n<b>References:</b>\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\n","text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"id":"opengrep-rules.python.django.security.audit.xss.template-blocktranslate-no-escape","name":"opengrep-rules.python.django.security.audit.xss.template-blocktranslate-no-escape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.template-blocktranslate-no-escape"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"help":{"markdown":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\n\n<b>References:</b>\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\n","text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"id":"opengrep-rules.python.django.security.audit.xss.template-translate-as-no-escape","name":"opengrep-rules.python.django.security.audit.xss.template-translate-as-no-escape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.template-translate-as-no-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code."},"help":{"markdown":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq)\n","text":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code."},"id":"opengrep-rules.python.django.security.audit.xss.template-var-unescaped-with-safeseq","name":"opengrep-rules.python.django.security.audit.xss.template-var-unescaped-with-safeseq","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.audit.xss.template-var-unescaped-with-safeseq"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"help":{"markdown":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/4.2/howto/csrf/](https://docs.djangoproject.com/en/4.2/howto/csrf/)\n","text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"id":"opengrep-rules.python.django.security.django-no-csrf-token","name":"opengrep-rules.python.django.security.django-no-csrf-token","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.django-no-csrf-token"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data"},"help":{"markdown":"Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data](https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data)\n","text":"Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data"},"id":"opengrep-rules.python.django.security.django-using-request-post-after-is-valid","name":"opengrep-rules.python.django.security.django-using-request-post-after-is-valid","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.django-using-request-post-after-is-valid"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using 'globals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'globals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead."},"help":{"markdown":"Using 'globals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'globals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.2/ref/settings/#templates](https://docs.djangoproject.com/en/3.2/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates)\n - [https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context](https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context)\n","text":"Using 'globals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'globals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead."},"id":"opengrep-rules.python.django.security.globals-as-template-context","name":"opengrep-rules.python.django.security.globals-as-template-context","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.globals-as-template-context"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs."},"help":{"markdown":"The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY](https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY)\n - [http://carnage.github.io/2015/08/cryptanalysis-of-hashids](http://carnage.github.io/2015/08/cryptanalysis-of-hashids)\n","text":"The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs."},"id":"opengrep-rules.python.django.security.hashids-with-django-secret","name":"opengrep-rules.python.django.security.hashids-with-django-secret","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 – Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.hashids-with-django-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."},"help":{"markdown":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n<b>References:</b>\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n","text":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."},"id":"opengrep-rules.python.django.security.injection.code.globals-misuse-code-execution","name":"opengrep-rules.python.django.security.injection.code.globals-misuse-code-execution","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.code.globals-misuse-code-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"help":{"markdown":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n<b>References:</b>\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n","text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"id":"opengrep-rules.python.django.security.injection.code.user-eval","name":"opengrep-rules.python.django.security.injection.code.user-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.code.user-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."},"help":{"markdown":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.\n\n<b>References:</b>\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n","text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."},"id":"opengrep-rules.python.django.security.injection.code.user-eval-format-string","name":"opengrep-rules.python.django.security.injection.code.user-eval-format-string","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.code.user-eval-format-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"help":{"markdown":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n","text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"id":"opengrep-rules.python.django.security.injection.code.user-exec","name":"opengrep-rules.python.django.security.injection.code.user-exec","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.code.user-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"help":{"markdown":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n","text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"id":"opengrep-rules.python.django.security.injection.code.user-exec-format-string","name":"opengrep-rules.python.django.security.injection.code.user-exec-format-string","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.code.user-exec-format-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."},"help":{"markdown":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n","text":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."},"id":"opengrep-rules.python.django.security.injection.command.command-injection-os-system","name":"opengrep-rules.python.django.security.injection.command.command-injection-os-system","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.command.command-injection-os-system"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."},"help":{"markdown":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."},"id":"opengrep-rules.python.django.security.injection.command.subprocess-injection","name":"opengrep-rules.python.django.security.injection.command.subprocess-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.command.subprocess-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"help":{"markdown":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.\n\n<b>References:</b>\n - [https://github.com/raphaelm/defusedcsv](https://github.com/raphaelm/defusedcsv)\n - [https://owasp.org/www-community/attacks/CSV_Injection](https://owasp.org/www-community/attacks/CSV_Injection)\n - [https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities](https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities)\n","text":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"id":"opengrep-rules.python.django.security.injection.csv-writer-injection","name":"opengrep-rules.python.django.security.injection.csv-writer-injection","properties":{"precision":"very-high","tags":["CWE-1236: Improper Neutralization of Formula Elements in a CSV File","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.csv-writer-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"help":{"markdown":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n<b>References:</b>\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n","text":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"id":"opengrep-rules.python.django.security.injection.email.xss-html-email-body","name":"opengrep-rules.python.django.security.injection.email.xss-html-email-body","properties":{"precision":"very-high","tags":["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.email.xss-html-email-body"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"help":{"markdown":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n<b>References:</b>\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n","text":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"id":"opengrep-rules.python.django.security.injection.email.xss-send-mail-html-message","name":"opengrep-rules.python.django.security.injection.email.xss-send-mail-html-message","properties":{"precision":"very-high","tags":["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.email.xss-send-mail-html-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html."},"help":{"markdown":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html."},"id":"opengrep-rules.python.django.security.injection.mass-assignment","name":"opengrep-rules.python.django.security.injection.mass-assignment","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.mass-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information."},"help":{"markdown":"Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.\n\n<b>References:</b>\n - [https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/](https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/)\n - [https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231](https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231)\n","text":"Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information."},"id":"opengrep-rules.python.django.security.injection.open-redirect","name":"opengrep-rules.python.django.security.injection.open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."},"help":{"markdown":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."},"id":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-file-name","name":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-file-name","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.path-traversal.path-traversal-file-name"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library."},"help":{"markdown":"Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library."},"id":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-join","name":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-join","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.path-traversal.path-traversal-join"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."},"help":{"markdown":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."},"id":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-open","name":"opengrep-rules.python.django.security.injection.path-traversal.path-traversal-open","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.path-traversal.path-traversal-open"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render](https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render)\n - [https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection](https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."},"id":"opengrep-rules.python.django.security.injection.raw-html-format","name":"opengrep-rules.python.django.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."},"help":{"markdown":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.\n\n<b>References:</b>\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n","text":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."},"id":"opengrep-rules.python.django.security.injection.reflected-data-httpresponse","name":"opengrep-rules.python.django.security.injection.reflected-data-httpresponse","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.reflected-data-httpresponse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."},"help":{"markdown":"Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.\n\n<b>References:</b>\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n","text":"Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."},"id":"opengrep-rules.python.django.security.injection.reflected-data-httpresponsebadrequest","name":"opengrep-rules.python.django.security.injection.reflected-data-httpresponsebadrequest","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.reflected-data-httpresponsebadrequest"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse."},"help":{"markdown":"Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.\n\n<b>References:</b>\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n","text":"Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse."},"id":"opengrep-rules.python.django.security.injection.request-data-fileresponse","name":"opengrep-rules.python.django.security.injection.request-data-fileresponse","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.request-data-fileresponse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."},"help":{"markdown":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."},"id":"opengrep-rules.python.django.security.injection.request-data-write","name":"opengrep-rules.python.django.security.injection.request-data-write","properties":{"precision":"very-high","tags":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.request-data-write"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."},"help":{"markdown":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection](https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection)\n","text":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."},"id":"opengrep-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute","name":"opengrep-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."},"help":{"markdown":"User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra)\n","text":"User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."},"id":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-extra-where","name":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-extra-where","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.sql.sql-injection-using-extra-where"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."},"help":{"markdown":"Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection](https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection)\n","text":"Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."},"id":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-raw","name":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-raw","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.sql.sql-injection-using-raw"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."},"help":{"markdown":"User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL)\n","text":"User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."},"id":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-rawsql","name":"opengrep-rules.python.django.security.injection.sql.sql-injection-using-rawsql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.sql.sql-injection-using-rawsql"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."},"help":{"markdown":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n","text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."},"id":"opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-requests","name":"opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-requests","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-requests"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."},"help":{"markdown":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n","text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."},"id":"opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-urllib","name":"opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-urllib","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.ssrf.ssrf-injection-urllib"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection](https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."},"id":"opengrep-rules.python.django.security.injection.tainted-sql-string","name":"opengrep-rules.python.django.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.python.django.security.injection.tainted-url-host","name":"opengrep-rules.python.django.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using 'locals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'locals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead."},"help":{"markdown":"Using 'locals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'locals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.2/ref/settings/#templates](https://docs.djangoproject.com/en/3.2/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates)\n - [https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context](https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context)\n","text":"Using 'locals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'locals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead."},"id":"opengrep-rules.python.django.security.locals-as-template-context","name":"opengrep-rules.python.django.security.locals-as-template-context","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.locals-as-template-context"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."},"help":{"markdown":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.\n\n<b>References:</b>\n - [https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868](https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868)\n - [https://blog.bitdiscovery.com/2021/12/python-nan-injection/](https://blog.bitdiscovery.com/2021/12/python-nan-injection/)\n","text":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."},"id":"opengrep-rules.python.django.security.nan-injection","name":"opengrep-rules.python.django.security.nan-injection","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.nan-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'."},"help":{"markdown":"'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\n","text":"'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'."},"id":"opengrep-rules.python.django.security.passwords.password-empty-string","name":"opengrep-rules.python.django.security.passwords.password-empty-string","properties":{"precision":"very-high","tags":["CWE-521: Weak Password Requirements","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.passwords.password-empty-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."},"help":{"markdown":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\n\n<b>References:</b>\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\n","text":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."},"id":"opengrep-rules.python.django.security.passwords.use-none-for-password-default","name":"opengrep-rules.python.django.security.passwords.use-none-for-password-default","properties":{"precision":"very-high","tags":["CWE-521: Weak Password Requirements","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.django.security.passwords.use-none-for-password-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the `run` or `create` method it can result in running arbitrary container."},"help":{"markdown":"If unverified user data can reach the `run` or `create` method it can result in running arbitrary container.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/250.html](https://cwe.mitre.org/data/definitions/250.html)\n","text":"If unverified user data can reach the `run` or `create` method it can result in running arbitrary container."},"id":"opengrep-rules.python.docker.security.audit.docker-arbitrary-container-run","name":"opengrep-rules.python.docker.security.audit.docker-arbitrary-container-run","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.docker.security.audit.docker-arbitrary-container-run"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."},"help":{"markdown":"CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n - [https://cwe.mitre.org/data/definitions/942.html](https://cwe.mitre.org/data/definitions/942.html)\n","text":"CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."},"id":"opengrep-rules.python.fastapi.security.wildcard-cors","name":"opengrep-rules.python.fastapi.security.wildcard-cors","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.fastapi.security.wildcard-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask class method GET with side effects"},"help":{"markdown":"Flask class method GET with side effects","text":"Flask class method GET with side effects"},"id":"opengrep-rules.python.flask.best-practice.flask-class-method-get-side-effects","name":"opengrep-rules.python.flask.best-practice.flask-class-method-get-side-effects","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.best-practice.flask-class-method-get-side-effects"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"flask.jsonify() is a Flask helper method which handles the correct  settings for returning JSON from Flask routes"},"help":{"markdown":"flask.jsonify() is a Flask helper method which handles the correct  settings for returning JSON from Flask routes\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/2.2.x/api/#flask.json.jsonify](https://flask.palletsprojects.com/en/2.2.x/api/#flask.json.jsonify)\n","text":"flask.jsonify() is a Flask helper method which handles the correct  settings for returning JSON from Flask routes"},"id":"opengrep-rules.python.flask.best-practice.use-jsonify","name":"opengrep-rules.python.flask.best-practice.use-jsonify","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.best-practice.use-jsonify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask-caching doesn't cache query strings by default. You have to use `query_string=True`. Also you shouldn't cache verbs that can mutate state."},"help":{"markdown":"Flask-caching doesn't cache query strings by default. You have to use `query_string=True`. Also you shouldn't cache verbs that can mutate state.","text":"Flask-caching doesn't cache query strings by default. You have to use `query_string=True`. Also you shouldn't cache verbs that can mutate state."},"id":"opengrep-rules.python.flask.caching.flask-cache-query-string","name":"opengrep-rules.python.flask.caching.flask-cache-query-string","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.caching.flask-cache-query-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Accessing request object inside a route handle for HTTP GET command will throw due to missing request body."},"help":{"markdown":"Accessing request object inside a route handle for HTTP GET command will throw due to missing request body.","text":"Accessing request object inside a route handle for HTTP GET command will throw due to missing request body."},"id":"opengrep-rules.python.flask.correctness.avoid-accessing-request-in-wrong-handler","name":"opengrep-rules.python.flask.correctness.avoid-accessing-request-in-wrong-handler","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.correctness.avoid-accessing-request-in-wrong-handler"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Looks like `$R` is a flask function handler that registered to two different routes. This will cause a runtime error"},"help":{"markdown":"Looks like `$R` is a flask function handler that registered to two different routes. This will cause a runtime error","text":"Looks like `$R` is a flask function handler that registered to two different routes. This will cause a runtime error"},"id":"opengrep-rules.python.flask.correctness.flask-duplicate-handler-name","name":"opengrep-rules.python.flask.correctness.flask-duplicate-handler-name","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.correctness.flask-duplicate-handler-name"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"deprecated Flask API"},"help":{"markdown":"deprecated Flask API","text":"deprecated Flask API"},"id":"opengrep-rules.python.flask.maintainability.deprecated.flask-deprecated-apis","name":"opengrep-rules.python.flask.maintainability.deprecated.flask-deprecated-apis","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.maintainability.deprecated.flask-deprecated-apis"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Running flask app with host 0.0.0.0 could expose the server publicly."},"help":{"markdown":"Running flask app with host 0.0.0.0 could expose the server publicly.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Running flask app with host 0.0.0.0 could expose the server publicly."},"id":"opengrep-rules.python.flask.security.audit.avoid_app_run_with_bad_host","name":"opengrep-rules.python.flask.security.audit.avoid_app_run_with_bad_host","properties":{"precision":"very-high","tags":["CWE-668: Exposure of Resource to Wrong Sphere","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_app_run_with_bad_host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable"},"help":{"markdown":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\n\n<b>References:</b>\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable"},"id":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_DEBUG","name":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_DEBUG","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_DEBUG"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable"},"help":{"markdown":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\n\n<b>References:</b>\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable"},"id":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_ENV","name":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_ENV","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_ENV"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead"},"help":{"markdown":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\n\n<b>References:</b>\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead"},"id":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY","name":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead"},"help":{"markdown":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\n\n<b>References:</b>\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead"},"id":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_TESTING","name":"opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_TESTING","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_hardcoded_config_TESTING"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"},"help":{"markdown":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"},"id":"opengrep-rules.python.flask.security.audit.avoid_using_app_run_directly","name":"opengrep-rules.python.flask.security.audit.avoid_using_app_run_directly","properties":{"precision":"very-high","tags":["CWE-668: Exposure of Resource to Wrong Sphere","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.avoid_using_app_run_directly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."},"help":{"markdown":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\n\n<b>References:</b>\n - [https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/](https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/)\n","text":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."},"id":"opengrep-rules.python.flask.security.audit.debug-enabled","name":"opengrep-rules.python.flask.security.audit.debug-enabled","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","HIGH CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.debug-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."},"help":{"markdown":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."},"id":"opengrep-rules.python.flask.security.audit.directly-returned-format-string","name":"opengrep-rules.python.flask.security.audit.directly-returned-format-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.directly-returned-format-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Setting 'support_credentials=True' together with 'origin=\"*\"' is a CORS misconfiguration that can allow third party origins to read sensitive data. Using this configuration, flask_cors will dynamically reflects the Origin of each request in the Access-Control-Allow-Origin header, allowing all origins and allowing cookies and credentials to be sent along with request. It is recommended to specify allowed origins instead of using \"*\" when setting 'support_credentials=True'."},"help":{"markdown":"Setting 'support_credentials=True' together with 'origin=\"*\"' is a CORS misconfiguration that can allow third party origins to read sensitive data. Using this configuration, flask_cors will dynamically reflects the Origin of each request in the Access-Control-Allow-Origin header, allowing all origins and allowing cookies and credentials to be sent along with request. It is recommended to specify allowed origins instead of using \"*\" when setting 'support_credentials=True'.\n\n<b>References:</b>\n - [https://pypi.org/project/Flask-Cors/](https://pypi.org/project/Flask-Cors/)\n - [https://flask-cors.readthedocs.io/en/latest/index.html](https://flask-cors.readthedocs.io/en/latest/index.html)\n","text":"Setting 'support_credentials=True' together with 'origin=\"*\"' is a CORS misconfiguration that can allow third party origins to read sensitive data. Using this configuration, flask_cors will dynamically reflects the Origin of each request in the Access-Control-Allow-Origin header, allowing all origins and allowing cookies and credentials to be sent along with request. It is recommended to specify allowed origins instead of using \"*\" when setting 'support_credentials=True'."},"id":"opengrep-rules.python.flask.security.audit.flask-cors-misconfiguration","name":"opengrep-rules.python.flask.security.audit.flask-cors-misconfiguration","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.flask-cors-misconfiguration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection."},"help":{"markdown":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\n\n<b>References:</b>\n - [https://flask-wtf.readthedocs.io/en/1.2.x/csrf/](https://flask-wtf.readthedocs.io/en/1.2.x/csrf/)\n","text":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection."},"id":"opengrep-rules.python.flask.security.audit.flask-wtf-csrf-disabled","name":"opengrep-rules.python.flask.security.audit.flask-wtf-csrf-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.flask-wtf-csrf-disabled"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The `flask.request.host` is used to construct an HTTP request.  This can lead to host header injection issues. Vulnerabilities  that generally occur due to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery (SSRF), and many more.  It is recommended to validate the URL before passing it to a  request library, or using application logic such as authentication  or password resets."},"help":{"markdown":"The `flask.request.host` is used to construct an HTTP request.  This can lead to host header injection issues. Vulnerabilities  that generally occur due to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery (SSRF), and many more.  It is recommended to validate the URL before passing it to a  request library, or using application logic such as authentication  or password resets.\n\n<b>References:</b>\n - [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n","text":"The `flask.request.host` is used to construct an HTTP request.  This can lead to host header injection issues. Vulnerabilities  that generally occur due to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery (SSRF), and many more.  It is recommended to validate the URL before passing it to a  request library, or using application logic such as authentication  or password resets."},"id":"opengrep-rules.python.flask.security.audit.host-header-injection-python","name":"opengrep-rules.python.flask.security.audit.host-header-injection-python","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.host-header-injection-python"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"help":{"markdown":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\n\n<b>References:</b>\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\n","text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"id":"opengrep-rules.python.flask.security.audit.render-template-string","name":"opengrep-rules.python.flask.security.audit.render-template-string","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.render-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."},"help":{"markdown":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie](https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie)\n - [https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options](https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options)\n","text":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."},"id":"opengrep-rules.python.flask.security.audit.secure-set-cookie","name":"opengrep-rules.python.flask.security.audit.secure-set-cookie","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.secure-set-cookie"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."},"help":{"markdown":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.\n\n<b>References:</b>\n - [https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11](https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11)\n - [https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response)\n - [https://flask.palletsprojects.com/en/1.1.x/api/#response-objects](https://flask.palletsprojects.com/en/1.1.x/api/#response-objects)\n","text":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."},"id":"opengrep-rules.python.flask.security.audit.xss.make-response-with-unknown-content","name":"opengrep-rules.python.flask.security.audit.xss.make-response-with-unknown-content","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.audit.xss.make-response-with-unknown-content"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`"},"help":{"markdown":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`"},"id":"opengrep-rules.python.flask.security.avoid_send_file_without_path_sanitization","name":"opengrep-rules.python.flask.security.avoid_send_file_without_path_sanitization","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.avoid_send_file_without_path_sanitization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"help":{"markdown":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\n\n<b>References:</b>\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\n - [https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti](https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti)\n","text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"id":"opengrep-rules.python.flask.security.dangerous-template-string","name":"opengrep-rules.python.flask.security.dangerous-template-string","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.dangerous-template-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD"},"help":{"markdown":"Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/134.html](https://cwe.mitre.org/data/definitions/134.html)\n","text":"Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD"},"id":"opengrep-rules.python.flask.security.flask-api-method-string-format","name":"opengrep-rules.python.flask.security.flask-api-method-string-format","properties":{"precision":"very-high","tags":["CWE-134: Use of Externally-Controlled Format String","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.flask-api-method-string-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs."},"help":{"markdown":"The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/2.2.x/config/#SECRET_KEY](https://flask.palletsprojects.com/en/2.2.x/config/#SECRET_KEY)\n - [http://carnage.github.io/2015/08/cryptanalysis-of-hashids](http://carnage.github.io/2015/08/cryptanalysis-of-hashids)\n","text":"The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs."},"id":"opengrep-rules.python.flask.security.hashids-with-flask-secret","name":"opengrep-rules.python.flask.security.hashids-with-flask-secret","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 – Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.hashids-with-flask-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"help":{"markdown":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.\n\n<b>References:</b>\n - [https://github.com/raphaelm/defusedcsv](https://github.com/raphaelm/defusedcsv)\n - [https://owasp.org/www-community/attacks/CSV_Injection](https://owasp.org/www-community/attacks/CSV_Injection)\n - [https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities](https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities)\n","text":"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"id":"opengrep-rules.python.flask.security.injection.csv-writer-injection","name":"opengrep-rules.python.flask.security.injection.csv-writer-injection","properties":{"precision":"very-high","tags":["CWE-1236: Improper Neutralization of Formula Elements in a CSV File","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.csv-writer-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user data flowing into eval. This is code injection and should be avoided."},"help":{"markdown":"Detected user data flowing into eval. This is code injection and should be avoided.\n\n<b>References:</b>\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n","text":"Detected user data flowing into eval. This is code injection and should be avoided."},"id":"opengrep-rules.python.flask.security.injection.eval-injection","name":"opengrep-rules.python.flask.security.injection.eval-injection","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.eval-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user data flowing into exec. This is code injection and should be avoided."},"help":{"markdown":"Detected user data flowing into exec. This is code injection and should be avoided.\n\n<b>References:</b>\n - [https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html)\n","text":"Detected user data flowing into exec. This is code injection and should be avoided."},"id":"opengrep-rules.python.flask.security.injection.exec-injection","name":"opengrep-rules.python.flask.security.injection.exec-injection","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.exec-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."},"help":{"markdown":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.\n\n<b>References:</b>\n - [https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868](https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868)\n - [https://blog.bitdiscovery.com/2021/12/python-nan-injection/](https://blog.bitdiscovery.com/2021/12/python-nan-injection/)\n","text":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."},"id":"opengrep-rules.python.flask.security.injection.nan-injection","name":"opengrep-rules.python.flask.security.injection.nan-injection","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.nan-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list."},"help":{"markdown":"User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n","text":"User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list."},"id":"opengrep-rules.python.flask.security.injection.os-system-injection","name":"opengrep-rules.python.flask.security.injection.os-system-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.os-system-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."},"help":{"markdown":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."},"id":"opengrep-rules.python.flask.security.injection.path-traversal-open","name":"opengrep-rules.python.flask.security.injection.path-traversal-open","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.path-traversal-open"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."},"id":"opengrep-rules.python.flask.security.injection.raw-html-format","name":"opengrep-rules.python.flask.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."},"help":{"markdown":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n","text":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."},"id":"opengrep-rules.python.flask.security.injection.ssrf-requests","name":"opengrep-rules.python.flask.security.injection.ssrf-requests","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.ssrf-requests"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."},"help":{"markdown":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."},"id":"opengrep-rules.python.flask.security.injection.subprocess-injection","name":"opengrep-rules.python.flask.security.injection.subprocess-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.subprocess-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n - [https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm](https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm)\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."},"id":"opengrep-rules.python.flask.security.injection.tainted-sql-string","name":"opengrep-rules.python.flask.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.python.flask.security.injection.tainted-url-host","name":"opengrep-rules.python.flask.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."},"help":{"markdown":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."},"id":"opengrep-rules.python.flask.security.insecure-deserialization","name":"opengrep-rules.python.flask.security.insecure-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.insecure-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."},"help":{"markdown":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\n\n<b>References:</b>\n - [https://flask-login.readthedocs.io/en/latest/#login-example](https://flask-login.readthedocs.io/en/latest/#login-example)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1)\n - [https://docs.python.org/3/library/urllib.parse.html#url-parsing](https://docs.python.org/3/library/urllib.parse.html#url-parsing)\n","text":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."},"id":"opengrep-rules.python.flask.security.open-redirect","name":"opengrep-rules.python.flask.security.open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."},"help":{"markdown":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.0.x/security/](https://flask.palletsprojects.com/en/1.0.x/security/)\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."},"id":"opengrep-rules.python.flask.security.response-contains-unsanitized-input","name":"opengrep-rules.python.flask.security.response-contains-unsanitized-input","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.response-contains-unsanitized-input"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information."},"help":{"markdown":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\n - [https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/](https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/)\n - [https://bento.dev/checks/flask/unescaped-file-extension/](https://bento.dev/checks/flask/unescaped-file-extension/)\n","text":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information."},"id":"opengrep-rules.python.flask.security.unescaped-template-extension","name":"opengrep-rules.python.flask.security.unescaped-template-extension","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.unescaped-template-extension"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."},"help":{"markdown":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\n\n<b>References:</b>\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n","text":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."},"id":"opengrep-rules.python.flask.security.xss.audit.direct-use-of-jinja2","name":"opengrep-rules.python.flask.security.xss.audit.direct-use-of-jinja2","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.xss.audit.direct-use-of-jinja2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'."},"help":{"markdown":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.\n\n<b>References:</b>\n - [https://tedboy.github.io/flask/generated/generated/flask.Markup.html](https://tedboy.github.io/flask/generated/generated/flask.Markup.html)\n","text":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'."},"id":"opengrep-rules.python.flask.security.xss.audit.explicit-unescape-with-markup","name":"opengrep-rules.python.flask.security.xss.audit.explicit-unescape-with-markup","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.xss.audit.explicit-unescape-with-markup"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on."},"help":{"markdown":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping](https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping)\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\n","text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on."},"id":"opengrep-rules.python.flask.security.xss.audit.template-autoescape-off","name":"opengrep-rules.python.flask.security.xss.audit.template-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.xss.audit.template-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability."},"help":{"markdown":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability."},"id":"opengrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe","name":"opengrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ $...VAR }}\"."},"help":{"markdown":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ $...VAR }}\".\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ $...VAR }}\"."},"id":"opengrep-rules.python.flask.security.xss.audit.template-unquoted-attribute-var","name":"opengrep-rules.python.flask.security.xss.audit.template-unquoted-attribute-var","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.flask.security.xss.audit.template-unquoted-attribute-var"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."},"help":{"markdown":"Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.\n\n<b>References:</b>\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n","text":"Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."},"id":"opengrep-rules.python.jinja2.security.audit.incorrect-autoescape-disabled","name":"opengrep-rules.python.jinja2.security.audit.incorrect-autoescape-disabled","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jinja2.security.audit.incorrect-autoescape-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."},"help":{"markdown":"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.\n\n<b>References:</b>\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n","text":"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."},"id":"opengrep-rules.python.jinja2.security.audit.missing-autoescape-disabled","name":"opengrep-rules.python.jinja2.security.audit.missing-autoescape-disabled","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jinja2.security.audit.missing-autoescape-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.python.jwt.security.audit.jwt-python-exposed-data","name":"opengrep-rules.python.jwt.security.audit.jwt-python-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jwt.security.audit.jwt-python-exposed-data"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."},"help":{"markdown":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\n","text":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."},"id":"opengrep-rules.python.jwt.security.jwt-python-exposed-credentials","name":"opengrep-rules.python.jwt.security.jwt-python-exposed-credentials","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jwt.security.jwt-python-exposed-credentials"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"help":{"markdown":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n","text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"id":"opengrep-rules.python.jwt.security.jwt-python-hardcoded-secret","name":"opengrep-rules.python.jwt.security.jwt-python-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","HIGH CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jwt.security.jwt-python-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.python.jwt.security.jwt-python-none-alg","name":"opengrep-rules.python.jwt.security.jwt-python-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jwt.security.jwt-python-none-alg"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified."},"help":{"markdown":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.\n\n<b>References:</b>\n - [https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96](https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96)\n","text":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified."},"id":"opengrep-rules.python.jwt.security.unverified-jwt-decode","name":"opengrep-rules.python.jwt.security.unverified-jwt-decode","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.jwt.security.unverified-jwt-decode"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"time.sleep() call; did you mean to leave this in?"},"help":{"markdown":"time.sleep() call; did you mean to leave this in?","text":"time.sleep() call; did you mean to leave this in?"},"id":"opengrep-rules.python.lang.best-practice.arbitrary-sleep","name":"opengrep-rules.python.lang.best-practice.arbitrary-sleep","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.arbitrary-sleep"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead."},"help":{"markdown":"Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile)\n","text":"Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead."},"id":"opengrep-rules.python.lang.best-practice.hardcoded-tmp-path","name":"opengrep-rules.python.lang.best-practice.hardcoded-tmp-path","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.hardcoded-tmp-path"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Errors should only be logged when handled. The code logs the error and propogates the exception, consider reducing the level to warning or info."},"help":{"markdown":"Errors should only be logged when handled. The code logs the error and propogates the exception, consider reducing the level to warning or info.","text":"Errors should only be logged when handled. The code logs the error and propogates the exception, consider reducing the level to warning or info."},"id":"opengrep-rules.python.lang.best-practice.logging-error-without-handling","name":"opengrep-rules.python.lang.best-practice.logging-error-without-handling","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.logging-error-without-handling"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"manually creating a counter - use collections.Counter"},"help":{"markdown":"manually creating a counter - use collections.Counter","text":"manually creating a counter - use collections.Counter"},"id":"opengrep-rules.python.lang.best-practice.manual-counter-create","name":"opengrep-rules.python.lang.best-practice.manual-counter-create","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.manual-counter-create"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"manually creating a defaultdict - use collections.defaultdict(dict)"},"help":{"markdown":"manually creating a defaultdict - use collections.defaultdict(dict)","text":"manually creating a defaultdict - use collections.defaultdict(dict)"},"id":"opengrep-rules.python.lang.best-practice.manual-defaultdict-dict-create","name":"opengrep-rules.python.lang.best-practice.manual-defaultdict-dict-create","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.manual-defaultdict-dict-create"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"manually creating a defaultdict - use collections.defaultdict(list)"},"help":{"markdown":"manually creating a defaultdict - use collections.defaultdict(list)","text":"manually creating a defaultdict - use collections.defaultdict(list)"},"id":"opengrep-rules.python.lang.best-practice.manual-defaultdict-list-create","name":"opengrep-rules.python.lang.best-practice.manual-defaultdict-list-create","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.manual-defaultdict-list-create"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"manually creating a defaultdict - use collections.defaultdict(set)"},"help":{"markdown":"manually creating a defaultdict - use collections.defaultdict(set)","text":"manually creating a defaultdict - use collections.defaultdict(set)"},"id":"opengrep-rules.python.lang.best-practice.manual-defaultdict-set-create","name":"opengrep-rules.python.lang.best-practice.manual-defaultdict-set-create","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.manual-defaultdict-set-create"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Class `$A` has defined `__eq__` which means it should also have defined `__hash__`; "},"help":{"markdown":"Class `$A` has defined `__eq__` which means it should also have defined `__hash__`; ","text":"Class `$A` has defined `__eq__` which means it should also have defined `__hash__`; "},"id":"opengrep-rules.python.lang.best-practice.missing-hash-with-eq","name":"opengrep-rules.python.lang.best-practice.missing-hash-with-eq","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.missing-hash-with-eq"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"file object opened without corresponding close"},"help":{"markdown":"file object opened without corresponding close","text":"file object opened without corresponding close"},"id":"opengrep-rules.python.lang.best-practice.open-never-closed","name":"opengrep-rules.python.lang.best-practice.open-never-closed","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.open-never-closed"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"},"help":{"markdown":"`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO","text":"`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"},"id":"opengrep-rules.python.lang.best-practice.pass-body-fn","name":"opengrep-rules.python.lang.best-practice.pass-body-fn","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.pass-body-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO"},"help":{"markdown":"`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO","text":"`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO"},"id":"opengrep-rules.python.lang.best-practice.pass-body-range","name":"opengrep-rules.python.lang.best-practice.pass-body-range","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.pass-body-range"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Importing the python debugger; did you mean to leave this in?"},"help":{"markdown":"Importing the python debugger; did you mean to leave this in?","text":"Importing the python debugger; did you mean to leave this in?"},"id":"opengrep-rules.python.lang.best-practice.python-debugger-found","name":"opengrep-rules.python.lang.best-practice.python-debugger-found","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.python-debugger-found"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\")."},"help":{"markdown":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").\n\n<b>References:</b>\n - [https://www.python.org/dev/peps/pep-0597/](https://www.python.org/dev/peps/pep-0597/)\n - [https://docs.python.org/3/library/functions.html#open](https://docs.python.org/3/library/functions.html#open)\n","text":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\")."},"id":"opengrep-rules.python.lang.best-practice.unspecified-open-encoding","name":"opengrep-rules.python.lang.best-practice.unspecified-open-encoding","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.best-practice.unspecified-open-encoding"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"the `errors` argument to Popen is only available on Python 3.6+"},"help":{"markdown":"the `errors` argument to Popen is only available on Python 3.6+","text":"the `errors` argument to Popen is only available on Python 3.6+"},"id":"opengrep-rules.python.lang.compatibility.python36-compatibility-Popen1","name":"opengrep-rules.python.lang.compatibility.python36-compatibility-Popen1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python36-compatibility-Popen1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"the `encoding` argument to Popen is only available on Python 3.6+"},"help":{"markdown":"the `encoding` argument to Popen is only available on Python 3.6+","text":"the `encoding` argument to Popen is only available on Python 3.6+"},"id":"opengrep-rules.python.lang.compatibility.python36-compatibility-Popen2","name":"opengrep-rules.python.lang.compatibility.python36-compatibility-Popen2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python36-compatibility-Popen2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"this function is only available on Python 3.6+"},"help":{"markdown":"this function is only available on Python 3.6+","text":"this function is only available on Python 3.6+"},"id":"opengrep-rules.python.lang.compatibility.python36-compatibility-ssl","name":"opengrep-rules.python.lang.compatibility.python36-compatibility-ssl","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python36-compatibility-ssl"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found usage of the 'blocksize' argument in a HTTPConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below."},"help":{"markdown":"Found usage of the 'blocksize' argument in a HTTPConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below.","text":"Found usage of the 'blocksize' argument in a HTTPConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-httpconn","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-httpconn","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-httpconn"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found usage of the 'blocksize' argument in a HTTPSConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below."},"help":{"markdown":"Found usage of the 'blocksize' argument in a HTTPSConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below.","text":"Found usage of the 'blocksize' argument in a HTTPSConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-httpsconn","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-httpsconn","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-httpsconn"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"source_hash' is only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Instead, use another hash function."},"help":{"markdown":"source_hash' is only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Instead, use another hash function.","text":"source_hash' is only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Instead, use another hash function."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-importlib"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions."},"help":{"markdown":"Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.","text":"Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib2","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-importlib2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader."},"help":{"markdown":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader.","text":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib3","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-importlib3","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-importlib3"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"IPv4Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'."},"help":{"markdown":"IPv4Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'.","text":"IPv4Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"IPv4Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'."},"help":{"markdown":"IPv4Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'.","text":"IPv4Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network2","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-ipv4network2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"IPv6Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'."},"help":{"markdown":"IPv6Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'.","text":"IPv6Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"IPv6Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'."},"help":{"markdown":"IPv6Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'.","text":"IPv6Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network2","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-ipv6network2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found usage of the 'monetary' argument in a function call of 'locale.format_string'. This is only available on Python 3.7+ and is therefore not backwards compatible. Instead, remove the 'monetary' argument."},"help":{"markdown":"Found usage of the 'monetary' argument in a function call of 'locale.format_string'. This is only available on Python 3.7+ and is therefore not backwards compatible. Instead, remove the 'monetary' argument.","text":"Found usage of the 'monetary' argument in a function call of 'locale.format_string'. This is only available on Python 3.7+ and is therefore not backwards compatible. Instead, remove the 'monetary' argument."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-locale1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-locale1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-locale1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate $X - n* $Y."},"help":{"markdown":"math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate $X - n* $Y.","text":"math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate $X - n* $Y."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-math1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-math1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-math1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"multiprocessing.Process.close() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use join()."},"help":{"markdown":"multiprocessing.Process.close() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use join().","text":"multiprocessing.Process.close() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use join()."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"multiprocessing.Process.kill() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use terminate()."},"help":{"markdown":"multiprocessing.Process.kill() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use terminate().","text":"multiprocessing.Process.kill() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use terminate()."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess2","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-multiprocess2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"os.preadv() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use a combination of os.readv() and os.pread()."},"help":{"markdown":"os.preadv() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use a combination of os.readv() and os.pread().","text":"os.preadv() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use a combination of os.readv() and os.pread()."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-os1","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-os1","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-os1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"os.pwritev() is only available on Python 3.3+ and is therefore not backwards compatible. Instead, use a combination of pwrite() and writev()."},"help":{"markdown":"os.pwritev() is only available on Python 3.3+ and is therefore not backwards compatible. Instead, use a combination of pwrite() and writev().","text":"os.pwritev() is only available on Python 3.3+ and is therefore not backwards compatible. Instead, use a combination of pwrite() and writev()."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-os2-ok2","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-os2-ok2","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-os2-ok2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"pdb.set_trace() with the header argument is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use set_trace() without the header argument."},"help":{"markdown":"pdb.set_trace() with the header argument is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use set_trace() without the header argument.","text":"pdb.set_trace() with the header argument is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use set_trace() without the header argument."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-pdb","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-pdb","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-pdb"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader."},"help":{"markdown":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader.","text":"Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader."},"id":"opengrep-rules.python.lang.compatibility.python37-compatibility-textiowrapper","name":"opengrep-rules.python.lang.compatibility.python37-compatibility-textiowrapper","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.compatibility.python37-compatibility-textiowrapper"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Class $C inherits from both `$A` and `$B` which both have a method named `$F`; one of these methods will be overwritten."},"help":{"markdown":"Class $C inherits from both `$A` and `$B` which both have a method named `$F`; one of these methods will be overwritten.\n\n<b>References:</b>\n - [https://docs.python.org/3/tutorial/classes.html#multiple-inheritance](https://docs.python.org/3/tutorial/classes.html#multiple-inheritance)\n","text":"Class $C inherits from both `$A` and `$B` which both have a method named `$F`; one of these methods will be overwritten."},"id":"opengrep-rules.python.lang.correctness.baseclass-attribute-override","name":"opengrep-rules.python.lang.correctness.baseclass-attribute-override","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.baseclass-attribute-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Generators can only be consumed once, so in most cases, caching them will cause an error when the already-consumed generator is retrieved from cache."},"help":{"markdown":"Generators can only be consumed once, so in most cases, caching them will cause an error when the already-consumed generator is retrieved from cache.","text":"Generators can only be consumed once, so in most cases, caching them will cause an error when the already-consumed generator is retrieved from cache."},"id":"opengrep-rules.python.lang.correctness.cannot-cache-generators","name":"opengrep-rules.python.lang.correctness.cannot-cache-generators","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.cannot-cache-generators"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`."},"help":{"markdown":"Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`.\n\n<b>References:</b>\n - [https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments)\n","text":"Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`."},"id":"opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-dict","name":"opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-dict","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-dict"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Function $F mutates default list $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new list at that time. For example: `if $D is None: $D = []`."},"help":{"markdown":"Function $F mutates default list $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new list at that time. For example: `if $D is None: $D = []`.\n\n<b>References:</b>\n - [https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments)\n","text":"Function $F mutates default list $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new list at that time. For example: `if $D is None: $D = []`."},"id":"opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-list","name":"opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-list","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.default-mutable-list"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found identical comparison using is. Ensure this is what you intended."},"help":{"markdown":"Found identical comparison using is. Ensure this is what you intended.","text":"Found identical comparison using is. Ensure this is what you intended."},"id":"opengrep-rules.python.lang.correctness.common-mistakes.identical-is-comparison","name":"opengrep-rules.python.lang.correctness.common-mistakes.identical-is-comparison","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.identical-is-comparison"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"In Python 'X is not ...' is different from 'X is (not ...)'. In the latter the 'not' converts the '...' directly to boolean."},"help":{"markdown":"In Python 'X is not ...' is different from 'X is (not ...)'. In the latter the 'not' converts the '...' directly to boolean.","text":"In Python 'X is not ...' is different from 'X is (not ...)'. In the latter the 'not' converts the '...' directly to boolean."},"id":"opengrep-rules.python.lang.correctness.common-mistakes.is-not-is-not","name":"opengrep-rules.python.lang.correctness.common-mistakes.is-not-is-not","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.is-not-is-not"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?"},"help":{"markdown":"Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?","text":"Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?"},"id":"opengrep-rules.python.lang.correctness.common-mistakes.string-concat-in-list","name":"opengrep-rules.python.lang.correctness.common-mistakes.string-concat-in-list","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.string-concat-in-list"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\""},"help":{"markdown":"Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\"","text":"Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\""},"id":"opengrep-rules.python.lang.correctness.common-mistakes.string-is-comparison","name":"opengrep-rules.python.lang.correctness.common-mistakes.string-is-comparison","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.common-mistakes.string-is-comparison"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration"},"help":{"markdown":"It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration\n\n<b>References:</b>\n - [https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects](https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects)\n","text":"It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration"},"id":"opengrep-rules.python.lang.correctness.dict-del-while-iterate","name":"opengrep-rules.python.lang.correctness.dict-del-while-iterate","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.dict-del-while-iterate"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`"},"help":{"markdown":"In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`","text":"In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`"},"id":"opengrep-rules.python.lang.correctness.exceptions.raise-not-base-exception","name":"opengrep-rules.python.lang.correctness.exceptions.raise-not-base-exception","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.exceptions.raise-not-base-exception"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a file object that is redefined and never closed. This could leak file descriptors and unnecessarily consume system resources."},"help":{"markdown":"Detected a file object that is redefined and never closed. This could leak file descriptors and unnecessarily consume system resources.","text":"Detected a file object that is redefined and never closed. This could leak file descriptors and unnecessarily consume system resources."},"id":"opengrep-rules.python.lang.correctness.file-object-redefined-before-close","name":"opengrep-rules.python.lang.correctness.file-object-redefined-before-close","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.file-object-redefined-before-close"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"It appears that `$LIST` is a list that is being modified while in a for loop. This will likely cause a runtime error or an infinite loop."},"help":{"markdown":"It appears that `$LIST` is a list that is being modified while in a for loop. This will likely cause a runtime error or an infinite loop.\n\n<b>References:</b>\n - [https://unspecified.wordpress.com/2009/02/12/thou-shalt-not-modify-a-list-during-iteration/](https://unspecified.wordpress.com/2009/02/12/thou-shalt-not-modify-a-list-during-iteration/)\n","text":"It appears that `$LIST` is a list that is being modified while in a for loop. This will likely cause a runtime error or an infinite loop."},"id":"opengrep-rules.python.lang.correctness.list-modify-while-iterate","name":"opengrep-rules.python.lang.correctness.list-modify-while-iterate","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.list-modify-while-iterate"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using strings as booleans in Python has unexpected results. `\"one\" and \"two\"` will return \"two\". `\"one\" or \"two\"` will return \"one\". In Python, strings are truthy, and strings with a non-zero length evaluate to True."},"help":{"markdown":"Using strings as booleans in Python has unexpected results. `\"one\" and \"two\"` will return \"two\". `\"one\" or \"two\"` will return \"one\". In Python, strings are truthy, and strings with a non-zero length evaluate to True.","text":"Using strings as booleans in Python has unexpected results. `\"one\" and \"two\"` will return \"two\". `\"one\" or \"two\"` will return \"one\". In Python, strings are truthy, and strings with a non-zero length evaluate to True."},"id":"opengrep-rules.python.lang.correctness.no-strings-as-booleans","name":"opengrep-rules.python.lang.correctness.no-strings-as-booleans","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.no-strings-as-booleans"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code"},"help":{"markdown":"pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code","text":"pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code"},"id":"opengrep-rules.python.lang.correctness.pdb-remove","name":"opengrep-rules.python.lang.correctness.pdb-remove","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.pdb-remove"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"snapshot.assert_match makes use of pathlib to create files. Patching $METHOD may result in unexpected snapshot behavior"},"help":{"markdown":"snapshot.assert_match makes use of pathlib to create files. Patching $METHOD may result in unexpected snapshot behavior\n\n<b>References:</b>\n - [https://github.com/returntocorp/semgrep/pull/5459](https://github.com/returntocorp/semgrep/pull/5459)\n - [https://pypi.org/project/pytest-snapshot/](https://pypi.org/project/pytest-snapshot/)\n","text":"snapshot.assert_match makes use of pathlib to create files. Patching $METHOD may result in unexpected snapshot behavior"},"id":"opengrep-rules.python.lang.correctness.pytest-assert_match-after-path-patch","name":"opengrep-rules.python.lang.correctness.pytest-assert_match-after-path-patch","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.pytest-assert_match-after-path-patch"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`return` should never appear inside a class __init__ function. This will cause a runtime error."},"help":{"markdown":"`return` should never appear inside a class __init__ function. This will cause a runtime error.","text":"`return` should never appear inside a class __init__ function. This will cause a runtime error."},"id":"opengrep-rules.python.lang.correctness.return-in-init","name":"opengrep-rules.python.lang.correctness.return-in-init","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.return-in-init"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Synchronous time.sleep in async code will block the event loop and not allow other tasks to execute. Use asyncio.sleep() instead."},"help":{"markdown":"Synchronous time.sleep in async code will block the event loop and not allow other tasks to execute. Use asyncio.sleep() instead.","text":"Synchronous time.sleep in async code will block the event loop and not allow other tasks to execute. Use asyncio.sleep() instead."},"id":"opengrep-rules.python.lang.correctness.sync-sleep-in-async-code","name":"opengrep-rules.python.lang.correctness.sync-sleep-in-async-code","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.sync-sleep-in-async-code"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating it, someone else may have beaten you to the punch."},"help":{"markdown":"Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating it, someone else may have beaten you to the punch.","text":"Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating it, someone else may have beaten you to the punch."},"id":"opengrep-rules.python.lang.correctness.tempfile.tempfile-insecure","name":"opengrep-rules.python.lang.correctness.tempfile.tempfile-insecure","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.tempfile.tempfile-insecure"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."},"help":{"markdown":"Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.","text":"Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."},"id":"opengrep-rules.python.lang.correctness.tempfile.tempfile-without-flush","name":"opengrep-rules.python.lang.correctness.tempfile.tempfile-without-flush","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.tempfile.tempfile-without-flush"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Comparison without assertion. The result of this comparison is not used. Perhaps this expression is missing an `assert` keyword."},"help":{"markdown":"Comparison without assertion. The result of this comparison is not used. Perhaps this expression is missing an `assert` keyword.","text":"Comparison without assertion. The result of this comparison is not used. Perhaps this expression is missing an `assert` keyword."},"id":"opengrep-rules.python.lang.correctness.test-is-missing-assert","name":"opengrep-rules.python.lang.correctness.test-is-missing-assert","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.test-is-missing-assert"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`."},"help":{"markdown":"Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`.\n\n<b>References:</b>\n - [https://superfastpython.com/threadpoolexecutor-exception-handling/](https://superfastpython.com/threadpoolexecutor-exception-handling/)\n","text":"Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`."},"id":"opengrep-rules.python.lang.correctness.uncaught-executor-exceptions","name":"opengrep-rules.python.lang.correctness.uncaught-executor-exceptions","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.uncaught-executor-exceptions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead"},"help":{"markdown":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead\n\n<b>References:</b>\n - [https://docs.python.org/3/library/subprocess.html#subprocess.check_call](https://docs.python.org/3/library/subprocess.html#subprocess.check_call)\n","text":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead"},"id":"opengrep-rules.python.lang.correctness.unchecked-subprocess-call","name":"opengrep-rules.python.lang.correctness.unchecked-subprocess-call","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.unchecked-subprocess-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of `exit`. Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations."},"help":{"markdown":"Detected use of `exit`. Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python](https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python)\n","text":"Detected use of `exit`. Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations."},"id":"opengrep-rules.python.lang.correctness.use-sys-exit","name":"opengrep-rules.python.lang.correctness.use-sys-exit","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.use-sys-exit"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This expression is always True: `$X == $X` or `$X != $X`. If testing for floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is complex."},"help":{"markdown":"This expression is always True: `$X == $X` or `$X != $X`. If testing for floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is complex.","text":"This expression is always True: `$X == $X` or `$X != $X`. If testing for floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is complex."},"id":"opengrep-rules.python.lang.correctness.useless-eqeq","name":"opengrep-rules.python.lang.correctness.useless-eqeq","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.useless-eqeq"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The file object '$FD' was opened in read mode, but is being written to. This will cause a runtime error."},"help":{"markdown":"The file object '$FD' was opened in read mode, but is being written to. This will cause a runtime error.","text":"The file object '$FD' was opened in read mode, but is being written to. This will cause a runtime error."},"id":"opengrep-rules.python.lang.correctness.writing-to-file-in-read-mode","name":"opengrep-rules.python.lang.correctness.writing-to-file-in-read-mode","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.writing-to-file-in-read-mode"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`yield` should never appear inside a class __init__ function. This will cause a runtime error."},"help":{"markdown":"`yield` should never appear inside a class __init__ function. This will cause a runtime error.","text":"`yield` should never appear inside a class __init__ function. This will cause a runtime error."},"id":"opengrep-rules.python.lang.correctness.yield-in-init","name":"opengrep-rules.python.lang.correctness.yield-in-init","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.correctness.yield-in-init"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"code after return statement will not be executed"},"help":{"markdown":"code after return statement will not be executed","text":"code after return statement will not be executed"},"id":"opengrep-rules.python.lang.maintainability.code-after-unconditional-return","name":"opengrep-rules.python.lang.maintainability.code-after-unconditional-return","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.code-after-unconditional-return"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This expression will evaluate to be ONLY value the of the `else` clause if the condition `$EXPRESSION` is false. If you meant to do list concatenation, put parentheses around the entire concatenation expression, like this: `['a', 'b', 'c'] + (['d'] if x else ['e'])`. If this is the intended behavior, the expression may be confusing to others, and you may wish to add parentheses for readability."},"help":{"markdown":"This expression will evaluate to be ONLY value the of the `else` clause if the condition `$EXPRESSION` is false. If you meant to do list concatenation, put parentheses around the entire concatenation expression, like this: `['a', 'b', 'c'] + (['d'] if x else ['e'])`. If this is the intended behavior, the expression may be confusing to others, and you may wish to add parentheses for readability.","text":"This expression will evaluate to be ONLY value the of the `else` clause if the condition `$EXPRESSION` is false. If you meant to do list concatenation, put parentheses around the entire concatenation expression, like this: `['a', 'b', 'c'] + (['d'] if x else ['e'])`. If this is the intended behavior, the expression may be confusing to others, and you may wish to add parentheses for readability."},"id":"opengrep-rules.python.lang.maintainability.improper-list-concat","name":"opengrep-rules.python.lang.maintainability.improper-list-concat","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.improper-list-concat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Is \"$FUNC\" a function or an attribute? If it is a function, you may have meant $X.$FUNC() because $X.$FUNC is always true."},"help":{"markdown":"Is \"$FUNC\" a function or an attribute? If it is a function, you may have meant $X.$FUNC() because $X.$FUNC is always true.","text":"Is \"$FUNC\" a function or an attribute? If it is a function, you may have meant $X.$FUNC() because $X.$FUNC is always true."},"id":"opengrep-rules.python.lang.maintainability.is-function-without-parentheses","name":"opengrep-rules.python.lang.maintainability.is-function-without-parentheses","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.is-function-without-parentheses"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`return` only makes sense inside a function"},"help":{"markdown":"`return` only makes sense inside a function","text":"`return` only makes sense inside a function"},"id":"opengrep-rules.python.lang.maintainability.return-not-in-function","name":"opengrep-rules.python.lang.maintainability.return-not-in-function","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.return-not-in-function"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"key `$Y` in `$X` is assigned twice; the first assignment is useless"},"help":{"markdown":"key `$Y` in `$X` is assigned twice; the first assignment is useless","text":"key `$Y` in `$X` is assigned twice; the first assignment is useless"},"id":"opengrep-rules.python.lang.maintainability.useless-assignment-keyed","name":"opengrep-rules.python.lang.maintainability.useless-assignment-keyed","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-assignment-keyed"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Useless if statement; both blocks have the same body"},"help":{"markdown":"Useless if statement; both blocks have the same body\n\n<b>References:</b>\n - [https://docs.python.org/3/tutorial/controlflow.html](https://docs.python.org/3/tutorial/controlflow.html)\n","text":"Useless if statement; both blocks have the same body"},"id":"opengrep-rules.python.lang.maintainability.useless-if-body","name":"opengrep-rules.python.lang.maintainability.useless-if-body","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-if-body"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"if block checks for the same condition on both branches (`$X`)"},"help":{"markdown":"if block checks for the same condition on both branches (`$X`)\n\n<b>References:</b>\n - [https://docs.python.org/3/tutorial/controlflow.html](https://docs.python.org/3/tutorial/controlflow.html)\n","text":"if block checks for the same condition on both branches (`$X`)"},"id":"opengrep-rules.python.lang.maintainability.useless-if-conditional","name":"opengrep-rules.python.lang.maintainability.useless-if-conditional","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-if-conditional"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"function `$FF` is defined inside a function but never used"},"help":{"markdown":"function `$FF` is defined inside a function but never used","text":"function `$FF` is defined inside a function but never used"},"id":"opengrep-rules.python.lang.maintainability.useless-inner-function","name":"opengrep-rules.python.lang.maintainability.useless-inner-function","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-inner-function"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"key `$X` is uselessly assigned twice"},"help":{"markdown":"key `$X` is uselessly assigned twice\n\n<b>References:</b>\n - [https://docs.python.org/3/library/stdtypes.html#mapping-types-dict](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)\n","text":"key `$X` is uselessly assigned twice"},"id":"opengrep-rules.python.lang.maintainability.useless-literal","name":"opengrep-rules.python.lang.maintainability.useless-literal","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-literal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"`$X` is uselessly assigned twice inside the creation of the set"},"help":{"markdown":"`$X` is uselessly assigned twice inside the creation of the set\n\n<b>References:</b>\n - [https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)\n","text":"`$X` is uselessly assigned twice inside the creation of the set"},"id":"opengrep-rules.python.lang.maintainability.useless-literal-set","name":"opengrep-rules.python.lang.maintainability.useless-literal-set","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.maintainability.useless-literal-set"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals` namespaces. Make sure that no arbitrary value can be written as the annotation and passed to `typing.get_type_hints` function."},"help":{"markdown":"Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals` namespaces. Make sure that no arbitrary value can be written as the annotation and passed to `typing.get_type_hints` function.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/typing.html#typing.get_type_hints](https://docs.python.org/3/library/typing.html#typing.get_type_hints)\n","text":"Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals` namespaces. Make sure that no arbitrary value can be written as the annotation and passed to `typing.get_type_hints` function."},"id":"opengrep-rules.python.lang.security.audit.dangerous-annotations-usage","name":"opengrep-rules.python.lang.security.audit.dangerous-annotations-usage","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-annotations-usage"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected 'create_subprocess_exec' function with user controlled data. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected 'create_subprocess_exec' function with user controlled data. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected 'create_subprocess_exec' function with user controlled data. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$LOOP.subprocess_exec' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected subprocess function '$LOOP.subprocess_exec' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected subprocess function '$LOOP.subprocess_exec' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected asyncio subprocess function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected asyncio subprocess function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html](https://docs.python.org/3/library/asyncio-subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected asyncio subprocess function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/asyncio-subprocess.html](https://docs.python.org/3/library/asyncio-subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found dynamic content inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"help":{"markdown":"Found dynamic content inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"id":"opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-audit","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-interactive-code-run-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"help":{"markdown":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"id":"opengrep-rules.python.lang.security.audit.dangerous-os-exec-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-os-exec-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-os-exec-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"help":{"markdown":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"id":"opengrep-rules.python.lang.security.audit.dangerous-os-exec-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-os-exec-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-os-exec-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"help":{"markdown":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."},"id":"opengrep-rules.python.lang.security.audit.dangerous-spawn-process-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-spawn-process-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-spawn-process-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"help":{"markdown":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"id":"opengrep-rules.python.lang.security.audit.dangerous-spawn-process-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-spawn-process-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-spawn-process-tainted-env-args"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found dynamic content in `run_string`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"help":{"markdown":"Found dynamic content in `run_string`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://bugs.python.org/issue43472](https://bugs.python.org/issue43472)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content in `run_string`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"id":"opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-audit","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://bugs.python.org/issue43472](https://bugs.python.org/issue43472)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$FUNC' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected subprocess function '$FUNC' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected subprocess function '$FUNC' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'."},"help":{"markdown":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'."},"id":"opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"help":{"markdown":"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"id":"opengrep-rules.python.lang.security.audit.dangerous-system-call-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-system-call-audit","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-system-call-audit"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"help":{"markdown":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"id":"opengrep-rules.python.lang.security.audit.dangerous-system-call-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-system-call-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-system-call-tainted-env-args"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found dynamic content in `run_in_subinterp`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"help":{"markdown":"Found dynamic content in `run_in_subinterp`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found dynamic content in `run_in_subinterp`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here."},"id":"opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit","name":"opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args","name":"opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."},"help":{"markdown":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n","text":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."},"id":"opengrep-rules.python.lang.security.audit.dynamic-urllib-use-detected","name":"opengrep-rules.python.lang.security.audit.dynamic-urllib-use-detected","properties":{"precision":"very-high","tags":["CWE-939: Improper Authorization in Handler for Custom URL Scheme","LOW CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.dynamic-urllib-use-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.python.lang.security.audit.eval-detected","name":"opengrep-rules.python.lang.security.audit.eval-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.eval-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"id":"opengrep-rules.python.lang.security.audit.exec-detected","name":"opengrep-rules.python.lang.security.audit.exec-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.exec-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected possible formatted SQL query. Use parameterized queries instead."},"help":{"markdown":"Detected possible formatted SQL query. Use parameterized queries instead.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n","text":"Detected possible formatted SQL query. Use parameterized queries instead."},"id":"opengrep-rules.python.lang.security.audit.formatted-sql-query","name":"opengrep-rules.python.lang.security.audit.formatted-sql-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.formatted-sql-query"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied."},"help":{"markdown":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied."},"id":"opengrep-rules.python.lang.security.audit.hardcoded-password-default-argument","name":"opengrep-rules.python.lang.security.audit.hardcoded-password-default-argument","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.hardcoded-password-default-argument"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."},"help":{"markdown":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\n","text":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."},"id":"opengrep-rules.python.lang.security.audit.httpsconnection-detected","name":"opengrep-rules.python.lang.security.audit.httpsconnection-detected","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.httpsconnection-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else."},"help":{"markdown":"These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else."},"id":"opengrep-rules.python.lang.security.audit.insecure-file-permissions","name":"opengrep-rules.python.lang.security.audit.insecure-file-permissions","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-file-permissions"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead."},"help":{"markdown":"The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS](https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS)\n","text":"The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls","name":"opengrep-rules.python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."},"help":{"markdown":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context","name":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."},"help":{"markdown":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-with-http","name":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-with-http","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-session-with-http"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."},"help":{"markdown":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http","name":"opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel."},"help":{"markdown":"The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/ssl.html#cipher-selection](https://docs.python.org/3/library/ssl.html#cipher-selection)\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers)\n","text":"The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.ssl.no-set-ciphers","name":"opengrep-rules.python.lang.security.audit.insecure-transport.ssl.no-set-ciphers","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.ssl.no-set-ciphers"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"help":{"markdown":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open)\n","text":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'ftp://'. Information sent over this connection will be unencrypted. Consider using SFTP instead. urllib does not support SFTP, so consider a library which supports SFTP."},"help":{"markdown":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'ftp://'. Information sent over this connection will be unencrypted. Consider using SFTP instead. urllib does not support SFTP, so consider a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open)\n","text":"Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'ftp://'. Information sent over this connection will be unencrypted. Consider using SFTP instead. urllib does not support SFTP, so consider a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."},"help":{"markdown":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.Request](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request)\n","text":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP instead. urllib does not support SFTP natively, so consider using a library which supports SFTP."},"help":{"markdown":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP instead. urllib does not support SFTP natively, so consider using a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.Request](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request)\n","text":"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP instead. urllib does not support SFTP natively, so consider using a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead."},"help":{"markdown":"Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen)\n","text":"Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted. Consider using SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP."},"help":{"markdown":"Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted. Consider using SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen)\n","text":"Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted. Consider using SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an unsecured transmission channel. 'URLopener.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"help":{"markdown":"Detected an unsecured transmission channel. 'URLopener.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open)\n","text":"Detected an unsecured transmission channel. 'URLopener.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure transmission channel. 'URLopener.open(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP."},"help":{"markdown":"Detected an insecure transmission channel. 'URLopener.open(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open)\n","text":"Detected an insecure transmission channel. 'URLopener.open(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"help":{"markdown":"Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve)\n","text":"Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is being used with 'http://'. Use 'https://' instead to secure the channel."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure transmission channel. 'URLopener.retrieve(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP."},"help":{"markdown":"Detected an insecure transmission channel. 'URLopener.retrieve(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve)\n","text":"Detected an insecure transmission channel. 'URLopener.retrieve(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead."},"help":{"markdown":"Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve)\n","text":"Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP."},"help":{"markdown":"Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve)\n","text":"Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP."},"id":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp","name":"opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations."},"help":{"markdown":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen](https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen)\n","text":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations."},"id":"opengrep-rules.python.lang.security.audit.logging.listen-eval","name":"opengrep-rules.python.lang.security.audit.logging.listen-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.logging.listen-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information."},"help":{"markdown":"Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n","text":"Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information."},"id":"opengrep-rules.python.lang.security.audit.logging.python-logger-credential-disclosure","name":"opengrep-rules.python.lang.security.audit.logging.python-logger-credential-disclosure","properties":{"precision":"very-high","tags":["CWE-532: Insertion of Sensitive Information into Log File","MEDIUM CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.logging.python-logger-credential-disclosure"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping."},"help":{"markdown":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\n\n<b>References:</b>\n - [https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping](https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping)\n - [https://jinja.palletsprojects.com/en/2.11.x/intro/#](https://jinja.palletsprojects.com/en/2.11.x/intro/#)\n","text":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping."},"id":"opengrep-rules.python.lang.security.audit.mako-templates-detected","name":"opengrep-rules.python.lang.security.audit.mako-templates-detected","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.mako-templates-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security"},"help":{"markdown":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\n\n<b>References:</b>\n - [https://docs.python.org/3/library/marshal.html?highlight=security](https://docs.python.org/3/library/marshal.html?highlight=security)\n","text":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security"},"id":"opengrep-rules.python.lang.security.audit.marshal-usage","name":"opengrep-rules.python.lang.security.audit.marshal-usage","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.marshal-usage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://docs.python.org/3/library/hashlib.html#hashlib.scrypt](https://docs.python.org/3/library/hashlib.html#hashlib.scrypt)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`."},"id":"opengrep-rules.python.lang.security.audit.md5-used-as-password","name":"opengrep-rules.python.lang.security.audit.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"},"help":{"markdown":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\n\n<b>References:</b>\n - [https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection](https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection)\n","text":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"},"id":"opengrep-rules.python.lang.security.audit.multiprocessing-recv","name":"opengrep-rules.python.lang.security.audit.multiprocessing-recv","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.multiprocessing-recv"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."},"help":{"markdown":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."},"id":"opengrep-rules.python.lang.security.audit.network.avoid-bind-to-all-interfaces","name":"opengrep-rules.python.lang.security.audit.network.avoid-bind-to-all-interfaces","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.network.avoid-bind-to-all-interfaces"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"certificate verification explicitly disabled, insecure connections possible"},"help":{"markdown":"certificate verification explicitly disabled, insecure connections possible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"certificate verification explicitly disabled, insecure connections possible"},"id":"opengrep-rules.python.lang.security.audit.network.disabled-cert-validation","name":"opengrep-rules.python.lang.security.audit.network.disabled-cert-validation","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.network.disabled-cert-validation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."},"help":{"markdown":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\n\n<b>References:</b>\n - [https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool](https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool)\n","text":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."},"id":"opengrep-rules.python.lang.security.audit.network.http-not-https-connection","name":"opengrep-rules.python.lang.security.audit.network.http-not-https-connection","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.network.http-not-https-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."},"help":{"markdown":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."},"id":"opengrep-rules.python.lang.security.audit.non-literal-import","name":"opengrep-rules.python.lang.security.audit.non-literal-import","properties":{"precision":"very-high","tags":["CWE-706: Use of Incorrectly-Resolved Name or Reference","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.non-literal-import"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead."},"help":{"markdown":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\n\n<b>References:</b>\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy)\n","text":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead."},"id":"opengrep-rules.python.lang.security.audit.paramiko-implicit-trust-host-key","name":"opengrep-rules.python.lang.security.audit.paramiko-implicit-trust-host-key","properties":{"precision":"very-high","tags":["CWE-322: Key Exchange without Entity Authentication","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.paramiko-implicit-trust-host-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."},"help":{"markdown":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\n\n<b>References:</b>\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command)\n - [https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py)\n","text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."},"id":"opengrep-rules.python.lang.security.audit.paramiko.paramiko-exec-command","name":"opengrep-rules.python.lang.security.audit.paramiko.paramiko-exec-command","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.paramiko.paramiko-exec-command"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT"},"help":{"markdown":"Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/553.html](https://cwe.mitre.org/data/definitions/553.html)\n","text":"Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT"},"id":"opengrep-rules.python.lang.security.audit.python-reverse-shell","name":"opengrep-rules.python.lang.security.audit.python-reverse-shell","properties":{"precision":"very-high","tags":["CWE-553: Command Shell in Externally Accessible Directory","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.python-reverse-shell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."},"help":{"markdown":"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)\n","text":"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."},"id":"opengrep-rules.python.lang.security.audit.regex_dos","name":"opengrep-rules.python.lang.security.audit.regex_dos","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.regex_dos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in an aiopg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can create parameterized queries like so: 'cur.execute(\"SELECT %s FROM table\", (user_value,))'."},"help":{"markdown":"Detected string concatenation with a non-literal variable in an aiopg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can create parameterized queries like so: 'cur.execute(\"SELECT %s FROM table\", (user_value,))'.\n\n<b>References:</b>\n - [https://github.com/aio-libs/aiopg](https://github.com/aio-libs/aiopg)\n","text":"Detected string concatenation with a non-literal variable in an aiopg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can create parameterized queries like so: 'cur.execute(\"SELECT %s FROM table\", (user_value,))'."},"id":"opengrep-rules.python.lang.security.audit.sqli.aiopg-sqli","name":"opengrep-rules.python.lang.security.audit.sqli.aiopg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.sqli.aiopg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'\n\n<b>References:</b>\n - [https://github.com/MagicStack/asyncpg](https://github.com/MagicStack/asyncpg)\n - [https://magicstack.github.io/asyncpg/current/](https://magicstack.github.io/asyncpg/current/)\n","text":"Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'"},"id":"opengrep-rules.python.lang.security.audit.sqli.asyncpg-sqli","name":"opengrep-rules.python.lang.security.audit.sqli.asyncpg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.sqli.asyncpg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a pg8000 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v) FROM table\")'"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a pg8000 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v) FROM table\")'\n\n<b>References:</b>\n - [https://github.com/tlocke/pg8000](https://github.com/tlocke/pg8000)\n","text":"Detected string concatenation with a non-literal variable in a pg8000 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v) FROM table\")'"},"id":"opengrep-rules.python.lang.security.audit.sqli.pg8000-sqli","name":"opengrep-rules.python.lang.security.audit.sqli.pg8000-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.sqli.pg8000-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"},"help":{"markdown":"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'\n\n<b>References:</b>\n - [https://www.psycopg.org/docs/sql.html](https://www.psycopg.org/docs/sql.html)\n","text":"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"},"id":"opengrep-rules.python.lang.security.audit.sqli.psycopg-sqli","name":"opengrep-rules.python.lang.security.audit.sqli.psycopg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.sqli.psycopg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."},"help":{"markdown":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/ssl.html#ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket)\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket)\n","text":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."},"id":"opengrep-rules.python.lang.security.audit.ssl-wrap-socket-is-deprecated","name":"opengrep-rules.python.lang.security.audit.ssl-wrap-socket-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.ssl-wrap-socket-is-deprecated"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."},"help":{"markdown":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n","text":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."},"id":"opengrep-rules.python.lang.security.audit.subprocess-shell-true","name":"opengrep-rules.python.lang.security.audit.subprocess-shell-true","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.subprocess-shell-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information."},"help":{"markdown":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\n\n<b>References:</b>\n - [https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt)\n","text":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information."},"id":"opengrep-rules.python.lang.security.audit.system-wildcard-detected","name":"opengrep-rules.python.lang.security.audit.system-wildcard-detected","properties":{"precision":"very-high","tags":["CWE-155: Improper Neutralization of Wildcards or Matching Symbols","LOW CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.system-wildcard-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Telnet does not encrypt communications. Use SSH instead."},"help":{"markdown":"Telnet does not encrypt communications. Use SSH instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/telnetlib.html](https://docs.python.org/3/library/telnetlib.html)\n","text":"Telnet does not encrypt communications. Use SSH instead."},"id":"opengrep-rules.python.lang.security.audit.telnetlib","name":"opengrep-rules.python.lang.security.audit.telnetlib","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.telnetlib"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."},"help":{"markdown":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n - [https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2)\n","text":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."},"id":"opengrep-rules.python.lang.security.audit.weak-ssl-version","name":"opengrep-rules.python.lang.security.audit.weak-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.audit.weak-ssl-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."},"help":{"markdown":"Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n<b>References:</b>\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n","text":"Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."},"id":"opengrep-rules.python.lang.security.dangerous-globals-use","name":"opengrep-rules.python.lang.security.dangerous-globals-use","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-globals-use"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.dangerous-interactive-code-run","name":"opengrep-rules.python.lang.security.dangerous-interactive-code-run","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-interactive-code-run"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"help":{"markdown":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"id":"opengrep-rules.python.lang.security.dangerous-os-exec","name":"opengrep-rules.python.lang.security.dangerous-os-exec","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-os-exec"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"help":{"markdown":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."},"id":"opengrep-rules.python.lang.security.dangerous-spawn-process","name":"opengrep-rules.python.lang.security.dangerous-spawn-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-spawn-process"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://bugs.python.org/issue43472](https://bugs.python.org/issue43472)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.dangerous-subinterpreters-run-string","name":"opengrep-rules.python.lang.security.dangerous-subinterpreters-run-string","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-subinterpreters-run-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."},"help":{"markdown":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."},"id":"opengrep-rules.python.lang.security.dangerous-subprocess-use","name":"opengrep-rules.python.lang.security.dangerous-subprocess-use","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-subprocess-use"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"help":{"markdown":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."},"id":"opengrep-rules.python.lang.security.dangerous-system-call","name":"opengrep-rules.python.lang.security.dangerous-system-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-system-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"help":{"markdown":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n","text":"Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."},"id":"opengrep-rules.python.lang.security.dangerous-testcapi-run-in-subinterp","name":"opengrep-rules.python.lang.security.dangerous-testcapi-run-in-subinterp","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.dangerous-testcapi-run-in-subinterp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-cPickle","name":"opengrep-rules.python.lang.security.deserialization.avoid-cPickle","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-cPickle"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-dill","name":"opengrep-rules.python.lang.security.deserialization.avoid-dill","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-dill"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data using `json` module."},"help":{"markdown":"Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data using `json` module.\n\n<b>References:</b>\n - [https://github.com/jsonpickle/jsonpickle#jsonpickle](https://github.com/jsonpickle/jsonpickle#jsonpickle)\n - [https://www.exploit-db.com/exploits/49585](https://www.exploit-db.com/exploits/49585)\n","text":"Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data using `json` module."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-jsonpickle","name":"opengrep-rules.python.lang.security.deserialization.avoid-jsonpickle","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-jsonpickle"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-pickle","name":"opengrep-rules.python.lang.security.deserialization.avoid-pickle","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-pickle"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead."},"help":{"markdown":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\n\n<b>References:</b>\n - [https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation](https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation)\n - [https://nvd.nist.gov/vuln/detail/CVE-2017-18342](https://nvd.nist.gov/vuln/detail/CVE-2017-18342)\n","text":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-pyyaml-load","name":"opengrep-rules.python.lang.security.deserialization.avoid-pyyaml-load","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-pyyaml-load"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-shelve","name":"opengrep-rules.python.lang.security.deserialization.avoid-shelve","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-shelve"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead."},"help":{"markdown":"Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.\n\n<b>References:</b>\n - [https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ](https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ)\n","text":"Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead."},"id":"opengrep-rules.python.lang.security.deserialization.avoid-unsafe-ruamel","name":"opengrep-rules.python.lang.security.deserialization.avoid-unsafe-ruamel","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.deserialization.avoid-unsafe-ruamel"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.python.lang.security.insecure-hash-algorithm-md5","name":"opengrep-rules.python.lang.security.insecure-hash-algorithm-md5","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.insecure-hash-algorithm-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.python.lang.security.insecure-hash-algorithm-sha1","name":"opengrep-rules.python.lang.security.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."},"help":{"markdown":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."},"id":"opengrep-rules.python.lang.security.insecure-hash-function","name":"opengrep-rules.python.lang.security.insecure-hash-function","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.insecure-hash-function"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."},"help":{"markdown":"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n<b>References:</b>\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n","text":"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."},"id":"opengrep-rules.python.lang.security.insecure-uuid-version","name":"opengrep-rules.python.lang.security.insecure-uuid-version","properties":{"precision":"very-high","tags":["CWE-330: Use of Insufficiently Random Values","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.insecure-uuid-version"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead."},"help":{"markdown":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/ssl.html#ssl-security](https://docs.python.org/3/library/ssl.html#ssl-security)\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\n","text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead."},"id":"opengrep-rules.python.lang.security.unverified-ssl-context","name":"opengrep-rules.python.lang.security.unverified-ssl-context","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.unverified-ssl-context"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service."},"help":{"markdown":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n","text":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service."},"id":"opengrep-rules.python.lang.security.use-defused-xml","name":"opengrep-rules.python.lang.security.use-defused-xml","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.use-defused-xml"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."},"help":{"markdown":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\n\n<b>References:</b>\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n","text":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."},"id":"opengrep-rules.python.lang.security.use-defused-xml-parse","name":"opengrep-rules.python.lang.security.use-defused-xml-parse","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.use-defused-xml-parse"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead."},"help":{"markdown":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\n\n<b>References:</b>\n - [https://pypi.org/project/defusedxml/](https://pypi.org/project/defusedxml/)\n - [https://docs.python.org/3/library/xml.html#xml-vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)\n","text":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead."},"id":"opengrep-rules.python.lang.security.use-defused-xmlrpc","name":"opengrep-rules.python.lang.security.use-defused-xmlrpc","properties":{"precision":"very-high","tags":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.use-defused-xmlrpc"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"help":{"markdown":"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.\n\n<b>References:</b>\n - [https://github.com/raphaelm/defusedcsv](https://github.com/raphaelm/defusedcsv)\n - [https://owasp.org/www-community/attacks/CSV_Injection](https://owasp.org/www-community/attacks/CSV_Injection)\n - [https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities](https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities)\n","text":"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."},"id":"opengrep-rules.python.lang.security.use-defusedcsv","name":"opengrep-rules.python.lang.security.use-defusedcsv","properties":{"precision":"very-high","tags":["CWE-1236: Improper Neutralization of Formula Elements in a CSV File","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.lang.security.use-defusedcsv"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "},"help":{"markdown":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. \n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "},"id":"opengrep-rules.python.pycryptodome.security.crypto-mode-without-authentication","name":"opengrep-rules.python.pycryptodome.security.crypto-mode-without-authentication","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.crypto-mode-without-authentication"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"help":{"markdown":"Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\n - [https://www.pycryptodome.org/src/cipher/cipher](https://www.pycryptodome.org/src/cipher/cipher)\n","text":"Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"id":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-blowfish","name":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-blowfish","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-blowfish"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"help":{"markdown":"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n - [https://www.pycryptodome.org/src/cipher/cipher](https://www.pycryptodome.org/src/cipher/cipher)\n","text":"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"id":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-des","name":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-des","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-des"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"help":{"markdown":"Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n - [https://www.pycryptodome.org/src/cipher/cipher](https://www.pycryptodome.org/src/cipher/cipher)\n","text":"Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"id":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc2","name":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc2","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"help":{"markdown":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n - [https://www.pycryptodome.org/src/cipher/cipher](https://www.pycryptodome.org/src/cipher/cipher)\n","text":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."},"id":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc4","name":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-rc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."},"help":{"markdown":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\n","text":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."},"id":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-xor","name":"opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-xor","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-cipher-algorithm-xor"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"help":{"markdown":"Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.\n\n<b>References:</b>\n - [https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms](https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"id":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md2","name":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md2","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"help":{"markdown":"Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.\n\n<b>References:</b>\n - [https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms](https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"id":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md4","name":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead.\n\n<b>References:</b>\n - [https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms](https://www.pycryptodome.org/src/hash/hash#modern-hash-algorithms)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.  Use a modern hash algorithm from the SHA-2, SHA-3, or BLAKE2 family instead."},"id":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md5","name":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md5","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n<b>References:</b>\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"id":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-sha1","name":"opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."},"help":{"markdown":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.\n\n<b>References:</b>\n - [https://www.pycryptodome.org/src/public_key/dsa](https://www.pycryptodome.org/src/public_key/dsa)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf)\n","text":"Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."},"id":"opengrep-rules.python.pycryptodome.security.insufficient-dsa-key-size","name":"opengrep-rules.python.pycryptodome.security.insufficient-dsa-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insufficient-dsa-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher."},"help":{"markdown":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.\n\n<b>References:</b>\n - [https://www.pycryptodome.org/src/public_key/rsa#rsa](https://www.pycryptodome.org/src/public_key/rsa#rsa)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf)\n","text":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher."},"id":"opengrep-rules.python.pycryptodome.security.insufficient-rsa-key-size","name":"opengrep-rules.python.pycryptodome.security.insufficient-rsa-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pycryptodome.security.insufficient-rsa-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details)."},"help":{"markdown":"Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/477.html](https://cwe.mitre.org/data/definitions/477.html)\n","text":"Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details)."},"id":"opengrep-rules.python.pymongo.security.mongo-client-bad-auth","name":"opengrep-rules.python.pymongo.security.mongo-client-bad-auth","properties":{"precision":"very-high","tags":["CWE-477: Use of Obsolete Function","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pymongo.security.mongo-client-bad-auth"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-default","name":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-default","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-value","name":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-value","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-httponly-unsafe-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-samesite","name":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-samesite","properties":{"precision":"very-high","tags":["CWE-1275: Sensitive Cookie with Improper SameSite Attribute","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-samesite"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-default","name":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-default","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-value","name":"opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-value","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-authtkt-cookie-secure-unsafe-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CSRF protection is disabled for this view. This is a security risk."},"help":{"markdown":"CSRF protection is disabled for this view. This is a security risk.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"CSRF protection is disabled for this view. This is a security risk."},"id":"opengrep-rules.python.pyramid.audit.pyramid-csrf-check-disabled","name":"opengrep-rules.python.pyramid.audit.pyramid-csrf-check-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-csrf-check-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure."},"help":{"markdown":"Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure."},"id":"opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled","name":"opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616)."},"help":{"markdown":"Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616)."},"id":"opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled-globally","name":"opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled-globally","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-csrf-origin-check-disabled-globally"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-default","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-default","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/www-community/controls/SecureCookieAttribute](https://owasp.org/www-community/controls/SecureCookieAttribute)\n - [https://owasp.org/www-community/HttpOnly](https://owasp.org/www-community/HttpOnly)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute)\n","text":"Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-value","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-value","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-httponly-unsafe-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-default","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-default","properties":{"precision":"very-high","tags":["CWE-1275: Sensitive Cookie with Improper SameSite Attribute","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-value","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-value","properties":{"precision":"very-high","tags":["CWE-1275: Sensitive Cookie with Improper SameSite Attribute","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-samesite-unsafe-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-default","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-default","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"help":{"markdown":"Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."},"id":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-value","name":"opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-value","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.audit.pyramid-set-cookie-secure-unsafe-value"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616)."},"help":{"markdown":"Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616)."},"id":"opengrep-rules.python.pyramid.security.pyramid-csrf-check-disabled-globally","name":"opengrep-rules.python.pyramid.security.pyramid-csrf-check-disabled-globally","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.security.pyramid-csrf-check-disabled-globally"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML."},"help":{"markdown":"Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML."},"id":"opengrep-rules.python.pyramid.security.pyramid-direct-use-of-response","name":"opengrep-rules.python.pyramid.security.pyramid-direct-use-of-response","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.security.pyramid-direct-use-of-response"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."},"help":{"markdown":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data](https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data)\n","text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."},"id":"opengrep-rules.python.pyramid.security.pyramid-sqlalchemy-sql-injection","name":"opengrep-rules.python.pyramid.security.pyramid-sqlalchemy-sql-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.pyramid.security.pyramid-sqlalchemy-sql-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The requests library has a convenient shortcut for sending JSON requests, which lets you stop worrying about serializing the body yourself. To use it, replace `body=json.dumps(...)` with `json=...`."},"help":{"markdown":"The requests library has a convenient shortcut for sending JSON requests, which lets you stop worrying about serializing the body yourself. To use it, replace `body=json.dumps(...)` with `json=...`.\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/stable/user/quickstart/#more-complicated-post-requests](https://requests.readthedocs.io/en/stable/user/quickstart/#more-complicated-post-requests)\n","text":"The requests library has a convenient shortcut for sending JSON requests, which lets you stop worrying about serializing the body yourself. To use it, replace `body=json.dumps(...)` with `json=...`."},"id":"opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-request-json-shortcut","name":"opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-request-json-shortcut","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-request-json-shortcut"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The requests library has a convenient shortcut for reading JSON responses, which lets you stop worrying about deserializing the response yourself."},"help":{"markdown":"The requests library has a convenient shortcut for reading JSON responses, which lets you stop worrying about deserializing the response yourself.\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/stable/user/quickstart/#json-response-content](https://requests.readthedocs.io/en/stable/user/quickstart/#json-response-content)\n","text":"The requests library has a convenient shortcut for reading JSON responses, which lets you stop worrying about deserializing the response yourself."},"id":"opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-response-json-shortcut","name":"opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-response-json-shortcut","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.best-practice.python.requests.best-practice.use-response-json-shortcut"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401."},"help":{"markdown":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n","text":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401."},"id":"opengrep-rules.python.requests.best-practice.use-raise-for-status","name":"opengrep-rules.python.requests.best-practice.use-raise-for-status","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.best-practice.use-raise-for-status"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'."},"help":{"markdown":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.\n\n<b>References:</b>\n - [https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts](https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts)\n - [https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts](https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts)\n","text":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'."},"id":"opengrep-rules.python.requests.best-practice.use-timeout","name":"opengrep-rules.python.requests.best-practice.use-timeout","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.best-practice.use-timeout"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."},"help":{"markdown":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib](https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib)\n","text":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."},"id":"opengrep-rules.python.requests.security.disabled-cert-validation","name":"opengrep-rules.python.requests.security.disabled-cert-validation","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.security.disabled-cert-validation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead."},"help":{"markdown":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\n\n<b>References:</b>\n - [https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/](https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/)\n - [https://bento.dev/checks/requests/no-auth-over-http/](https://bento.dev/checks/requests/no-auth-over-http/)\n","text":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead."},"id":"opengrep-rules.python.requests.security.no-auth-over-http","name":"opengrep-rules.python.requests.security.no-auth-over-http","properties":{"precision":"very-high","tags":["CWE-523: Unprotected Transport of Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.requests.security.no-auth-over-http"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected string concatenation or formatting in a call to a command via 'sh'. This could be a command injection vulnerability if the data is user-controlled. Instead, use a list and append the argument."},"help":{"markdown":"Detected string concatenation or formatting in a call to a command via 'sh'. This could be a command injection vulnerability if the data is user-controlled. Instead, use a list and append the argument.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected string concatenation or formatting in a call to a command via 'sh'. This could be a command injection vulnerability if the data is user-controlled. Instead, use a list and append the argument."},"id":"opengrep-rules.python.sh.security.string-concat","name":"opengrep-rules.python.sh.security.string-concat","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sh.security.string-concat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`, `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`, `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`."},"help":{"markdown":"Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`, `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`, `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`.\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/13/orm/tutorial.html#common-filter-operators](https://docs.sqlalchemy.org/en/13/orm/tutorial.html#common-filter-operators)\n","text":"Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`, `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`, `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`."},"id":"opengrep-rules.python.sqlalchemy.correctness.bad-operator-in-filter","name":"opengrep-rules.python.sqlalchemy.correctness.bad-operator-in-filter","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.correctness.bad-operator-in-filter"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":".delete().where(...) results in a no-op in SQLAlchemy unless the command is executed, use .filter(...).delete() instead."},"help":{"markdown":".delete().where(...) results in a no-op in SQLAlchemy unless the command is executed, use .filter(...).delete() instead.","text":".delete().where(...) results in a no-op in SQLAlchemy unless the command is executed, use .filter(...).delete() instead."},"id":"opengrep-rules.python.sqlalchemy.correctness.delete-where-no-execute","name":"opengrep-rules.python.sqlalchemy.correctness.delete-where-no-execute","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.correctness.delete-where-no-execute"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Rather than adding one element at a time, consider batch loading to improve performance."},"help":{"markdown":"Rather than adding one element at a time, consider batch loading to improve performance.","text":"Rather than adding one element at a time, consider batch loading to improve performance."},"id":"opengrep-rules.python.sqlalchemy.performance.batch-import","name":"opengrep-rules.python.sqlalchemy.performance.batch-import","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.performance.batch-import"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side."},"help":{"markdown":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.","text":"Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side."},"id":"opengrep-rules.python.sqlalchemy.performance.len-all-count","name":"opengrep-rules.python.sqlalchemy.performance.len-all-count","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.performance.len-all-count"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."},"help":{"markdown":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n","text":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."},"id":"opengrep-rules.python.sqlalchemy.security.audit.avoid-sqlalchemy-text","name":"opengrep-rules.python.sqlalchemy.security.audit.avoid-sqlalchemy-text","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.security.audit.avoid-sqlalchemy-text"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."},"help":{"markdown":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\n\n<b>References:</b>\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n - [https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm](https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm)\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column)\n","text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."},"id":"opengrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","name":"opengrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."},"help":{"markdown":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."},"id":"opengrep-rules.python.sqlalchemy.security.sqlalchemy-sql-injection","name":"opengrep-rules.python.sqlalchemy.security.sqlalchemy-sql-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.sqlalchemy.security.sqlalchemy-sql-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands"},"help":{"markdown":"Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands\n\n<b>References:</b>\n - [https://codeberg.org/fennix/funjection](https://codeberg.org/fennix/funjection)\n","text":"Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands"},"id":"opengrep-rules.python.twilio.security.twiml-injection","name":"opengrep-rules.python.twilio.security.twiml-injection","properties":{"precision":"very-high","tags":["CWE-91: XML Injection","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.python.twilio.security.twiml-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`\n\n<b>References:</b>\n - [https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql](https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`"},"id":"opengrep-rules.ruby.aws-lambda.security.activerecord-sqli","name":"opengrep-rules.ruby.aws-lambda.security.activerecord-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.activerecord-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`\n\n<b>References:</b>\n - [https://github.com/brianmario/mysql2](https://github.com/brianmario/mysql2)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`"},"id":"opengrep-rules.ruby.aws-lambda.security.mysql2-sqli","name":"opengrep-rules.ruby.aws-lambda.security.mysql2-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.mysql2-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`\n\n<b>References:</b>\n - [https://www.rubydoc.info/gems/pg/PG/Connection](https://www.rubydoc.info/gems/pg/PG/Connection)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`"},"id":"opengrep-rules.ruby.aws-lambda.security.pg-sqli","name":"opengrep-rules.ruby.aws-lambda.security.pg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.pg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`"},"help":{"markdown":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`\n\n<b>References:</b>\n - [https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries](https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries)\n","text":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`"},"id":"opengrep-rules.ruby.aws-lambda.security.sequel-sqli","name":"opengrep-rules.ruby.aws-lambda.security.sequel-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.sequel-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil."},"help":{"markdown":"Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.\n\n<b>References:</b>\n - [https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html](https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html)\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n","text":"Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil."},"id":"opengrep-rules.ruby.aws-lambda.security.tainted-deserialization","name":"opengrep-rules.ruby.aws-lambda.security.tainted-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.tainted-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n<b>References:</b>\n - [https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet](https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"id":"opengrep-rules.ruby.aws-lambda.security.tainted-sql-string","name":"opengrep-rules.ruby.aws-lambda.security.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.aws-lambda.security.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims."},"id":"opengrep-rules.ruby.jwt.security.audit.ruby-jwt-decode-without-verify","name":"opengrep-rules.ruby.jwt.security.audit.ruby-jwt-decode-without-verify","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.jwt.security.audit.ruby-jwt-decode-without-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"help":{"markdown":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."},"id":"opengrep-rules.ruby.jwt.security.audit.ruby-jwt-exposed-data","name":"opengrep-rules.ruby.jwt.security.audit.ruby-jwt-exposed-data","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.jwt.security.audit.ruby-jwt-exposed-data"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."},"help":{"markdown":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\n","text":"Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."},"id":"opengrep-rules.ruby.jwt.security.ruby-jwt-exposed-credentials","name":"opengrep-rules.ruby.jwt.security.ruby-jwt-exposed-credentials","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.jwt.security.ruby-jwt-exposed-credentials"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"help":{"markdown":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"id":"opengrep-rules.ruby.jwt.security.ruby-jwt-hardcoded-secret","name":"opengrep-rules.ruby.jwt.security.ruby-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.jwt.security.ruby-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"id":"opengrep-rules.ruby.jwt.security.ruby-jwt-none-alg","name":"opengrep-rules.ruby.jwt.security.ruby-jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.jwt.security.ruby-jwt-none-alg"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."},"help":{"markdown":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\n\n<b>References:</b>\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n","text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."},"id":"opengrep-rules.ruby.lang.security.bad-deserialization","name":"opengrep-rules.ruby.lang.security.bad-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.bad-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."},"help":{"markdown":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\n\n<b>References:</b>\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n","text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."},"id":"opengrep-rules.ruby.lang.security.bad-deserialization-env","name":"opengrep-rules.ruby.lang.security.bad-deserialization-env","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.bad-deserialization-env"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unsafe deserialization from YAML. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with YAML can potentially be dangerous. Use JSON in a secure fashion instead. However, loading YAML from a static file is not dangerous and should not be flagged."},"help":{"markdown":"Unsafe deserialization from YAML. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with YAML can potentially be dangerous. Use JSON in a secure fashion instead. However, loading YAML from a static file is not dangerous and should not be flagged.\n\n<b>References:</b>\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n","text":"Unsafe deserialization from YAML. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with YAML can potentially be dangerous. Use JSON in a secure fashion instead. However, loading YAML from a static file is not dangerous and should not be flagged."},"id":"opengrep-rules.ruby.lang.security.bad-deserialization-yaml","name":"opengrep-rules.ruby.lang.security.bad-deserialization-yaml","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.bad-deserialization-yaml"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this."},"help":{"markdown":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb)\n - [https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html](https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html)\n","text":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this."},"id":"opengrep-rules.ruby.lang.security.bad-send","name":"opengrep-rules.ruby.lang.security.bad-send","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.bad-send"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice."},"help":{"markdown":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb)\n - [https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/](https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/)\n","text":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice."},"id":"opengrep-rules.ruby.lang.security.cookie-serialization","name":"opengrep-rules.ruby.lang.security.cookie-serialization","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.cookie-serialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set."},"help":{"markdown":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ](https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ)\n","text":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set."},"id":"opengrep-rules.ruby.lang.security.create-with","name":"opengrep-rules.ruby.lang.security.create-with","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.create-with"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://guides.rubyonrails.org/security.html#command-line-injection](https://guides.rubyonrails.org/security.html#command-line-injection)\n","text":"Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.ruby.lang.security.dangerous-exec","name":"opengrep-rules.ruby.lang.security.dangerous-exec","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.dangerous-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-static command inside 'open'. Audit the input to 'open'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside 'open'. Audit the input to 'open'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside 'open'. Audit the input to 'open'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.ruby.lang.security.dangerous-open","name":"opengrep-rules.ruby.lang.security.dangerous-open","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.dangerous-open"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-static command inside $PIPE. Audit the input to '$PIPE'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside $PIPE. Audit the input to '$PIPE'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside $PIPE. Audit the input to '$PIPE'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.ruby.lang.security.dangerous-open3-pipeline","name":"opengrep-rules.ruby.lang.security.dangerous-open3-pipeline","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.dangerous-open3-pipeline"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"id":"opengrep-rules.ruby.lang.security.dangerous-subshell","name":"opengrep-rules.ruby.lang.security.dangerous-subshell","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.dangerous-subshell"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'syscall' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle) library is preferred for safer and a bit more portable programming."},"help":{"markdown":"'syscall' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle) library is preferred for safer and a bit more portable programming.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"'syscall' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle) library is preferred for safer and a bit more portable programming."},"id":"opengrep-rules.ruby.lang.security.dangerous-syscall","name":"opengrep-rules.ruby.lang.security.dangerous-syscall","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.dangerous-syscall"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a possible ZeroDivisionError."},"help":{"markdown":"Detected a possible ZeroDivisionError.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb)\n","text":"Detected a possible ZeroDivisionError."},"id":"opengrep-rules.ruby.lang.security.divide-by-zero","name":"opengrep-rules.ruby.lang.security.divide-by-zero","properties":{"precision":"very-high","tags":["CWE-369: Divide By Zero","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.divide-by-zero"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false."},"help":{"markdown":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ](https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ)\n","text":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false."},"id":"opengrep-rules.ruby.lang.security.file-disclosure","name":"opengrep-rules.ruby.lang.security.file-disclosure","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.file-disclosure"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints."},"help":{"markdown":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY](https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY)\n","text":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints."},"id":"opengrep-rules.ruby.lang.security.filter-skipping","name":"opengrep-rules.ruby.lang.security.filter-skipping","properties":{"precision":"very-high","tags":["CWE-1021: Improper Restriction of Rendered UI Layers or Frames","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.filter-skipping"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true."},"help":{"markdown":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb)\n","text":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true."},"id":"opengrep-rules.ruby.lang.security.force-ssl-false","name":"opengrep-rules.ruby.lang.security.force-ssl-false","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","HIGH CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.force-ssl-false"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files."},"help":{"markdown":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files."},"id":"opengrep-rules.ruby.lang.security.hardcoded-http-auth-in-controller","name":"opengrep-rules.ruby.lang.security.hardcoded-http-auth-in-controller","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.hardcoded-http-auth-in-controller"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file."},"help":{"markdown":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\n","text":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file."},"id":"opengrep-rules.ruby.lang.security.hardcoded-secret-rsa-passphrase","name":"opengrep-rules.ruby.lang.security.hardcoded-secret-rsa-passphrase","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.hardcoded-secret-rsa-passphrase"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher."},"help":{"markdown":"The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher.\n\n<b>References:</b>\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n","text":"The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher."},"id":"opengrep-rules.ruby.lang.security.insufficient-rsa-key-size","name":"opengrep-rules.ruby.lang.security.insufficient-rsa-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.insufficient-rsa-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks if HTML escaping is globally disabled for JSON output. This could lead to XSS."},"help":{"markdown":"Checks if HTML escaping is globally disabled for JSON output. This could lead to XSS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Checks if HTML escaping is globally disabled for JSON output. This could lead to XSS."},"id":"opengrep-rules.ruby.lang.security.json-entity-escape","name":"opengrep-rules.ruby.lang.security.json-entity-escape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.json-entity-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect."},"help":{"markdown":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect."},"id":"opengrep-rules.ruby.lang.security.mass-assignment-protection-disabled","name":"opengrep-rules.ruby.lang.security.mass-assignment-protection-disabled","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.mass-assignment-protection-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access."},"help":{"markdown":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb)\n - [https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/](https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/)\n","text":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access."},"id":"opengrep-rules.ruby.lang.security.mass-assignment-vuln","name":"opengrep-rules.ruby.lang.security.mass-assignment-vuln","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.mass-assignment-vuln"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.\n\n<b>References:</b>\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem."},"id":"opengrep-rules.ruby.lang.security.md5-used-as-password","name":"opengrep-rules.ruby.lang.security.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.md5-used-as-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class."},"help":{"markdown":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class."},"id":"opengrep-rules.ruby.lang.security.missing-csrf-protection","name":"opengrep-rules.ruby.lang.security.missing-csrf-protection","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.missing-csrf-protection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities. Query parameters allowed using permit and attr_accessible are checked for allowance of dangerous attributes admin, banned, role, and account_id. Also checks for usages of params.permit!, which allows everything. Fix: don't allow admin, banned, role, and account_id using permit or attr_accessible."},"help":{"markdown":"Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities. Query parameters allowed using permit and attr_accessible are checked for allowance of dangerous attributes admin, banned, role, and account_id. Also checks for usages of params.permit!, which allows everything. Fix: don't allow admin, banned, role, and account_id using permit or attr_accessible.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attr_accessible.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attr_accessible.rb)\n","text":"Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities. Query parameters allowed using permit and attr_accessible are checked for allowance of dangerous attributes admin, banned, role, and account_id. Also checks for usages of params.permit!, which allows everything. Fix: don't allow admin, banned, role, and account_id using permit or attr_accessible."},"id":"opengrep-rules.ruby.lang.security.model-attr-accessible","name":"opengrep-rules.ruby.lang.security.model-attr-accessible","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.model-attr-accessible"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for models that do not use attr_accessible. This means there is no limiting of which variables can be manipulated through mass assignment. For newer Rails applications, parameters should be allowlisted using strong parameters. For older Rails versions, they should be allowlisted using strong_attributes."},"help":{"markdown":"Checks for models that do not use attr_accessible. This means there is no limiting of which variables can be manipulated through mass assignment. For newer Rails applications, parameters should be allowlisted using strong parameters. For older Rails versions, they should be allowlisted using strong_attributes.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb)\n","text":"Checks for models that do not use attr_accessible. This means there is no limiting of which variables can be manipulated through mass assignment. For newer Rails applications, parameters should be allowlisted using strong parameters. For older Rails versions, they should be allowlisted using strong_attributes."},"id":"opengrep-rules.ruby.lang.security.model-attributes-attr-accessible","name":"opengrep-rules.ruby.lang.security.model-attributes-attr-accessible","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.model-attributes-attr-accessible"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval."},"help":{"markdown":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval."},"id":"opengrep-rules.ruby.lang.security.ruby-eval","name":"opengrep-rules.ruby.lang.security.ruby-eval","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.ruby-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead."},"help":{"markdown":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead."},"id":"opengrep-rules.ruby.lang.security.ssl-mode-no-verify","name":"opengrep-rules.ruby.lang.security.ssl-mode-no-verify","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.ssl-mode-no-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead."},"help":{"markdown":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\n\n<b>References:</b>\n - [https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575](https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575)\n","text":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead."},"id":"opengrep-rules.ruby.lang.security.weak-hashes-md5","name":"opengrep-rules.ruby.lang.security.weak-hashes-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.weak-hashes-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead."},"help":{"markdown":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\n\n<b>References:</b>\n - [https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html](https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html)\n - [https://shattered.io/](https://shattered.io/)\n","text":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead."},"id":"opengrep-rules.ruby.lang.security.weak-hashes-sha1","name":"opengrep-rules.ruby.lang.security.weak-hashes-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.lang.security.weak-hashes-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a call to `render $T` after calling `$T.save`. Do not call `render` after calling `save` on an ActiveRecord object. Reloading the page will cause the state-changing operation to be repeated which may cause undesirable side effects. Use `redirect_to` instead."},"help":{"markdown":"Found a call to `render $T` after calling `$T.save`. Do not call `render` after calling `save` on an ActiveRecord object. Reloading the page will cause the state-changing operation to be repeated which may cause undesirable side effects. Use `redirect_to` instead.\n\n<b>References:</b>\n - [https://guides.rubyonrails.org/getting_started.html#creating-a-new-article](https://guides.rubyonrails.org/getting_started.html#creating-a-new-article)\n","text":"Found a call to `render $T` after calling `$T.save`. Do not call `render` after calling `save` on an ActiveRecord object. Reloading the page will cause the state-changing operation to be repeated which may cause undesirable side effects. Use `redirect_to` instead."},"id":"opengrep-rules.ruby.rails.correctness.rails-no-render-after-save","name":"opengrep-rules.ruby.rails.correctness.rails-no-render-after-save","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.correctness.rails-no-render-after-save"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The $COLUMN column appears to be a foreign key. Would it benefit from an index? Having an index can improve performance."},"help":{"markdown":"The $COLUMN column appears to be a foreign key. Would it benefit from an index? Having an index can improve performance.\n\n<b>References:</b>\n - [https://archive.is/i7SLO](https://archive.is/i7SLO)\n","text":"The $COLUMN column appears to be a foreign key. Would it benefit from an index? Having an index can improve performance."},"id":"opengrep-rules.ruby.rails.performance.ruby-rails-performance-indexes-are-beneficial","name":"opengrep-rules.ruby.rails.performance.ruby-rails-performance-indexes-are-beneficial","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.performance.ruby-rails-performance-indexes-are-beneficial"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This gets data from session using user inputs. A malicious user may be able to retrieve information from your session that you didn't intend them to. Do not use user input as a session key."},"help":{"markdown":"## Remediation\nSession manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.\n\n## References\n[Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/session_manipulation/](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n","text":"## Remediation\nSession manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.\n\n## References\n[Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n"},"id":"opengrep-rules.ruby.rails.security.audit.avoid-session-manipulation","name":"opengrep-rules.ruby.rails.security.audit.avoid-session-manipulation","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Allowing an attacker to manipulate the session may lead to unintended behavior."}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"help":{"markdown":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n","text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"id":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-file-access","name":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-file-access","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.avoid-tainted-file-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"help":{"markdown":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n","text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"id":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-ftp-call","name":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-ftp-call","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.avoid-tainted-ftp-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"help":{"markdown":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n","text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"id":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-http-request","name":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-http-request","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.avoid-tainted-http-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"help":{"markdown":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n","text":"Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."},"id":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-shell-call","name":"opengrep-rules.ruby.rails.security.audit.avoid-tainted-shell-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.avoid-tainted-shell-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found that the setting for providing detailed exception reports in Rails is set to true. This can lead to information exposure, where sensitive system or internal information is displayed to the end user. Instead, turn this setting off."},"help":{"markdown":"Found that the setting for providing detailed exception reports in Rails is set to true. This can lead to information exposure, where sensitive system or internal information is displayed to the end user. Instead, turn this setting off.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Found that the setting for providing detailed exception reports in Rails is set to true. This can lead to information exposure, where sensitive system or internal information is displayed to the end user. Instead, turn this setting off."},"id":"opengrep-rules.ruby.rails.security.audit.detailed-exceptions","name":"opengrep-rules.ruby.rails.security.audit.detailed-exceptions","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.detailed-exceptions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This call turns off CSRF protection allowing CSRF attacks against the application"},"help":{"markdown":"This call turns off CSRF protection allowing CSRF attacks against the application\n\n<b>References:</b>\n - [https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-skip_forgery_protection](https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-skip_forgery_protection)\n","text":"This call turns off CSRF protection allowing CSRF attacks against the application"},"id":"opengrep-rules.ruby.rails.security.audit.rails-skip-forgery-protection","name":"opengrep-rules.ruby.rails.security.audit.rails-skip-forgery-protection","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.rails-skip-forgery-protection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`."},"help":{"markdown":"Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`.\n\n<b>References:</b>\n - [https://www.rubydoc.info/gems/pg/PG/Connection](https://www.rubydoc.info/gems/pg/PG/Connection)\n","text":"Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`."},"id":"opengrep-rules.ruby.rails.security.audit.sqli.ruby-pg-sqli","name":"opengrep-rules.ruby.rails.security.audit.sqli.ruby-pg-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.sqli.ruby-pg-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!"},"help":{"markdown":"'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown)\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n","text":"'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!"},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-content-tag","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-content-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-content-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Default routes are enabled in this routes file. This means any public method on a controller can be called as an action. It is very easy to accidentally expose a method you didn't mean to. Instead, remove this line and explicitly include all routes you intend external users to follow."},"help":{"markdown":"Default routes are enabled in this routes file. This means any public method on a controller can be called as an action. It is very easy to accidentally expose a method you didn't mean to. Instead, remove this line and explicitly include all routes you intend external users to follow.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/default_routes/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/default_routes/index.markdown)\n","text":"Default routes are enabled in this routes file. This means any public method on a controller can be called as an action. It is very easy to accidentally expose a method you didn't mean to. Instead, remove this line and explicitly include all routes you intend external users to follow."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-default-routes","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-default-routes","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-default-routes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here."},"help":{"markdown":"'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown)\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n","text":"'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-html-safe","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-html-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-html-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument."},"help":{"markdown":"This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/link_to/](https://brakemanscanner.org/docs/warning_types/link_to/)\n - [https://brakemanscanner.org/docs/warning_types/link_to_href/](https://brakemanscanner.org/docs/warning_types/link_to_href/)\n","text":"This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-link-to","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-link-to","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-link-to"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'raw()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. If you must do this, construct individual strings and mark them as safe for HTML rendering with `html_safe()`."},"help":{"markdown":"'raw()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. If you must do this, construct individual strings and mark them as safe for HTML rendering with `html_safe()`.\n\n<b>References:</b>\n - [https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw](https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw)\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n","text":"'raw()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. If you must do this, construct individual strings and mark them as safe for HTML rendering with `html_safe()`."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-raw","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-raw","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-raw"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect."},"help":{"markdown":"When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/redirect/](https://brakemanscanner.org/docs/warning_types/redirect/)\n","text":"When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-redirect","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template."},"help":{"markdown":"Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/](https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/)\n","text":"Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-dynamic-path","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-dynamic-path","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-render-dynamic-path"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'render inline: ...' renders an entire ERB template inline and is dangerous. If external data can reach here, this exposes your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks. Instead, consider using a partial or another safe rendering method."},"help":{"markdown":"'render inline: ...' renders an entire ERB template inline and is dangerous. If external data can reach here, this exposes your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks. Instead, consider using a partial or another safe rendering method.\n\n<b>References:</b>\n - [https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss](https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss)\n","text":"'render inline: ...' renders an entire ERB template inline and is dangerous. If external data can reach here, this exposes your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks. Instead, consider using a partial or another safe rendering method."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-inline","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-inline","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-render-inline"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'render text: ...' actually sets the content-type to 'text/html'. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to render non-HTML text."},"help":{"markdown":"'render text: ...' actually sets the content-type to 'text/html'. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to render non-HTML text.\n\n<b>References:</b>\n - [https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss](https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss)\n","text":"'render text: ...' actually sets the content-type to 'text/html'. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to render non-HTML text."},"id":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-text","name":"opengrep-rules.ruby.rails.security.audit.xss.avoid-render-text","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.avoid-render-text"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'."},"help":{"markdown":"Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown)\n","text":"Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'."},"id":"opengrep-rules.ruby.rails.security.audit.xss.manual-template-creation","name":"opengrep-rules.ruby.rails.security.audit.xss.manual-template-creation","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.manual-template-creation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The syntax `<%== ... %>` is an alias for `html_safe`. This means the content inside these tags will be rendered as raw HTML. This may expose your application to cross-site scripting. If you need raw HTML, prefer using the more explicit `html_safe` and be sure to correctly sanitize variables using a library such as DOMPurify."},"help":{"markdown":"The syntax `<%== ... %>` is an alias for `html_safe`. This means the content inside these tags will be rendered as raw HTML. This may expose your application to cross-site scripting. If you need raw HTML, prefer using the more explicit `html_safe` and be sure to correctly sanitize variables using a library such as DOMPurify.\n\n<b>References:</b>\n - [https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027](https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027)\n - [https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===](https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===)\n","text":"The syntax `<%== ... %>` is an alias for `html_safe`. This means the content inside these tags will be rendered as raw HTML. This may expose your application to cross-site scripting. If you need raw HTML, prefer using the more explicit `html_safe` and be sure to correctly sanitize variables using a library such as DOMPurify."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.alias-for-html-safe","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.alias-for-html-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.alias-for-html-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'content_tag' exhibits unintuitive escaping behavior and may accidentally expose your application to cross-site scripting. If using Rails 2, only attribute values are escaped. If using Rails 3, content and attribute values are escaped. Tag and attribute names are never escaped. Because of this, it is recommended to use 'html_safe' if you must render raw HTML data."},"help":{"markdown":"'content_tag' exhibits unintuitive escaping behavior and may accidentally expose your application to cross-site scripting. If using Rails 2, only attribute values are escaped. If using Rails 3, content and attribute values are escaped. Tag and attribute names are never escaped. Because of this, it is recommended to use 'html_safe' if you must render raw HTML data.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/content_tag/](https://brakemanscanner.org/docs/warning_types/content_tag/)\n","text":"'content_tag' exhibits unintuitive escaping behavior and may accidentally expose your application to cross-site scripting. If using Rails 2, only attribute values are escaped. If using Rails 3, content and attribute values are escaped. Tag and attribute names are never escaped. Because of this, it is recommended to use 'html_safe' if you must render raw HTML data."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-content-tag","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-content-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-content-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'html_safe' renders raw HTML. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify."},"help":{"markdown":"'html_safe' renders raw HTML. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===](https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===)\n - [https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027](https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027)\n","text":"'html_safe' renders raw HTML. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-html-safe","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-html-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-html-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'raw' renders raw HTML, as the name implies. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify."},"help":{"markdown":"'raw' renders raw HTML, as the name implies. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===](https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===)\n - [https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027](https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027)\n","text":"'raw' renders raw HTML, as the name implies. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-raw","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-raw","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.avoid-raw"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in 'link_to'. This will generate dynamic data in the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: 'link_to \"Here\", \"/\"+@link'. You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in 'link_to'. This will generate dynamic data in the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: 'link_to \"Here\", \"/\"+@link'. You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#cross-site-scripting-xss](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#cross-site-scripting-xss)\n - [https://brakemanscanner.org/docs/warning_types/link_to_href/](https://brakemanscanner.org/docs/warning_types/link_to_href/)\n","text":"Detected a template variable used in 'link_to'. This will generate dynamic data in the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: 'link_to \"Here\", \"/\"+@link'. You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.dangerous-link-to","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.dangerous-link-to","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.dangerous-link-to"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"<%= expr %>\"."},"help":{"markdown":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"<%= expr %>\".\n\n<b>References:</b>\n - [https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#unquoted-attributes](https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#unquoted-attributes)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"<%= expr %>\"."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.unquoted-attribute","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.unquoted-attribute","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.unquoted-attribute"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link =>'. You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link =>'. You may also consider setting the Content Security Policy (CSP) header.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link =>'. You may also consider setting the Content Security Policy (CSP) header."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-href","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need to do this, use `escape_javascript` or its alias, `j`. However, this will not protect from XSS in all circumstances; see the references for more information. Consider placing this value in the HTML portion (outside of a script tag)."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need to do this, use `escape_javascript` or its alias, `j`. However, this will not protect from XSS in all circumstances; see the references for more information. Consider placing this value in the HTML portion (outside of a script tag).\n\n<b>References:</b>\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n - [https://www.youtube.com/watch?v=yYTkLUEdIyE](https://www.youtube.com/watch?v=yYTkLUEdIyE)\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need to do this, use `escape_javascript` or its alias, `j`. However, this will not protect from XSS in all circumstances; see the references for more information. Consider placing this value in the HTML portion (outside of a script tag)."},"id":"opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-script-tag","name":"opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xss.templates.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This application is using LibXML as the XML backend. LibXML can be vulnerable to XML External Entities (XXE) vulnerabilities. Use the built-in Rails XML parser, REXML, instead."},"help":{"markdown":"This application is using LibXML as the XML backend. LibXML can be vulnerable to XML External Entities (XXE) vulnerabilities. Use the built-in Rails XML parser, REXML, instead.\n\n<b>References:</b>\n - [https://www.stackhawk.com/blog/rails-xml-external-entities-xxe-guide-examples-and-prevention/](https://www.stackhawk.com/blog/rails-xml-external-entities-xxe-guide-examples-and-prevention/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"This application is using LibXML as the XML backend. LibXML can be vulnerable to XML External Entities (XXE) vulnerabilities. Use the built-in Rails XML parser, REXML, instead."},"id":"opengrep-rules.ruby.rails.security.audit.xxe.libxml-backend","name":"opengrep-rules.ruby.rails.security.audit.xxe.libxml-backend","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xxe.libxml-backend"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"This application is explicitly enabling external entities enabling an attacker to inject malicious XML to exploit an XML External Entities (XXE) vulnerability. This could let the attacker cause a denial-of-service by forcing the parser to parse large files, or at worst, let the attacker download sensitive files or user data. Use the built-in Rails XML parser, REXML, instead."},"help":{"markdown":"This application is explicitly enabling external entities enabling an attacker to inject malicious XML to exploit an XML External Entities (XXE) vulnerability. This could let the attacker cause a denial-of-service by forcing the parser to parse large files, or at worst, let the attacker download sensitive files or user data. Use the built-in Rails XML parser, REXML, instead.\n\n<b>References:</b>\n - [https://www.stackhawk.com/blog/rails-xml-external-entities-xxe-guide-examples-and-prevention/](https://www.stackhawk.com/blog/rails-xml-external-entities-xxe-guide-examples-and-prevention/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"This application is explicitly enabling external entities enabling an attacker to inject malicious XML to exploit an XML External Entities (XXE) vulnerability. This could let the attacker cause a denial-of-service by forcing the parser to parse large files, or at worst, let the attacker download sensitive files or user data. Use the built-in Rails XML parser, REXML, instead."},"id":"opengrep-rules.ruby.rails.security.audit.xxe.xml-external-entities-enabled","name":"opengrep-rules.ruby.rails.security.audit.xxe.xml-external-entities-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.audit.xxe.xml-external-entities-enabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`"},"help":{"markdown":"Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`"},"id":"opengrep-rules.ruby.rails.security.brakeman.check-before-filter","name":"opengrep-rules.ruby.rails.security.brakeman.check-before-filter","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-before-filter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`. If using a cookie-based session store, the HttpOnly and Secure flags should be set."},"help":{"markdown":"Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`. If using a cookie-based session store, the HttpOnly and Secure flags should be set.\n\n<b>References:</b>\n - [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n","text":"Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`. If using a cookie-based session store, the HttpOnly and Secure flags should be set."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-cookie-store-session-security-attributes","name":"opengrep-rules.ruby.rails.security.brakeman.check-cookie-store-session-security-attributes","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-cookie-store-session-security-attributes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk."},"help":{"markdown":"Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk.\n\n<b>References:</b>\n - [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion)\n - [https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb](https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb)\n","text":"Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-dynamic-render-local-file-include","name":"opengrep-rules.ruby.rails.security.brakeman.check-dynamic-render-local-file-include","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-dynamic-render-local-file-include"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used."},"help":{"markdown":"Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/accounts_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/accounts_controller.rb)\n","text":"Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-http-verb-confusion","name":"opengrep-rules.ruby.rails.security.brakeman.check-http-verb-confusion","properties":{"precision":"very-high","tags":["CWE-650: Trusting HTTP Permission Methods on the Server Side","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-http-verb-confusion"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment."},"help":{"markdown":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-high","name":"opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-high","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-high"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment."},"help":{"markdown":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-medium","name":"opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-medium","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-permit-attributes-medium"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"$VALUE Found a string literal assignment to a production Rails session secret in `secrets.yaml`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."},"help":{"markdown":"$VALUE Found a string literal assignment to a production Rails session secret in `secrets.yaml`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4/config/secrets.yml](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4/config/secrets.yml)\n","text":"$VALUE Found a string literal assignment to a production Rails session secret in `secrets.yaml`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-rails-secret-yaml","name":"opengrep-rules.ruby.rails.security.brakeman.check-rails-secret-yaml","properties":{"precision":"very-high","tags":["CWE-540: Inclusion of Sensitive Information in Source Code","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-rails-secret-yaml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."},"help":{"markdown":"Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.\n\n<b>References:</b>\n - [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb)\n","text":"Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-rails-session-secret-handling","name":"opengrep-rules.ruby.rails.security.brakeman.check-rails-session-secret-handling","properties":{"precision":"very-high","tags":["CWE-540: Inclusion of Sensitive Information in Source Code","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-rails-session-secret-handling"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value."},"help":{"markdown":"Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n","text":"Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-redirect-to","name":"opengrep-rules.ruby.rails.security.brakeman.check-redirect-to","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-redirect-to"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking."},"help":{"markdown":"Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n","text":"Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-regex-dos","name":"opengrep-rules.ruby.rails.security.brakeman.check-regex-dos","properties":{"precision":"very-high","tags":["CWE-1333: Inefficient Regular Expression Complexity","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-regex-dos"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`."},"help":{"markdown":"Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.\n\n<b>References:</b>\n - [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion)\n - [https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60](https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60)\n","text":"Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-render-local-file-include","name":"opengrep-rules.ruby.rails.security.brakeman.check-render-local-file-include","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-render-local-file-include"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview."},"help":{"markdown":"Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#browser_compatibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#browser_compatibility)\n - [https://github.com/presidentbeef/brakeman/blob/3f5d5d5/test/apps/rails5/app/views/users/show.html.erb](https://github.com/presidentbeef/brakeman/blob/3f5d5d5/test/apps/rails5/app/views/users/show.html.erb)\n","text":"Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-reverse-tabnabbing","name":"opengrep-rules.ruby.rails.security.brakeman.check-reverse-tabnabbing","properties":{"precision":"very-high","tags":["CWE-1022: Use of Web Link to Untrusted Target with window.opener Access","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-reverse-tabnabbing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value."},"help":{"markdown":"Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n - [https://github.com/presidentbeef/brakeman/blob/3f5d5d5f00864cdf7769c50f5bd26f1769a4ba75/test/apps/rails3.1/app/controllers/users_controller.rb](https://github.com/presidentbeef/brakeman/blob/3f5d5d5f00864cdf7769c50f5bd26f1769a4ba75/test/apps/rails3.1/app/controllers/users_controller.rb)\n","text":"Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-secrets","name":"opengrep-rules.ruby.rails.security.brakeman.check-secrets","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-secrets"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`"},"help":{"markdown":"Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n","text":"Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`"},"id":"opengrep-rules.ruby.rails.security.brakeman.check-send-file","name":"opengrep-rules.ruby.rails.security.brakeman.check-send-file","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-send-file"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries."},"help":{"markdown":"Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.\n\n<b>References:</b>\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb)\n","text":"Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-sql","name":"opengrep-rules.ruby.rails.security.brakeman.check-sql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-sql"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input."},"help":{"markdown":"Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input.\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb)\n","text":"Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection","name":"opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`"},"help":{"markdown":"Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`\n\n<b>References:</b>\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb)\n","text":"Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`"},"id":"opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection-methods","name":"opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection-methods","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-unsafe-reflection-methods"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`."},"help":{"markdown":"Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/unscoped_find/](https://brakemanscanner.org/docs/warning_types/unscoped_find/)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb)\n","text":"Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-unscoped-find","name":"opengrep-rules.ruby.rails.security.brakeman.check-unscoped-find","properties":{"precision":"very-high","tags":["CWE-639: Authorization Bypass Through User-Controlled Key","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-unscoped-find"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively."},"help":{"markdown":"$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively.\n\n<b>References:</b>\n - [https://brakemanscanner.org/docs/warning_types/format_validation/](https://brakemanscanner.org/docs/warning_types/format_validation/)\n - [https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb](https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb)\n","text":"$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively."},"id":"opengrep-rules.ruby.rails.security.brakeman.check-validation-regex","name":"opengrep-rules.ruby.rails.security.brakeman.check-validation-regex","properties":{"precision":"very-high","tags":["CWE-185: Incorrect Regular Expression","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.brakeman.check-validation-regex"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.\n\n<b>References:</b>\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n - [https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html](https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`."},"id":"opengrep-rules.ruby.rails.security.injection.raw-html-format","name":"opengrep-rules.ruby.rails.security.injection.raw-html-format","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.injection.raw-html-format"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.\n\n<b>References:</b>\n - [https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet](https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries."},"id":"opengrep-rules.ruby.rails.security.injection.tainted-sql-string","name":"opengrep-rules.ruby.rails.security.injection.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.injection.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://github.com/arkadiyt/ssrf_filter](https://github.com/arkadiyt/ssrf_filter)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts."},"id":"opengrep-rules.ruby.rails.security.injection.tainted-url-host","name":"opengrep-rules.ruby.rails.security.injection.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.ruby.rails.security.injection.tainted-url-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"help":{"markdown":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n<b>References:</b>\n - [https://jwt-scala.github.io/jwt-scala/](https://jwt-scala.github.io/jwt-scala/)\n","text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"id":"opengrep-rules.scala.jwt-scala.security.jwt-scala-hardcode","name":"opengrep-rules.scala.jwt-scala.security.jwt-scala-hardcode","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","HIGH CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.jwt-scala.security.jwt-scala-hardcode"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead."},"help":{"markdown":"Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead.\n\n<b>References:</b>\n - [https://blog.codacy.com/9-scala-security-issues/](https://blog.codacy.com/9-scala-security-issues/)\n","text":"Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead."},"id":"opengrep-rules.scala.lang.correctness.positive-number-index-of","name":"opengrep-rules.scala.lang.correctness.positive-number-index-of","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.correctness.positive-number-index-of"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized."},"id":"opengrep-rules.scala.lang.security.audit.dangerous-seq-run","name":"opengrep-rules.scala.lang.security.audit.dangerous-seq-run","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.dangerous-seq-run"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized."},"id":"opengrep-rules.scala.lang.security.audit.dangerous-shell-run","name":"opengrep-rules.scala.lang.security.audit.dangerous-shell-run","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.dangerous-shell-run"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A parameter being passed directly into `url` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"A parameter being passed directly into `url` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://dispatchhttp.org/Dispatch.html](https://dispatchhttp.org/Dispatch.html)\n","text":"A parameter being passed directly into `url` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.scala.lang.security.audit.dispatch-ssrf","name":"opengrep-rules.scala.lang.security.audit.dispatch-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.dispatch-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"help":{"markdown":"Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"id":"opengrep-rules.scala.lang.security.audit.documentbuilder-dtd-enabled","name":"opengrep-rules.scala.lang.security.audit.documentbuilder-dtd-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.documentbuilder-dtd-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flags the use of a predictable random value from `scala.util.Random`. This can lead to vulnerabilities when used in security contexts, such as in a CSRF token, password reset token, or any other secret value. To fix this, use java.security.SecureRandom instead."},"help":{"markdown":"Flags the use of a predictable random value from `scala.util.Random`. This can lead to vulnerabilities when used in security contexts, such as in a CSRF token, password reset token, or any other secret value. To fix this, use java.security.SecureRandom instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Flags the use of a predictable random value from `scala.util.Random`. This can lead to vulnerabilities when used in security contexts, such as in a CSRF token, password reset token, or any other secret value. To fix this, use java.security.SecureRandom instead."},"id":"opengrep-rules.scala.lang.security.audit.insecure-random","name":"opengrep-rules.scala.lang.security.audit.insecure-random","properties":{"precision":"very-high","tags":["CWE-330: Use of Insufficiently Random Values","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.insecure-random"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource](https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource)\n","text":"A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.scala.lang.security.audit.io-source-ssrf","name":"opengrep-rules.scala.lang.security.audit.io-source-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.io-source-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flags cases of possible path traversal. If an unfiltered parameter is passed into 'fromFile', file from an arbitrary filesystem location could be read. This could lead to sensitive data exposure and other provles. Instead, sanitize the user input instead of performing direct string concatenation."},"help":{"markdown":"Flags cases of possible path traversal. If an unfiltered parameter is passed into 'fromFile', file from an arbitrary filesystem location could be read. This could lead to sensitive data exposure and other provles. Instead, sanitize the user input instead of performing direct string concatenation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Flags cases of possible path traversal. If an unfiltered parameter is passed into 'fromFile', file from an arbitrary filesystem location could be read. This could lead to sensitive data exposure and other provles. Instead, sanitize the user input instead of performing direct string concatenation."},"id":"opengrep-rules.scala.lang.security.audit.path-traversal-fromfile","name":"opengrep-rules.scala.lang.security.audit.path-traversal-fromfile","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.path-traversal-fromfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead."},"help":{"markdown":"Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead."},"id":"opengrep-rules.scala.lang.security.audit.rsa-padding-set","name":"opengrep-rules.scala.lang.security.audit.rsa-padding-set","properties":{"precision":"very-high","tags":["CWE-780: Use of RSA Algorithm without OAEP","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.rsa-padding-set"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"help":{"markdown":"XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"id":"opengrep-rules.scala.lang.security.audit.sax-dtd-enabled","name":"opengrep-rules.scala.lang.security.audit.sax-dtd-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.sax-dtd-enabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Use `Seq(...)` for dynamically generated commands."},"help":{"markdown":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Use `Seq(...)` for dynamically generated commands.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Use `Seq(...)` for dynamically generated commands."},"id":"opengrep-rules.scala.lang.security.audit.scala-dangerous-process-run","name":"opengrep-rules.scala.lang.security.audit.scala-dangerous-process-run","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.scala-dangerous-process-run"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration."},"help":{"markdown":"Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration.\n\n<b>References:</b>\n - [https://docs.scala-lang.org/overviews/compiler-options/index.html](https://docs.scala-lang.org/overviews/compiler-options/index.html)\n","text":"Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration."},"id":"opengrep-rules.scala.lang.security.audit.scalac-debug","name":"opengrep-rules.scala.lang.security.audit.scalac-debug","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.scalac-debug"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A parameter being passed directly into `Http` can likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"help":{"markdown":"A parameter being passed directly into `Http` can likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://github.com/scalaj/scalaj-http#simplified-http](https://github.com/scalaj/scalaj-http#simplified-http)\n","text":"A parameter being passed directly into `Http` can likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."},"id":"opengrep-rules.scala.lang.security.audit.scalaj-http-ssrf","name":"opengrep-rules.scala.lang.security.audit.scalaj-http-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.scalaj-http-ssrf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Do not use eval(). Alternatively: Ensure evaluated content is not definable by external sources. If it’s not possible, strip everything except alphanumeric characters from an input provided for the command string and arguments."},"help":{"markdown":"`eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Do not use eval(). Alternatively: Ensure evaluated content is not definable by external sources. If it’s not possible, strip everything except alphanumeric characters from an input provided for the command string and arguments.\n\n<b>References:</b>\n - [https://www.scala-js.org/doc/](https://www.scala-js.org/doc/)\n","text":"`eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Do not use eval(). Alternatively: Ensure evaluated content is not definable by external sources. If it’s not possible, strip everything except alphanumeric characters from an input provided for the command string and arguments."},"id":"opengrep-rules.scala.lang.security.audit.scalajs-eval","name":"opengrep-rules.scala.lang.security.audit.scalajs-eval","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.scalajs-eval"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n<b>References:</b>\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"id":"opengrep-rules.scala.lang.security.audit.tainted-sql-string","name":"opengrep-rules.scala.lang.security.audit.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"help":{"markdown":"XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."},"id":"opengrep-rules.scala.lang.security.audit.xmlinputfactory-dtd-enabled","name":"opengrep-rules.scala.lang.security.audit.xmlinputfactory-dtd-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.lang.security.audit.xmlinputfactory-dtd-enabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on."},"help":{"markdown":"Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on.\n\n<b>References:</b>\n - [https://www.playframework.com/documentation/2.8.x/Migration25#CSRF-changes](https://www.playframework.com/documentation/2.8.x/Migration25#CSRF-changes)\n - [https://owasp.org/www-community/attacks/csrf](https://owasp.org/www-community/attacks/csrf)\n","text":"Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on."},"id":"opengrep-rules.scala.play.security.conf-csrf-headers-bypass","name":"opengrep-rules.scala.play.security.conf-csrf-headers-bypass","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.conf-csrf-headers-bypass"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file."},"help":{"markdown":"Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security)\n - [https://www.playframework.com/documentation/2.8.x/SettingsSession#Session-Configuration](https://www.playframework.com/documentation/2.8.x/SettingsSession#Session-Configuration)\n","text":"Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file."},"id":"opengrep-rules.scala.play.security.conf-insecure-cookie-settings","name":"opengrep-rules.scala.play.security.conf-insecure-cookie-settings","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.conf-insecure-cookie-settings"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views."},"help":{"markdown":"Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views."},"id":"opengrep-rules.scala.play.security.tainted-html-response","name":"opengrep-rules.scala.play.security.tainted-html-response","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.tainted-html-response"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings."},"help":{"markdown":"Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.\n\n<b>References:</b>\n - [https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values](https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values)\n - [https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code](https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code)\n","text":"Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings."},"id":"opengrep-rules.scala.play.security.tainted-slick-sqli","name":"opengrep-rules.scala.play.security.tainted-slick-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.tainted-slick-sqli"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n<b>References:</b>\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"id":"opengrep-rules.scala.play.security.tainted-sql-from-http-request","name":"opengrep-rules.scala.play.security.tainted-sql-from-http-request","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.tainted-sql-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Raw html content controlled by a variable detected. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Try to avoid using `Html()` or consider properly sanitizing input data."},"help":{"markdown":"Raw html content controlled by a variable detected. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Try to avoid using `Html()` or consider properly sanitizing input data.\n\n<b>References:</b>\n - [https://www.playframework.com/documentation/2.8.x/ScalaTemplates#Escaping](https://www.playframework.com/documentation/2.8.x/ScalaTemplates#Escaping)\n","text":"Raw html content controlled by a variable detected. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Try to avoid using `Html()` or consider properly sanitizing input data."},"id":"opengrep-rules.scala.play.security.twirl-html-var","name":"opengrep-rules.scala.play.security.twirl-html-var","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.twirl-html-var"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A parameter being passed directly into `WSClient` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host."},"help":{"markdown":"A parameter being passed directly into `WSClient` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://www.playframework.com/documentation/2.8.x/ScalaWS](https://www.playframework.com/documentation/2.8.x/ScalaWS)\n","text":"A parameter being passed directly into `WSClient` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host."},"id":"opengrep-rules.scala.play.security.webservice-ssrf","name":"opengrep-rules.scala.play.security.webservice-ssrf","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","LOW CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.play.security.webservice-ssrf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"help":{"markdown":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"},"id":"opengrep-rules.scala.scala-jwt.security.scala-jwt-hardcoded-secret","name":"opengrep-rules.scala.scala-jwt.security.scala-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","HIGH CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.scala-jwt.security.scala-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using non literal values in `overrideSql(...)`."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using non literal values in `overrideSql(...)`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using non literal values in `overrideSql(...)`."},"id":"opengrep-rules.scala.slick.security.scala-slick-overrideSql-literal","name":"opengrep-rules.scala.slick.security.scala-slick-overrideSql-literal","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.slick.security.scala-slick-overrideSql-literal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using `#$variable` and use `$variable` in `sql\"...\"` strings instead."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using `#$variable` and use `$variable` in `sql\"...\"` strings instead.\n\n<b>References:</b>\n - [https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values](https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using `#$variable` and use `$variable` in `sql\"...\"` strings instead."},"id":"opengrep-rules.scala.slick.security.scala-slick-sql-non-literal","name":"opengrep-rules.scala.slick.security.scala-slick-sql-non-literal","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.scala.slick.security.scala-slick-sql-non-literal"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."},"help":{"markdown":"To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`.\n\n<b>References:</b>\n - [https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/)\n","text":"To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."},"id":"opengrep-rules.solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector","name":"opengrep-rules.solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."},"help":{"markdown":"By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it.\n\n<b>References:</b>\n - [https://docs.openzeppelin.com/contracts/4.x/api/access#Ownable2Step](https://docs.openzeppelin.com/contracts/4.x/api/access#Ownable2Step)\n - [https://www.rareskills.io/post/openzeppelin-ownable2step](https://www.rareskills.io/post/openzeppelin-ownable2step)\n","text":"By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."},"id":"opengrep-rules.solidity.best-practice.use-ownable2step","name":"opengrep-rules.solidity.best-practice.use-ownable2step","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.best-practice.use-ownable2step"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."},"help":{"markdown":"Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g002---cache-array-length-outside-of-loop](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g002---cache-array-length-outside-of-loop)\n","text":"Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."},"id":"opengrep-rules.solidity.performance.array-length-outside-loop","name":"opengrep-rules.solidity.performance.array-length-outside-loop","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.array-length-outside-loop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"<x> += <y> costs more gas than <x> = <x> + <y> for state variables."},"help":{"markdown":"<x> += <y> costs more gas than <x> = <x> + <y> for state variables.\n\n<b>References:</b>\n - [https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8](https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8)\n","text":"<x> += <y> costs more gas than <x> = <x> + <y> for state variables."},"id":"opengrep-rules.solidity.performance.inefficient-state-variable-increment","name":"opengrep-rules.solidity.performance.inefficient-state-variable-increment","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.inefficient-state-variable-increment"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."},"help":{"markdown":"Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g001---dont-initialize-variables-with-default-value](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g001---dont-initialize-variables-with-default-value)\n","text":"Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."},"id":"opengrep-rules.solidity.performance.init-variables-with-default-value","name":"opengrep-rules.solidity.performance.init-variables-with-default-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.init-variables-with-default-value"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Consider swapping variables using `($VAR1, $VAR2) = ($VAR2, $VAR1)` to save gas"},"help":{"markdown":"Consider swapping variables using `($VAR1, $VAR2) = ($VAR2, $VAR1)` to save gas\n\n<b>References:</b>\n - [https://dev.to/oliverjumpertz/solidity-quick-tip-efficiently-swap-two-variables-1f8i](https://dev.to/oliverjumpertz/solidity-quick-tip-efficiently-swap-two-variables-1f8i)\n","text":"Consider swapping variables using `($VAR1, $VAR2) = ($VAR2, $VAR1)` to save gas"},"id":"opengrep-rules.solidity.performance.non-optimal-variables-swap","name":"opengrep-rules.solidity.performance.non-optimal-variables-swap","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.non-optimal-variables-swap"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Consider making costructor payable to save gas."},"help":{"markdown":"Consider making costructor payable to save gas.\n\n<b>References:</b>\n - [https://twitter.com/0xAsm0d3us/status/1518960704271056897](https://twitter.com/0xAsm0d3us/status/1518960704271056897)\n","text":"Consider making costructor payable to save gas."},"id":"opengrep-rules.solidity.performance.non-payable-constructor","name":"opengrep-rules.solidity.performance.non-payable-constructor","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.non-payable-constructor"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Replace state variable reads and writes within loops with local variable reads and writes."},"help":{"markdown":"Replace state variable reads and writes within loops with local variable reads and writes.\n\n<b>References:</b>\n - [https://github.com/devanshbatham/Solidity-Gas-Optimization-Tips#10--replace-state-variable-reads-and-writes-within-loops-with-local-variable-reads-and-writes](https://github.com/devanshbatham/Solidity-Gas-Optimization-Tips#10--replace-state-variable-reads-and-writes-within-loops-with-local-variable-reads-and-writes)\n","text":"Replace state variable reads and writes within loops with local variable reads and writes."},"id":"opengrep-rules.solidity.performance.state-variable-read-in-a-loop","name":"opengrep-rules.solidity.performance.state-variable-read-in-a-loop","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.state-variable-read-in-a-loop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"A lot of times there is no risk that the loop counter can overflow.  Using Solidity's unchecked block saves the overflow checks."},"help":{"markdown":"A lot of times there is no risk that the loop counter can overflow.  Using Solidity's unchecked block saves the overflow checks.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g011---unnecessary-checked-arithmetic-in-for-loop](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g011---unnecessary-checked-arithmetic-in-for-loop)\n","text":"A lot of times there is no risk that the loop counter can overflow.  Using Solidity's unchecked block saves the overflow checks."},"id":"opengrep-rules.solidity.performance.unnecessary-checked-arithmetic-in-loop","name":"opengrep-rules.solidity.performance.unnecessary-checked-arithmetic-in-loop","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.unnecessary-checked-arithmetic-in-loop"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."},"help":{"markdown":"Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec.\n\n<b>References:</b>\n - [https://blog.soliditylang.org/2021/04/21/custom-errors/](https://blog.soliditylang.org/2021/04/21/custom-errors/)\n","text":"Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."},"id":"opengrep-rules.solidity.performance.use-custom-error-not-require","name":"opengrep-rules.solidity.performance.use-custom-error-not-require","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-custom-error-not-require"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Using multiple require statements is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports."},"help":{"markdown":"Using multiple require statements is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports.\n\n<b>References:</b>\n - [https://code4rena.com/reports/2023-01-ondo#g-15-splitting-require-statements-that-use--saves-gas---saves-8-gas-per-](https://code4rena.com/reports/2023-01-ondo#g-15-splitting-require-statements-that-use--saves-gas---saves-8-gas-per-)\n","text":"Using multiple require statements is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports."},"id":"opengrep-rules.solidity.performance.use-multiple-require","name":"opengrep-rules.solidity.performance.use-multiple-require","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-multiple-require"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Using nested is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports."},"help":{"markdown":"Using nested is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports.\n\n<b>References:</b>\n - [https://code4rena.com/reports/2023-01-biconomy#g-18-use-nested-if-and-avoid-multiple-check-combinations](https://code4rena.com/reports/2023-01-biconomy#g-18-use-nested-if-and-avoid-multiple-check-combinations)\n","text":"Using nested is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports."},"id":"opengrep-rules.solidity.performance.use-nested-if","name":"opengrep-rules.solidity.performance.use-nested-if","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-nested-if"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."},"help":{"markdown":"Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g012---use-prefix-increment-instead-of-postfix-increment-if-possible](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g012---use-prefix-increment-instead-of-postfix-increment-if-possible)\n","text":"Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."},"id":"opengrep-rules.solidity.performance.use-prefix-decrement-not-postfix","name":"opengrep-rules.solidity.performance.use-prefix-decrement-not-postfix","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-prefix-decrement-not-postfix"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."},"help":{"markdown":"Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g012---use-prefix-increment-instead-of-postfix-increment-if-possible](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g012---use-prefix-increment-instead-of-postfix-increment-if-possible)\n","text":"Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."},"id":"opengrep-rules.solidity.performance.use-prefix-increment-not-postfix","name":"opengrep-rules.solidity.performance.use-prefix-increment-not-postfix","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-prefix-increment-not-postfix"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."},"help":{"markdown":"Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met.\n\n<b>References:</b>\n - [https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g007---long-revert-strings](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g007---long-revert-strings)\n","text":"Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."},"id":"opengrep-rules.solidity.performance.use-short-revert-string","name":"opengrep-rules.solidity.performance.use-short-revert-string","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.performance.use-short-revert-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Contract can be destructed by anyone in $FUNC"},"help":{"markdown":"Contract can be destructed by anyone in $FUNC\n\n<b>References:</b>\n - [https://www.parity.io/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/](https://www.parity.io/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/)\n","text":"Contract can be destructed by anyone in $FUNC"},"id":"opengrep-rules.solidity.security.accessible-selfdestruct","name":"opengrep-rules.solidity.security.accessible-selfdestruct","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.accessible-selfdestruct"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"An attacker may perform call() to an arbitrary address with controlled calldata"},"help":{"markdown":"An attacker may perform call() to an arbitrary address with controlled calldata\n\n<b>References:</b>\n - [https://twitter.com/CertiKAlert/status/1512198846343954445](https://twitter.com/CertiKAlert/status/1512198846343954445)\n - [https://twitter.com/SlowMist_Team/status/1508787862791069700](https://twitter.com/SlowMist_Team/status/1508787862791069700)\n - [https://twitter.com/Beosin_com/status/1509099103401127942](https://twitter.com/Beosin_com/status/1509099103401127942)\n - [https://blocksecteam.medium.com/li-fi-attack-a-cross-chain-bridge-vulnerability-no-its-due-to-unchecked-external-call-c31e7dadf60f](https://blocksecteam.medium.com/li-fi-attack-a-cross-chain-bridge-vulnerability-no-its-due-to-unchecked-external-call-c31e7dadf60f)\n - [https://etherscan.io/address/0xe7597f774fd0a15a617894dc39d45a28b97afa4f](https://etherscan.io/address/0xe7597f774fd0a15a617894dc39d45a28b97afa4f)\n - [https://etherscan.io/address/0x73a499e043b03fc047189ab1ba72eb595ff1fc8e](https://etherscan.io/address/0x73a499e043b03fc047189ab1ba72eb595ff1fc8e)\n","text":"An attacker may perform call() to an arbitrary address with controlled calldata"},"id":"opengrep-rules.solidity.security.arbitrary-low-level-call","name":"opengrep-rules.solidity.security.arbitrary-low-level-call","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.arbitrary-low-level-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"msg.sender is not being used when calling erc20.transferFrom. Example - Alice approves this contract to spend her ERC20 tokens. Bob can call function 'a' and specify Alice's address as the from parameter in transferFrom, allowing him to transfer Alice's tokens to himself."},"help":{"markdown":"msg.sender is not being used when calling erc20.transferFrom. Example - Alice approves this contract to spend her ERC20 tokens. Bob can call function 'a' and specify Alice's address as the from parameter in transferFrom, allowing him to transfer Alice's tokens to himself.\n\n<b>References:</b>\n - [https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom](https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom)\n - [https://cwe.mitre.org/data/definitions/285.html](https://cwe.mitre.org/data/definitions/285.html)\n","text":"msg.sender is not being used when calling erc20.transferFrom. Example - Alice approves this contract to spend her ERC20 tokens. Bob can call function 'a' and specify Alice's address as the from parameter in transferFrom, allowing him to transfer Alice's tokens to himself."},"id":"opengrep-rules.solidity.security.arbitrary-send-erc20","name":"opengrep-rules.solidity.security.arbitrary-send-erc20","properties":{"precision":"very-high","tags":["CWE-285: Improper Authorization","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.arbitrary-send-erc20"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$VAULT.getPoolTokens() call on a Balancer pool is not protected from the read-only reentrancy."},"help":{"markdown":"$VAULT.getPoolTokens() call on a Balancer pool is not protected from the read-only reentrancy.\n\n<b>References:</b>\n - [https://quillaudits.medium.com/decoding-sentiment-protocols-1-million-exploit-quillaudits-f36bee77d376](https://quillaudits.medium.com/decoding-sentiment-protocols-1-million-exploit-quillaudits-f36bee77d376)\n - [https://hackmd.io/@sentimentxyz/SJCySo1z2](https://hackmd.io/@sentimentxyz/SJCySo1z2)\n","text":"$VAULT.getPoolTokens() call on a Balancer pool is not protected from the read-only reentrancy."},"id":"opengrep-rules.solidity.security.balancer-readonly-reentrancy-getpooltokens","name":"opengrep-rules.solidity.security.balancer-readonly-reentrancy-getpooltokens","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.balancer-readonly-reentrancy-getpooltokens"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$VAR.getRate() call on a Balancer pool is not protected from the read-only reentrancy."},"help":{"markdown":"$VAR.getRate() call on a Balancer pool is not protected from the read-only reentrancy.\n\n<b>References:</b>\n - [https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345](https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345)\n","text":"$VAR.getRate() call on a Balancer pool is not protected from the read-only reentrancy."},"id":"opengrep-rules.solidity.security.balancer-readonly-reentrancy-getrate","name":"opengrep-rules.solidity.security.balancer-readonly-reentrancy-getrate","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.balancer-readonly-reentrancy-getrate"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Possible arithmetic underflow"},"help":{"markdown":"Possible arithmetic underflow\n\n<b>References:</b>\n - [https://medium.com/@Knownsec_Blockchain_Lab/knownsec-blockchain-lab-umbnetwork-attack-event-analysis-9bae1141e58](https://medium.com/@Knownsec_Blockchain_Lab/knownsec-blockchain-lab-umbnetwork-attack-event-analysis-9bae1141e58)\n - [https://twitter.com/danielvf/status/1497194778278174724](https://twitter.com/danielvf/status/1497194778278174724)\n - [https://etherscan.io/address/0xbbc3a290c7d2755b48681c87f25f9d7f480ad42f](https://etherscan.io/address/0xbbc3a290c7d2755b48681c87f25f9d7f480ad42f)\n","text":"Possible arithmetic underflow"},"id":"opengrep-rules.solidity.security.basic-arithmetic-underflow","name":"opengrep-rules.solidity.security.basic-arithmetic-underflow","properties":{"precision":"very-high","tags":["CWE-191: Integer Underflow (Wrap or Wraparound)","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.basic-arithmetic-underflow"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Price oracle can be manipulated via flashloan"},"help":{"markdown":"Price oracle can be manipulated via flashloan\n\n<b>References:</b>\n - [https://medium.com/oneringfinance/onering-finance-exploit-post-mortem-after-oshare-hack-602a529db99b](https://medium.com/oneringfinance/onering-finance-exploit-post-mortem-after-oshare-hack-602a529db99b)\n - [https://twitter.com/peckshield/status/1506090607059431427](https://twitter.com/peckshield/status/1506090607059431427)\n - [https://pwned-no-more.notion.site/The-Deus-Hack-Explained-647bf97afa2b4e4e9e8b882e68a75c0b](https://pwned-no-more.notion.site/The-Deus-Hack-Explained-647bf97afa2b4e4e9e8b882e68a75c0b)\n - [https://twitter.com/peckshield/status/1519530463337250817](https://twitter.com/peckshield/status/1519530463337250817)\n - [https://ftmscan.com/address/0xc06826f52f29b34c5d8b2c61abf844cebcf78abf](https://ftmscan.com/address/0xc06826f52f29b34c5d8b2c61abf844cebcf78abf)\n - [https://ftmscan.com/address/0x5CEB2b0308a7f21CcC0915DB29fa5095bEAdb48D](https://ftmscan.com/address/0x5CEB2b0308a7f21CcC0915DB29fa5095bEAdb48D)\n - [https://ftmscan.com/address/0x8129026c585bcfa530445a6267f9389057761a00](https://ftmscan.com/address/0x8129026c585bcfa530445a6267f9389057761a00)\n","text":"Price oracle can be manipulated via flashloan"},"id":"opengrep-rules.solidity.security.basic-oracle-manipulation","name":"opengrep-rules.solidity.security.basic-oracle-manipulation","properties":{"precision":"very-high","tags":["CWE-682: Incorrect Calculation","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.basic-oracle-manipulation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Function borrowFresh() in Compound performs state update after doTransferOut()"},"help":{"markdown":"Function borrowFresh() in Compound performs state update after doTransferOut()\n\n<b>References:</b>\n - [https://twitter.com/peckshield/status/1509431646818234369](https://twitter.com/peckshield/status/1509431646818234369)\n - [https://twitter.com/blocksecteam/status/1509466576848064512](https://twitter.com/blocksecteam/status/1509466576848064512)\n - [https://slowmist.medium.com/another-day-another-reentrancy-attack-5cde10bbb2b4](https://slowmist.medium.com/another-day-another-reentrancy-attack-5cde10bbb2b4)\n - [https://explorer.fuse.io/address/0x139Eb08579eec664d461f0B754c1F8B569044611](https://explorer.fuse.io/address/0x139Eb08579eec664d461f0B754c1F8B569044611)\n","text":"Function borrowFresh() in Compound performs state update after doTransferOut()"},"id":"opengrep-rules.solidity.security.compound-borrowfresh-reentrancy","name":"opengrep-rules.solidity.security.compound-borrowfresh-reentrancy","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.compound-borrowfresh-reentrancy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Function sweepToken is allowed to be called by anyone"},"help":{"markdown":"Function sweepToken is allowed to be called by anyone\n\n<b>References:</b>\n - [https://medium.com/chainsecurity/trueusd-compound-vulnerability-bc5b696d29e2](https://medium.com/chainsecurity/trueusd-compound-vulnerability-bc5b696d29e2)\n - [https://chainsecurity.com/security-audit/compound-ctoken/](https://chainsecurity.com/security-audit/compound-ctoken/)\n - [https://blog.openzeppelin.com/compound-comprehensive-protocol-audit/](https://blog.openzeppelin.com/compound-comprehensive-protocol-audit/)\n - [https://etherscan.io/address/0xa035b9e130f2b1aedc733eefb1c67ba4c503491f](https://etherscan.io/address/0xa035b9e130f2b1aedc733eefb1c67ba4c503491f)\n","text":"Function sweepToken is allowed to be called by anyone"},"id":"opengrep-rules.solidity.security.compound-sweeptoken-not-restricted","name":"opengrep-rules.solidity.security.compound-sweeptoken-not-restricted","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.compound-sweeptoken-not-restricted"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$POOL.get_virtual_price() call on a Curve pool is not protected from the read-only reentrancy."},"help":{"markdown":"$POOL.get_virtual_price() call on a Curve pool is not protected from the read-only reentrancy.\n\n<b>References:</b>\n - [https://chainsecurity.com/heartbreaks-curve-lp-oracles/](https://chainsecurity.com/heartbreaks-curve-lp-oracles/)\n - [https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/](https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/)\n","text":"$POOL.get_virtual_price() call on a Curve pool is not protected from the read-only reentrancy."},"id":"opengrep-rules.solidity.security.curve-readonly-reentrancy","name":"opengrep-rules.solidity.security.curve-readonly-reentrancy","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.curve-readonly-reentrancy"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"An attacker may perform delegatecall() to an arbitrary address."},"help":{"markdown":"An attacker may perform delegatecall() to an arbitrary address.\n\n<b>References:</b>\n - [https://entethalliance.org/specs/ethtrust-sl/v1/#req-1-delegatecall](https://entethalliance.org/specs/ethtrust-sl/v1/#req-1-delegatecall)\n","text":"An attacker may perform delegatecall() to an arbitrary address."},"id":"opengrep-rules.solidity.security.delegatecall-to-arbitrary-address","name":"opengrep-rules.solidity.security.delegatecall-to-arbitrary-address","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.delegatecall-to-arbitrary-address"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"abi.encodePacked hash collision with variable length arguments in $F()"},"help":{"markdown":"abi.encodePacked hash collision with variable length arguments in $F()\n\n<b>References:</b>\n - [https://swcregistry.io/docs/SWC-133](https://swcregistry.io/docs/SWC-133)\n","text":"abi.encodePacked hash collision with variable length arguments in $F()"},"id":"opengrep-rules.solidity.security.encode-packed-collision","name":"opengrep-rules.solidity.security.encode-packed-collision","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.encode-packed-collision"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Anyone can burn tokens of other accounts"},"help":{"markdown":"Anyone can burn tokens of other accounts\n\n<b>References:</b>\n - [https://twitter.com/danielvf/status/1511013322015051797](https://twitter.com/danielvf/status/1511013322015051797)\n - [https://etherscan.io/address/0xf15ead6acb8ab52a1e335671a48f3a99e991614c](https://etherscan.io/address/0xf15ead6acb8ab52a1e335671a48f3a99e991614c)\n","text":"Anyone can burn tokens of other accounts"},"id":"opengrep-rules.solidity.security.erc20-public-burn","name":"opengrep-rules.solidity.security.erc20-public-burn","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc20-public-burn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Custom ERC20 implementation exposes _transfer() as public"},"help":{"markdown":"Custom ERC20 implementation exposes _transfer() as public\n\n<b>References:</b>\n - [https://medium.com/@Knownsec_Blockchain_Lab/creat-future-was-tragically-transferred-coins-at-will-who-is-the-mastermind-behind-the-scenes-8ad42a7af814](https://medium.com/@Knownsec_Blockchain_Lab/creat-future-was-tragically-transferred-coins-at-will-who-is-the-mastermind-behind-the-scenes-8ad42a7af814)\n - [https://bscscan.com/address/0x8B7218CF6Ac641382D7C723dE8aA173e98a80196](https://bscscan.com/address/0x8B7218CF6Ac641382D7C723dE8aA173e98a80196)\n","text":"Custom ERC20 implementation exposes _transfer() as public"},"id":"opengrep-rules.solidity.security.erc20-public-transfer","name":"opengrep-rules.solidity.security.erc20-public-transfer","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc20-public-transfer"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ERC677 callAfterTransfer() reentrancy"},"help":{"markdown":"ERC677 callAfterTransfer() reentrancy\n\n<b>References:</b>\n - [https://twitter.com/peckshield/status/1509431646818234369](https://twitter.com/peckshield/status/1509431646818234369)\n - [https://twitter.com/blocksecteam/status/1509466576848064512](https://twitter.com/blocksecteam/status/1509466576848064512)\n - [https://explorer.fuse.io/address/0x139Eb08579eec664d461f0B754c1F8B569044611](https://explorer.fuse.io/address/0x139Eb08579eec664d461f0B754c1F8B569044611)\n - [https://explorer.fuse.io/address/0x5De15b5543c178C111915d6B8ae929Af01a8cC58](https://explorer.fuse.io/address/0x5De15b5543c178C111915d6B8ae929Af01a8cC58)\n","text":"ERC677 callAfterTransfer() reentrancy"},"id":"opengrep-rules.solidity.security.erc677-reentrancy","name":"opengrep-rules.solidity.security.erc677-reentrancy","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc677-reentrancy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Custom ERC721 implementation lacks access control checks in _transfer()"},"help":{"markdown":"Custom ERC721 implementation lacks access control checks in _transfer()\n\n<b>References:</b>\n - [https://twitter.com/BlockSecAlert/status/1516289618605654024](https://twitter.com/BlockSecAlert/status/1516289618605654024)\n - [https://etherscan.io/address/0xf3821adaceb6500c0a202971aecf840a033f236b](https://etherscan.io/address/0xf3821adaceb6500c0a202971aecf840a033f236b)\n","text":"Custom ERC721 implementation lacks access control checks in _transfer()"},"id":"opengrep-rules.solidity.security.erc721-arbitrary-transferfrom","name":"opengrep-rules.solidity.security.erc721-arbitrary-transferfrom","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc721-arbitrary-transferfrom"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ERC721 onERC721Received() reentrancy"},"help":{"markdown":"ERC721 onERC721Received() reentrancy\n\n<b>References:</b>\n - [https://blocksecteam.medium.com/when-safemint-becomes-unsafe-lessons-from-the-hypebears-security-incident-2965209bda2a](https://blocksecteam.medium.com/when-safemint-becomes-unsafe-lessons-from-the-hypebears-security-incident-2965209bda2a)\n - [https://etherscan.io/address/0x14e0a1f310e2b7e321c91f58847e98b8c802f6ef](https://etherscan.io/address/0x14e0a1f310e2b7e321c91f58847e98b8c802f6ef)\n","text":"ERC721 onERC721Received() reentrancy"},"id":"opengrep-rules.solidity.security.erc721-reentrancy","name":"opengrep-rules.solidity.security.erc721-reentrancy","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc721-reentrancy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ERC777 tokensReceived() reentrancy"},"help":{"markdown":"ERC777 tokensReceived() reentrancy\n\n<b>References:</b>\n - [https://mirror.xyz/baconcoin.eth/LHaPiX38mnx8eJ2RVKNXHttHfweQMKNGmEnX4KUksk0](https://mirror.xyz/baconcoin.eth/LHaPiX38mnx8eJ2RVKNXHttHfweQMKNGmEnX4KUksk0)\n - [https://etherscan.io/address/0xf53f00f844b381963a47fde3325011566870b31f](https://etherscan.io/address/0xf53f00f844b381963a47fde3325011566870b31f)\n","text":"ERC777 tokensReceived() reentrancy"},"id":"opengrep-rules.solidity.security.erc777-reentrancy","name":"opengrep-rules.solidity.security.erc777-reentrancy","properties":{"precision":"very-high","tags":["CWE-841: Improper Enforcement of Behavioral Workflow","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.erc777-reentrancy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"UniswapV3 adapter implemented incorrect extraction of path parameters"},"help":{"markdown":"UniswapV3 adapter implemented incorrect extraction of path parameters\n\n<b>References:</b>\n - [https://medium.com/@nnez/different-parsers-different-results-acecf84dfb0c](https://medium.com/@nnez/different-parsers-different-results-acecf84dfb0c)\n - [https://etherscan.io/address/0xbA7B57D7E4d4A7516FC1CbfF1CA5182eBC0c1491](https://etherscan.io/address/0xbA7B57D7E4d4A7516FC1CbfF1CA5182eBC0c1491)\n","text":"UniswapV3 adapter implemented incorrect extraction of path parameters"},"id":"opengrep-rules.solidity.security.gearbox-tokens-path-confusion","name":"opengrep-rules.solidity.security.gearbox-tokens-path-confusion","properties":{"precision":"very-high","tags":["CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.gearbox-tokens-path-confusion"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"blockhash(block.number) and blockhash(block.number + N) always returns 0."},"help":{"markdown":"blockhash(block.number) and blockhash(block.number + N) always returns 0.\n\n<b>References:</b>\n - [https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620](https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620)\n","text":"blockhash(block.number) and blockhash(block.number + N) always returns 0."},"id":"opengrep-rules.solidity.security.incorrect-use-of-blockhash","name":"opengrep-rules.solidity.security.incorrect-use-of-blockhash","properties":{"precision":"very-high","tags":["CWE-341: Predictable from Observable State","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.incorrect-use-of-blockhash"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Keep3rV2.current() call has high data freshness, but it has low security,  an exploiter simply needs to manipulate 2 data points to be able to impact the feed."},"help":{"markdown":"Keep3rV2.current() call has high data freshness, but it has low security,  an exploiter simply needs to manipulate 2 data points to be able to impact the feed.\n\n<b>References:</b>\n - [https://twitter.com/peckshield/status/1510232640338608131](https://twitter.com/peckshield/status/1510232640338608131)\n - [https://twitter.com/FrankResearcher/status/1510239094777032713](https://twitter.com/FrankResearcher/status/1510239094777032713)\n - [https://twitter.com/larry0x/status/1510263618180464644](https://twitter.com/larry0x/status/1510263618180464644)\n - [https://andrecronje.medium.com/keep3r-network-on-chain-oracle-price-feeds-3c67ed002a9](https://andrecronje.medium.com/keep3r-network-on-chain-oracle-price-feeds-3c67ed002a9)\n - [https://etherscan.io/address/0x210ac53b27f16e20a9aa7d16260f84693390258f](https://etherscan.io/address/0x210ac53b27f16e20a9aa7d16260f84693390258f)\n","text":"Keep3rV2.current() call has high data freshness, but it has low security,  an exploiter simply needs to manipulate 2 data points to be able to impact the feed."},"id":"opengrep-rules.solidity.security.keeper-network-oracle-manipulation","name":"opengrep-rules.solidity.security.keeper-network-oracle-manipulation","properties":{"precision":"very-high","tags":["CWE-682: Incorrect Calculation","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.keeper-network-oracle-manipulation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Missing check for 'from' and 'to' being the same before updating balances could lead to incorrect balance manipulation on self-transfers. Include a check to ensure 'from' and 'to' are not the same before updating balances to prevent balance manipulation during self-transfers."},"help":{"markdown":"Missing check for 'from' and 'to' being the same before updating balances could lead to incorrect balance manipulation on self-transfers. Include a check to ensure 'from' and 'to' are not the same before updating balances to prevent balance manipulation during self-transfers.\n\n<b>References:</b>\n - [https://blog.verichains.io/p/miner-project-attacked-by-vulnerabilities](https://blog.verichains.io/p/miner-project-attacked-by-vulnerabilities)\n - [https://x.com/shoucccc/status/1757777764646859121](https://x.com/shoucccc/status/1757777764646859121)\n","text":"Missing check for 'from' and 'to' being the same before updating balances could lead to incorrect balance manipulation on self-transfers. Include a check to ensure 'from' and 'to' are not the same before updating balances to prevent balance manipulation during self-transfers."},"id":"opengrep-rules.solidity.security.missing-self-transfer-check-ercx","name":"opengrep-rules.solidity.security.missing-self-transfer-check-ercx","properties":{"precision":"very-high","tags":["CWE-682: Incorrect Calculation","HIGH CONFIDENCE","OWASP-A7:2021 Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.missing-self-transfer-check-ercx"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$F with constant msg.value can be called multiple times"},"help":{"markdown":"$F with constant msg.value can be called multiple times\n\n<b>References:</b>\n - [https://github.com/Uniswap/v3-periphery/issues/52](https://github.com/Uniswap/v3-periphery/issues/52)\n - [https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong](https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong)\n","text":"$F with constant msg.value can be called multiple times"},"id":"opengrep-rules.solidity.security.msg-value-multicall","name":"opengrep-rules.solidity.security.msg-value-multicall","properties":{"precision":"very-high","tags":["CWE-837: Improper Enforcement of a Single, Unique Action","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.msg-value-multicall"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The code must not contain any of Unicode Direction Control Characters"},"help":{"markdown":"The code must not contain any of Unicode Direction Control Characters\n\n<b>References:</b>\n - [https://entethalliance.org/specs/ethtrust-sl/v1/#req-1-unicode-bdo](https://entethalliance.org/specs/ethtrust-sl/v1/#req-1-unicode-bdo)\n","text":"The code must not contain any of Unicode Direction Control Characters"},"id":"opengrep-rules.solidity.security.no-bidi-characters","name":"opengrep-rules.solidity.security.no-bidi-characters","properties":{"precision":"very-high","tags":["CWE-837: Improper Enforcement of a Single, Unique Action","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.no-bidi-characters"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"No slippage check in a Uniswap v2/v3 trade"},"help":{"markdown":"No slippage check in a Uniswap v2/v3 trade\n\n<b>References:</b>\n - [https://uniswapv3book.com/docs/milestone_3/slippage-protection/](https://uniswapv3book.com/docs/milestone_3/slippage-protection/)\n","text":"No slippage check in a Uniswap v2/v3 trade"},"id":"opengrep-rules.solidity.security.no-slippage-check","name":"opengrep-rules.solidity.security.no-slippage-check","properties":{"precision":"very-high","tags":["CWE-682: Incorrect Calculation","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.no-slippage-check"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential signature malleability in $F"},"help":{"markdown":"Potential signature malleability in $F\n\n<b>References:</b>\n - [https://github.com/advisories/GHSA-4h98-2769-gh6h](https://github.com/advisories/GHSA-4h98-2769-gh6h)\n","text":"Potential signature malleability in $F"},"id":"opengrep-rules.solidity.security.openzeppelin-ecdsa-recover-malleable","name":"opengrep-rules.solidity.security.openzeppelin-ecdsa-recover-malleable","properties":{"precision":"very-high","tags":["CWE-347: Improper Verification of Cryptographic Signature","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.openzeppelin-ecdsa-recover-malleable"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Oracle price data can be submitted by anyone"},"help":{"markdown":"Oracle price data can be submitted by anyone\n\n<b>References:</b>\n - [https://twitter.com/BlockSecTeam/status/1514815673800663045](https://twitter.com/BlockSecTeam/status/1514815673800663045)\n - [https://twitter.com/CertiKAlert/status/1514831117169405953](https://twitter.com/CertiKAlert/status/1514831117169405953)\n - [https://medium.com/@hacxyk/aave-v3s-price-oracle-manipulation-vulnerability-168e44e9e374](https://medium.com/@hacxyk/aave-v3s-price-oracle-manipulation-vulnerability-168e44e9e374)\n - [https://bscscan.com/address/0xd55f01b4b51b7f48912cd8ca3cdd8070a1a9dba5](https://bscscan.com/address/0xd55f01b4b51b7f48912cd8ca3cdd8070a1a9dba5)\n - [https://polygonscan.com/address/0xaA5890362f36FeaAe91aF248e84e287cE6eCD1A9](https://polygonscan.com/address/0xaA5890362f36FeaAe91aF248e84e287cE6eCD1A9)\n","text":"Oracle price data can be submitted by anyone"},"id":"opengrep-rules.solidity.security.oracle-price-update-not-restricted","name":"opengrep-rules.solidity.security.oracle-price-update-not-restricted","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.oracle-price-update-not-restricted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Proxy declares a state var that may override a storage slot of the implementation"},"help":{"markdown":"Proxy declares a state var that may override a storage slot of the implementation\n\n<b>References:</b>\n - [https://blog.audius.co/article/audius-governance-takeover-post-mortem-7-23-22](https://blog.audius.co/article/audius-governance-takeover-post-mortem-7-23-22)\n","text":"Proxy declares a state var that may override a storage slot of the implementation"},"id":"opengrep-rules.solidity.security.proxy-storage-collision","name":"opengrep-rules.solidity.security.proxy-storage-collision","properties":{"precision":"very-high","tags":["CWE-787: Out-of-bounds Write","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.proxy-storage-collision"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"transferFrom() can steal allowance of other accounts"},"help":{"markdown":"transferFrom() can steal allowance of other accounts\n\n<b>References:</b>\n - [https://medium.com/immunefi/redacted-cartel-custom-approval-logic-bugfix-review-9b2d039ca2c5](https://medium.com/immunefi/redacted-cartel-custom-approval-logic-bugfix-review-9b2d039ca2c5)\n - [https://etherscan.io/address/0x186E55C0BebD2f69348d94C4A27556d93C5Bd36C](https://etherscan.io/address/0x186E55C0BebD2f69348d94C4A27556d93C5Bd36C)\n","text":"transferFrom() can steal allowance of other accounts"},"id":"opengrep-rules.solidity.security.redacted-cartel-custom-approval-bug","name":"opengrep-rules.solidity.security.redacted-cartel-custom-approval-bug","properties":{"precision":"very-high","tags":["CWE-688: Function Call With Incorrect Variable or Reference as Argument","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.redacted-cartel-custom-approval-bug"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"setMultipleAllowances() is missing onlyOwner modifier"},"help":{"markdown":"setMultipleAllowances() is missing onlyOwner modifier\n\n<b>References:</b>\n - [https://twitter.com/danielvf/status/1494317265835147272](https://twitter.com/danielvf/status/1494317265835147272)\n - [https://etherscan.io/address/0x876b9ebd725d1fa0b879fcee12560a6453b51dc8](https://etherscan.io/address/0x876b9ebd725d1fa0b879fcee12560a6453b51dc8)\n - [https://play.secdim.com/game/dapp/challenge/rigoownsol](https://play.secdim.com/game/dapp/challenge/rigoownsol)\n","text":"setMultipleAllowances() is missing onlyOwner modifier"},"id":"opengrep-rules.solidity.security.rigoblock-missing-access-control","name":"opengrep-rules.solidity.security.rigoblock-missing-access-control","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.rigoblock-missing-access-control"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Oracle update is not restricted in $F()"},"help":{"markdown":"Oracle update is not restricted in $F()\n\n<b>References:</b>\n - [https://medium.com/immunefi/sense-finance-access-control-issue-bugfix-review-32e0c806b1a0](https://medium.com/immunefi/sense-finance-access-control-issue-bugfix-review-32e0c806b1a0)\n","text":"Oracle update is not restricted in $F()"},"id":"opengrep-rules.solidity.security.sense-missing-oracle-access-control","name":"opengrep-rules.solidity.security.sense-missing-oracle-access-control","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.sense-missing-oracle-access-control"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A specially crafted calldata may be used to impersonate other accounts"},"help":{"markdown":"A specially crafted calldata may be used to impersonate other accounts\n\n<b>References:</b>\n - [https://rekt.news/superfluid-rekt/](https://rekt.news/superfluid-rekt/)\n - [https://medium.com/superfluid-blog/08-02-22-exploit-post-mortem-15ff9c97cdd](https://medium.com/superfluid-blog/08-02-22-exploit-post-mortem-15ff9c97cdd)\n - [https://polygonscan.com/address/0x07711bb6dfbc99a1df1f2d7f57545a67519941e7](https://polygonscan.com/address/0x07711bb6dfbc99a1df1f2d7f57545a67519941e7)\n","text":"A specially crafted calldata may be used to impersonate other accounts"},"id":"opengrep-rules.solidity.security.superfluid-ctx-injection","name":"opengrep-rules.solidity.security.superfluid-ctx-injection","properties":{"precision":"very-high","tags":["CWE-20: Improper Input Validation","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.superfluid-ctx-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Parameter \"from\" is checked at incorrect position in \"_allowances\" mapping"},"help":{"markdown":"Parameter \"from\" is checked at incorrect position in \"_allowances\" mapping\n\n<b>References:</b>\n - [https://twitter.com/Mauricio_0218/status/1490082073096462340](https://twitter.com/Mauricio_0218/status/1490082073096462340)\n - [https://etherscan.io/address/0xe38b72d6595fd3885d1d2f770aa23e94757f91a1](https://etherscan.io/address/0xe38b72d6595fd3885d1d2f770aa23e94757f91a1)\n","text":"Parameter \"from\" is checked at incorrect position in \"_allowances\" mapping"},"id":"opengrep-rules.solidity.security.tecra-coin-burnfrom-bug","name":"opengrep-rules.solidity.security.tecra-coin-burnfrom-bug","properties":{"precision":"very-high","tags":["CWE-688: Function Call With Incorrect Variable or Reference as Argument","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.tecra-coin-burnfrom-bug"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Uniswap callback is not protected"},"help":{"markdown":"Uniswap callback is not protected\n\n<b>References:</b>\n - [https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback](https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback)\n","text":"Uniswap callback is not protected"},"id":"opengrep-rules.solidity.security.uniswap-callback-not-protected","name":"opengrep-rules.solidity.security.uniswap-callback-not-protected","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.uniswap-callback-not-protected"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unrestricted transferOwnership"},"help":{"markdown":"Unrestricted transferOwnership\n\n<b>References:</b>\n - [https://medium.com/quillhash/decoding-ragnarok-online-invasion-44k-exploit-quillaudits-261b7e23b55](https://medium.com/quillhash/decoding-ragnarok-online-invasion-44k-exploit-quillaudits-261b7e23b55)\n - [https://www.bscscan.com/address/0xe48b75dc1b131fd3a8364b0580f76efd04cf6e9c](https://www.bscscan.com/address/0xe48b75dc1b131fd3a8364b0580f76efd04cf6e9c)\n","text":"Unrestricted transferOwnership"},"id":"opengrep-rules.solidity.security.unrestricted-transferownership","name":"opengrep-rules.solidity.security.unrestricted-transferownership","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.solidity.security.unrestricted-transferownership"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A random number generator was detected which is **not** *guaranteed* to be Cryptographically secure. If the source of entropy is used for security purposes (e.g. with other Cryptographic operations), make sure to use the `SecCopyRandomBytes` API explicitly."},"help":{"markdown":"A random number generator was detected which is **not** *guaranteed* to be Cryptographically secure. If the source of entropy is used for security purposes (e.g. with other Cryptographic operations), make sure to use the `SecCopyRandomBytes` API explicitly.\n\n<b>References:</b>\n - [https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements](https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements)\n - [https://developer.apple.com/documentation/security/1399291-secrandomcopybytes](https://developer.apple.com/documentation/security/1399291-secrandomcopybytes)\n - [https://developer.apple.com/documentation/security/randomization_services?language=swift](https://developer.apple.com/documentation/security/randomization_services?language=swift)\n - [https://github.com/apple/swift-evolution/blob/main/proposals/0202-random-unification.md](https://github.com/apple/swift-evolution/blob/main/proposals/0202-random-unification.md)\n","text":"A random number generator was detected which is **not** *guaranteed* to be Cryptographically secure. If the source of entropy is used for security purposes (e.g. with other Cryptographic operations), make sure to use the `SecCopyRandomBytes` API explicitly."},"id":"opengrep-rules.swift.lang.crypto.insecure-random","name":"opengrep-rules.swift.lang.crypto.insecure-random","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.swift.lang.crypto.insecure-random"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain."},"help":{"markdown":"Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain.\n\n<b>References:</b>\n - [https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html](https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html)\n - [https://mas.owasp.org/MASVS/controls/MASVS-STORAGE-1/](https://mas.owasp.org/MASVS/controls/MASVS-STORAGE-1/)\n","text":"Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain."},"id":"opengrep-rules.swift.lang.storage.swift-user-defaults","name":"opengrep-rules.swift.lang.storage.swift-user-defaults","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.swift.lang.storage.swift-user-defaults"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Potential Client-side SQL injection which has different impacts depending on the SQL use-case. The impact may include the circumvention of local authentication mechanisms, obtaining of sensitive data from the app, or manipulation of client-side behavior. It wasn't possible to make certain that the source is untrusted, but the application should avoid concatenating dynamic data into SQL queries and should instead leverage parameterized queries."},"help":{"markdown":"Potential Client-side SQL injection which has different impacts depending on the SQL use-case. The impact may include the circumvention of local authentication mechanisms, obtaining of sensitive data from the app, or manipulation of client-side behavior. It wasn't possible to make certain that the source is untrusted, but the application should avoid concatenating dynamic data into SQL queries and should instead leverage parameterized queries.\n\n<b>References:</b>\n - [https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html](https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html)\n","text":"Potential Client-side SQL injection which has different impacts depending on the SQL use-case. The impact may include the circumvention of local authentication mechanisms, obtaining of sensitive data from the app, or manipulation of client-side behavior. It wasn't possible to make certain that the source is untrusted, but the application should avoid concatenating dynamic data into SQL queries and should instead leverage parameterized queries."},"id":"opengrep-rules.swift.sqllite.swift-potential-sqlite-injection","name":"opengrep-rules.swift.sqllite.swift-potential-sqlite-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.swift.sqllite.swift-potential-sqlite-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege."},"help":{"markdown":"Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege.\n\n<b>References:</b>\n - [https://mas.owasp.org/MASVS/controls/MASVS-PLATFORM-2/](https://mas.owasp.org/MASVS/controls/MASVS-PLATFORM-2/)\n - [https://developer.apple.com/documentation/webkit/wkpreferences/1536573-javascriptcanopenwindowsautomati](https://developer.apple.com/documentation/webkit/wkpreferences/1536573-javascriptcanopenwindowsautomati)\n","text":"Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege."},"id":"opengrep-rules.swift.webview.swift-webview-config-allows-js-open-windows","name":"opengrep-rules.swift.webview.swift-webview-config-allows-js-open-windows","properties":{"precision":"very-high","tags":["CWE-272: Least Privilege Violation","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.swift.webview.swift-webview-config-allows-js-open-windows"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Amazon ElastiCache clusters have automatic backup turned on. To fix this, set a `snapshot_retention_limit`."},"help":{"markdown":"Ensure that Amazon ElastiCache clusters have automatic backup turned on. To fix this, set a `snapshot_retention_limit`.","text":"Ensure that Amazon ElastiCache clusters have automatic backup turned on. To fix this, set a `snapshot_retention_limit`."},"id":"opengrep-rules.terraform.aws.best-practice.aws-elasticache-automatic-backup-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-elasticache-automatic-backup-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-elasticache-automatic-backup-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS QLDB ledger permissions are too permissive. Consider using \"'STANDARD'\" permissions mode if possible."},"help":{"markdown":"The AWS QLDB ledger permissions are too permissive. Consider using \"'STANDARD'\" permissions mode if possible.","text":"The AWS QLDB ledger permissions are too permissive. Consider using \"'STANDARD'\" permissions mode if possible."},"id":"opengrep-rules.terraform.aws.best-practice.aws-qldb-inadequate-ledger-permissions-mode","name":"opengrep-rules.terraform.aws.best-practice.aws-qldb-inadequate-ledger-permissions-mode","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-qldb-inadequate-ledger-permissions-mode"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS RDS Cluster is not configured to use IAM authentication. Consider using IAM for authentication."},"help":{"markdown":"The AWS RDS Cluster is not configured to use IAM authentication. Consider using IAM for authentication.","text":"The AWS RDS Cluster is not configured to use IAM authentication. Consider using IAM for authentication."},"id":"opengrep-rules.terraform.aws.best-practice.aws-rds-cluster-iam-authentication-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-rds-cluster-iam-authentication-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-rds-cluster-iam-authentication-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS RDS is not configured to use IAM authentication. Consider using IAM for authentication."},"help":{"markdown":"The AWS RDS is not configured to use IAM authentication. Consider using IAM for authentication.","text":"The AWS RDS is not configured to use IAM authentication. Consider using IAM for authentication."},"id":"opengrep-rules.terraform.aws.best-practice.aws-rds-iam-authentication-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-rds-iam-authentication-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-rds-iam-authentication-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS RDS is not configured to use multi-az. Consider using it if possible."},"help":{"markdown":"The AWS RDS is not configured to use multi-az. Consider using it if possible.","text":"The AWS RDS is not configured to use multi-az. Consider using it if possible."},"id":"opengrep-rules.terraform.aws.best-practice.aws-rds-multiaz-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-rds-multiaz-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-rds-multiaz-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Amazon S3 bucket versioning is not enabled. Consider using versioning if you don't have alternative backup mechanism."},"help":{"markdown":"Ensure that Amazon S3 bucket versioning is not enabled. Consider using versioning if you don't have alternative backup mechanism.","text":"Ensure that Amazon S3 bucket versioning is not enabled. Consider using versioning if you don't have alternative backup mechanism."},"id":"opengrep-rules.terraform.aws.best-practice.aws-s3-bucket-versioning-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-s3-bucket-versioning-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-s3-bucket-versioning-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS S3 object lock is not enabled. Consider using it if possible."},"help":{"markdown":"The AWS S3 object lock is not enabled. Consider using it if possible.","text":"The AWS S3 object lock is not enabled. Consider using it if possible."},"id":"opengrep-rules.terraform.aws.best-practice.aws-s3-object-lock-not-enabled","name":"opengrep-rules.terraform.aws.best-practice.aws-s3-object-lock-not-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.aws-s3-object-lock-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a AWS load balancer that is not configured to drop invalid HTTP headers. Add `drop_invalid_header_fields = true` in your resource block."},"help":{"markdown":"Detected a AWS load balancer that is not configured to drop invalid HTTP headers. Add `drop_invalid_header_fields = true` in your resource block.","text":"Detected a AWS load balancer that is not configured to drop invalid HTTP headers. Add `drop_invalid_header_fields = true` in your resource block."},"id":"opengrep-rules.terraform.aws.best-practice.missing-alb-drop-http-headers","name":"opengrep-rules.terraform.aws.best-practice.missing-alb-drop-http-headers","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-alb-drop-http-headers"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a AWS API Gateway Stage without cache cluster enabled. Enabling the cache cluster feature enhances responsiveness of your API. Add `cache_cluster_enabled = true` to your resource block."},"help":{"markdown":"Found a AWS API Gateway Stage without cache cluster enabled. Enabling the cache cluster feature enhances responsiveness of your API. Add `cache_cluster_enabled = true` to your resource block.","text":"Found a AWS API Gateway Stage without cache cluster enabled. Enabling the cache cluster feature enhances responsiveness of your API. Add `cache_cluster_enabled = true` to your resource block."},"id":"opengrep-rules.terraform.aws.best-practice.missing-api-gateway-cache-cluster","name":"opengrep-rules.terraform.aws.best-practice.missing-api-gateway-cache-cluster","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-api-gateway-cache-cluster"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"There are missing tags for an AWS Auto Scaling group. Tags help track costs, allow for filtering for Auto Scaling groups, help with access control, and aid in organizing AWS resources. Add: `tag {\n  key = \"key\"\n  value = \"value\"\n  propagate_at_launch = boolean\n}` See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group for more details."},"help":{"markdown":"There are missing tags for an AWS Auto Scaling group. Tags help track costs, allow for filtering for Auto Scaling groups, help with access control, and aid in organizing AWS resources. Add: `tag {\n  key = \"key\"\n  value = \"value\"\n  propagate_at_launch = boolean\n}` See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group for more details.","text":"There are missing tags for an AWS Auto Scaling group. Tags help track costs, allow for filtering for Auto Scaling groups, help with access control, and aid in organizing AWS resources. Add: `tag {\n  key = \"key\"\n  value = \"value\"\n  propagate_at_launch = boolean\n}` See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group for more details."},"id":"opengrep-rules.terraform.aws.best-practice.missing-autoscaling-group-tags","name":"opengrep-rules.terraform.aws.best-practice.missing-autoscaling-group-tags","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-autoscaling-group-tags"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Autoscaling Group is not tagged."},"help":{"markdown":"The AWS Autoscaling Group is not tagged.","text":"The AWS Autoscaling Group is not tagged."},"id":"opengrep-rules.terraform.aws.best-practice.missing-aws-autoscaling-tags","name":"opengrep-rules.terraform.aws.best-practice.missing-aws-autoscaling-tags","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-aws-autoscaling-tags"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS cross zone load balancing is not enabled."},"help":{"markdown":"The AWS cross zone load balancing is not enabled.","text":"The AWS cross zone load balancing is not enabled."},"id":"opengrep-rules.terraform.aws.best-practice.missing-aws-cross-zone-lb","name":"opengrep-rules.terraform.aws.best-practice.missing-aws-cross-zone-lb","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-aws-cross-zone-lb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS LoadBalancer deletion protection is not enabled."},"help":{"markdown":"The AWS LoadBalancer deletion protection is not enabled.\n\n<b>References:</b>\n - [https://aws.amazon.com/what-is/load-balancing/#seo-faq-pairs#benefits-lb](https://aws.amazon.com/what-is/load-balancing/#seo-faq-pairs#benefits-lb)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb)\n","text":"The AWS LoadBalancer deletion protection is not enabled."},"id":"opengrep-rules.terraform.aws.best-practice.missing-aws-lb-deletion-protection","name":"opengrep-rules.terraform.aws.best-practice.missing-aws-lb-deletion-protection","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-aws-lb-deletion-protection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS QLDB deletion protection is not enabled."},"help":{"markdown":"The AWS QLDB deletion protection is not enabled.","text":"The AWS QLDB deletion protection is not enabled."},"id":"opengrep-rules.terraform.aws.best-practice.missing-aws-qldb-deletion-protection","name":"opengrep-rules.terraform.aws.best-practice.missing-aws-qldb-deletion-protection","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-aws-qldb-deletion-protection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS CloudWatch Log group is missing a KMS key. While Log group data is always encrypted, you can optionally use a KMS key instead. Add `kms_key_id = \"yourKey\"` to your resource block."},"help":{"markdown":"The AWS CloudWatch Log group is missing a KMS key. While Log group data is always encrypted, you can optionally use a KMS key instead. Add `kms_key_id = \"yourKey\"` to your resource block.","text":"The AWS CloudWatch Log group is missing a KMS key. While Log group data is always encrypted, you can optionally use a KMS key instead. Add `kms_key_id = \"yourKey\"` to your resource block."},"id":"opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-kms-key","name":"opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-kms-key","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-kms-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS CloudWatch Log group is missing log retention time. By default, logs are retained indefinitely. Add `retention_in_days = <integer>` to your resource block."},"help":{"markdown":"The AWS CloudWatch Log group is missing log retention time. By default, logs are retained indefinitely. Add `retention_in_days = <integer>` to your resource block.","text":"The AWS CloudWatch Log group is missing log retention time. By default, logs are retained indefinitely. Add `retention_in_days = <integer>` to your resource block."},"id":"opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-retention","name":"opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-retention","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.best-practice.missing-cloudwatch-log-group-retention"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `source_arn` field needs to end with an asterisk, like this: `<log-group-arn>:*` Without this, the `aws_lambda_permission` resource '$NAME' will not be created. Add the asterisk to the end of the arn. x $ARN"},"help":{"markdown":"The `source_arn` field needs to end with an asterisk, like this: `<log-group-arn>:*` Without this, the `aws_lambda_permission` resource '$NAME' will not be created. Add the asterisk to the end of the arn. x $ARN\n\n<b>References:</b>\n - [https://github.com/hashicorp/terraform-provider-aws/issues/14630](https://github.com/hashicorp/terraform-provider-aws/issues/14630)\n","text":"The `source_arn` field needs to end with an asterisk, like this: `<log-group-arn>:*` Without this, the `aws_lambda_permission` resource '$NAME' will not be created. Add the asterisk to the end of the arn. x $ARN"},"id":"opengrep-rules.terraform.aws.correctness.lambda-permission-logs-missing-arn-asterisk","name":"opengrep-rules.terraform.aws.correctness.lambda-permission-logs-missing-arn-asterisk","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.correctness.lambda-permission-logs-missing-arn-asterisk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When using the AWS Lambda \"Image\" package_type, `runtime` and `handler` are not necessary for Lambda to understand how to run the code. These are built into the container image. Including `runtime` or `handler` with an \"Image\" `package_type` will result in an error on `terraform apply`. Remove these redundant fields."},"help":{"markdown":"When using the AWS Lambda \"Image\" package_type, `runtime` and `handler` are not necessary for Lambda to understand how to run the code. These are built into the container image. Including `runtime` or `handler` with an \"Image\" `package_type` will result in an error on `terraform apply`. Remove these redundant fields.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/72771366/why-do-i-get-error-handler-and-runtime-must-be-set-when-packagetype-is-zip-whe](https://stackoverflow.com/questions/72771366/why-do-i-get-error-handler-and-runtime-must-be-set-when-packagetype-is-zip-whe)\n","text":"When using the AWS Lambda \"Image\" package_type, `runtime` and `handler` are not necessary for Lambda to understand how to run the code. These are built into the container image. Including `runtime` or `handler` with an \"Image\" `package_type` will result in an error on `terraform apply`. Remove these redundant fields."},"id":"opengrep-rules.terraform.aws.correctness.lambda-redundant-field-with-image","name":"opengrep-rules.terraform.aws.correctness.lambda-redundant-field-with-image","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.correctness.lambda-redundant-field-with-image"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`terraform apply` will fail because the environment variable \"$VARIABLE\" is a reserved by AWS. Use another name for \"$VARIABLE\"."},"help":{"markdown":"`terraform apply` will fail because the environment variable \"$VARIABLE\" is a reserved by AWS. Use another name for \"$VARIABLE\".\n\n<b>References:</b>\n - [https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime)\n","text":"`terraform apply` will fail because the environment variable \"$VARIABLE\" is a reserved by AWS. Use another name for \"$VARIABLE\"."},"id":"opengrep-rules.terraform.aws.correctness.reserved-aws-lambda-environment-variable","name":"opengrep-rules.terraform.aws.correctness.reserved-aws-lambda-environment-variable","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.correctness.reserved-aws-lambda-environment-variable"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail."},"help":{"markdown":"The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail.\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/38407660/terraform-configuring-cloudwatch-log-subscription-delivery-to-lambda/38428834#38428834](https://stackoverflow.com/questions/38407660/terraform-configuring-cloudwatch-log-subscription-delivery-to-lambda/38428834#38428834)\n","text":"The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail."},"id":"opengrep-rules.terraform.aws.correctness.subscription-filter-missing-depends","name":"opengrep-rules.terraform.aws.correctness.subscription-filter-missing-depends","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.correctness.subscription-filter-missing-depends"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Athena workgroup configuration can be overriden by client-side settings. The client can make changes to disable encryption settings. Enforce the configuration to prevent client overrides."},"help":{"markdown":"The Athena workgroup configuration can be overriden by client-side settings. The client can make changes to disable encryption settings. Enforce the configuration to prevent client overrides.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The Athena workgroup configuration can be overriden by client-side settings. The client can make changes to disable encryption settings. Enforce the configuration to prevent client overrides."},"id":"opengrep-rules.terraform.aws.security.aws-athena-client-can-disable-workgroup-encryption","name":"opengrep-rules.terraform.aws.security.aws-athena-client-can-disable-workgroup-encryption","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-athena-client-can-disable-workgroup-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Athena database is unencrypted at rest. These databases are generally derived from data in S3 buckets and should have the same level of at rest protection. The AWS KMS encryption key protects database contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The Athena database is unencrypted at rest. These databases are generally derived from data in S3 buckets and should have the same level of at rest protection. The AWS KMS encryption key protects database contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The Athena database is unencrypted at rest. These databases are generally derived from data in S3 buckets and should have the same level of at rest protection. The AWS KMS encryption key protects database contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-athena-database-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-athena-database-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-athena-database-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Athena Work Group is unencrypted. The AWS KMS encryption key protects backups in the work group. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS Athena Work Group is unencrypted. The AWS KMS encryption key protects backups in the work group. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The AWS Athena Work Group is unencrypted. The AWS KMS encryption key protects backups in the work group. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-athena-workgroup-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-athena-workgroup-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-athena-workgroup-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Backup vault is unencrypted. The AWS KMS encryption key protects backups in the Backup vault. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS Backup vault is unencrypted. The AWS KMS encryption key protects backups in the Backup vault. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS Backup vault is unencrypted. The AWS KMS encryption key protects backups in the Backup vault. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-backup-vault-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-backup-vault-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-backup-vault-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure CloudTrail logs are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure CloudTrail logs are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure CloudTrail logs are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-cloudtrail-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-cloudtrail-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-cloudtrail-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information."},"help":{"markdown":"The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information."},"id":"opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-no-retention","name":"opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-no-retention","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-no-retention"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By default, AWS CloudWatch Log Group is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your log group in CloudWatch. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"help":{"markdown":"By default, AWS CloudWatch Log Group is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your log group in CloudWatch. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"By default, AWS CloudWatch Log Group is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your log group in CloudWatch. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"id":"opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-unencrypted","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-cloudwatch-log-group-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The CodeBuild project artifacts are unencrypted. All artifacts produced by your CodeBuild project pipeline should be encrypted to prevent them from being read if compromised."},"help":{"markdown":"The CodeBuild project artifacts are unencrypted. All artifacts produced by your CodeBuild project pipeline should be encrypted to prevent them from being read if compromised.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codebuild_project#encryption_disabled](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codebuild_project#encryption_disabled)\n - [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-artifacts.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-artifacts.html)\n - [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html)\n","text":"The CodeBuild project artifacts are unencrypted. All artifacts produced by your CodeBuild project pipeline should be encrypted to prevent them from being read if compromised."},"id":"opengrep-rules.terraform.aws.security.aws-codebuild-artifacts-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-codebuild-artifacts-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-codebuild-artifacts-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS CodeBuild Project Artifacts are unencrypted. The AWS KMS encryption key protects artifacts in the CodeBuild Projects. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS CodeBuild Project Artifacts are unencrypted. The AWS KMS encryption key protects artifacts in the CodeBuild Projects. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS CodeBuild Project Artifacts are unencrypted. The AWS KMS encryption key protects artifacts in the CodeBuild Projects. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-codebuild-project-artifacts-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-codebuild-project-artifacts-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-codebuild-project-artifacts-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-codebuild-project-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-codebuild-project-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-codebuild-project-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source."},"help":{"markdown":"The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n","text":"The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source."},"id":"opengrep-rules.terraform.aws.security.aws-config-aggregator-not-all-regions","name":"opengrep-rules.terraform.aws.security.aws-config-aggregator-not-all-regions","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","HIGH CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-config-aggregator-not-all-regions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Database instance has no logging. Missing logs can cause missing important event information."},"help":{"markdown":"Database instance has no logging. Missing logs can cause missing important event information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Database instance has no logging. Missing logs can cause missing important event information."},"id":"opengrep-rules.terraform.aws.security.aws-db-instance-no-logging","name":"opengrep-rules.terraform.aws.security.aws-db-instance-no-logging","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-db-instance-no-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure DocDB is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure DocDB is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure DocDB is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-docdb-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-docdb-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-docdb-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch."},"help":{"markdown":"Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#enabled_cloudwatch_logs_exports](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#enabled_cloudwatch_logs_exports)\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n","text":"Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch."},"id":"opengrep-rules.terraform.aws.security.aws-documentdb-auditing-disabled","name":"opengrep-rules.terraform.aws.security.aws-documentdb-auditing-disabled","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","MEDIUM CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-documentdb-auditing-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS DocumentDB cluster is unencrypted. The data could be read if the underlying disks are compromised. You should enable storage encryption."},"help":{"markdown":"The AWS DocumentDB cluster is unencrypted. The data could be read if the underlying disks are compromised. You should enable storage encryption.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#storage_encrypted](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#storage_encrypted)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The AWS DocumentDB cluster is unencrypted. The data could be read if the underlying disks are compromised. You should enable storage encryption."},"id":"opengrep-rules.terraform.aws.security.aws-documentdb-storage-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-documentdb-storage-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-documentdb-storage-unencrypted"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Point-in-time recovery is not enabled for the DynamoDB table. DynamoDB tables should be protected against accidental or malicious write/delete actions. By enabling point-in-time-recovery you can restore to a known point in the event of loss of data."},"help":{"markdown":"Point-in-time recovery is not enabled for the DynamoDB table. DynamoDB tables should be protected against accidental or malicious write/delete actions. By enabling point-in-time-recovery you can restore to a known point in the event of loss of data.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table#point_in_time_recovery](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table#point_in_time_recovery)\n","text":"Point-in-time recovery is not enabled for the DynamoDB table. DynamoDB tables should be protected against accidental or malicious write/delete actions. By enabling point-in-time-recovery you can restore to a known point in the event of loss of data."},"id":"opengrep-rules.terraform.aws.security.aws-dynamodb-point-in-time-recovery-disabled","name":"opengrep-rules.terraform.aws.security.aws-dynamodb-point-in-time-recovery-disabled","properties":{"precision":"very-high","tags":["CWE-221: Information Loss or Omission","LOW CONFIDENCE","OWASP-A09:2021 – Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-dynamodb-point-in-time-recovery-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"help":{"markdown":"By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"id":"opengrep-rules.terraform.aws.security.aws-dynamodb-table-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-dynamodb-table-unencrypted","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-dynamodb-table-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS."},"help":{"markdown":"The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS."},"id":"opengrep-rules.terraform.aws.security.aws-ebs-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-ebs-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ebs-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure EBS Volume is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure EBS Volume is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure EBS Volume is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-ebs-volume-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-ebs-volume-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ebs-volume-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely."},"help":{"markdown":"The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)\n","text":"The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely."},"id":"opengrep-rules.terraform.aws.security.aws-ebs-volume-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-ebs-volume-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ebs-volume-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`."},"help":{"markdown":"EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`."},"id":"opengrep-rules.terraform.aws.security.aws-ec2-has-public-ip","name":"opengrep-rules.terraform.aws.security.aws-ec2-has-public-ip","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ec2-has-public-ip"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS launch configuration EBS block device is unencrypted. The block device could be read if compromised. Block devices should be encrypted to ensure sensitive data is held securely at rest."},"help":{"markdown":"The AWS launch configuration EBS block device is unencrypted. The block device could be read if compromised. Block devices should be encrypted to ensure sensitive data is held securely at rest.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#block-devices](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#block-devices)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html)\n","text":"The AWS launch configuration EBS block device is unencrypted. The block device could be read if compromised. Block devices should be encrypted to ensure sensitive data is held securely at rest."},"id":"opengrep-rules.terraform.aws.security.aws-ec2-launch-configuration-ebs-block-device-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-ec2-launch-configuration-ebs-block-device-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ec2-launch-configuration-ebs-block-device-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2."},"help":{"markdown":"The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options)\n - [https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service](https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service)\n","text":"The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2."},"id":"opengrep-rules.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled","name":"opengrep-rules.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled","properties":{"precision":"very-high","tags":["CWE-1390: Weak Authentication","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The security group rule allows ingress from public internet. Opening up ports to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range."},"help":{"markdown":"The security group rule allows ingress from public internet. Opening up ports to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_ingress_rule#cidr_ipv4](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_ingress_rule#cidr_ipv4)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html)\n","text":"The security group rule allows ingress from public internet. Opening up ports to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range."},"id":"opengrep-rules.terraform.aws.security.aws-ec2-security-group-allows-public-ingress","name":"opengrep-rules.terraform.aws.security.aws-ec2-security-group-allows-public-ingress","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ec2-security-group-allows-public-ingress"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The AWS security group rule is missing a description, or its description is empty or the default value.  Security groups rules should include a meaningful description in order to simplify auditing, debugging, and managing security groups."},"help":{"markdown":"The AWS security group rule is missing a description, or its description is empty or the default value.  Security groups rules should include a meaningful description in order to simplify auditing, debugging, and managing security groups.\n\n<b>References:</b>\n - [https://shisho.dev/dojo/providers/aws/Amazon_EC2/aws-security-group/#:~:text=Ensure%20to%20keep%20the%20description%20of%20your%20security%20group%20up%2Dto%2Ddate](https://shisho.dev/dojo/providers/aws/Amazon_EC2/aws-security-group/#:~:text=Ensure%20to%20keep%20the%20description%20of%20your%20security%20group%20up%2Dto%2Ddate)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group#description](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group#description)\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n","text":"The AWS security group rule is missing a description, or its description is empty or the default value.  Security groups rules should include a meaningful description in order to simplify auditing, debugging, and managing security groups."},"id":"opengrep-rules.terraform.aws.security.aws-ec2-security-group-rule-missing-description","name":"opengrep-rules.terraform.aws.security.aws-ec2-security-group-rule-missing-description","properties":{"precision":"very-high","tags":["CWE-223: Omission of Security-relevant Information","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ec2-security-group-rule-missing-description"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The ECR repository has image scans disabled. Repository image scans should be enabled to ensure vulnerable software can be discovered and remediated as soon as possible."},"help":{"markdown":"The ECR repository has image scans disabled. Repository image scans should be enabled to ensure vulnerable software can be discovered and remediated as soon as possible.\n\n<b>References:</b>\n - [https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_scanning_configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_scanning_configuration)\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n","text":"The ECR repository has image scans disabled. Repository image scans should be enabled to ensure vulnerable software can be discovered and remediated as soon as possible."},"id":"opengrep-rules.terraform.aws.security.aws-ecr-image-scanning-disabled","name":"opengrep-rules.terraform.aws.security.aws-ecr-image-scanning-disabled","properties":{"precision":"very-high","tags":["CWE-223: Omission of Security-relevant Information","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ecr-image-scanning-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE."},"help":{"markdown":"The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/)\n","text":"The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE."},"id":"opengrep-rules.terraform.aws.security.aws-ecr-mutable-image-tags","name":"opengrep-rules.terraform.aws.security.aws-ecr-mutable-image-tags","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ecr-mutable-image-tags"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege."},"help":{"markdown":"Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy)\n - [https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html](https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html)\n - [https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html)\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege."},"id":"opengrep-rules.terraform.aws.security.aws-ecr-repository-wildcard-principal","name":"opengrep-rules.terraform.aws.security.aws-ecr-repository-wildcard-principal","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ecr-repository-wildcard-principal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\"."},"help":{"markdown":"Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\".\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\"."},"id":"opengrep-rules.terraform.aws.security.aws-elasticsearch-insecure-tls-version","name":"opengrep-rules.terraform.aws.security.aws-elasticsearch-insecure-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-elasticsearch-insecure-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure all Elasticsearch has node-to-node encryption enabled.\t"},"help":{"markdown":"Ensure all Elasticsearch has node-to-node encryption enabled.\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure all Elasticsearch has node-to-node encryption enabled.\t"},"id":"opengrep-rules.terraform.aws.security.aws-elasticsearch-nodetonode-encryption-not-enabled","name":"opengrep-rules.terraform.aws.security.aws-elasticsearch-nodetonode-encryption-not-enabled","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-elasticsearch-nodetonode-encryption-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ELB has no logging. Missing logs can cause missing important event information."},"help":{"markdown":"ELB has no logging. Missing logs can cause missing important event information.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"ELB has no logging. Missing logs can cause missing important event information."},"id":"opengrep-rules.terraform.aws.security.aws-elb-access-logs-not-enabled","name":"opengrep-rules.terraform.aws.security.aws-elb-access-logs-not-enabled","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-elb-access-logs-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure EMR is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure EMR is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure EMR is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-emr-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-emr-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-emr-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure FSX ONTAP file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure FSX ONTAP file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure FSX ONTAP file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure FSX Windows file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure FSX Windows file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure FSX Windows file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-fsx-windows-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-fsx-windows-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-fsx-windows-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`."},"help":{"markdown":"Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`."},"id":"opengrep-rules.terraform.aws.security.aws-glacier-vault-any-principal","name":"opengrep-rules.terraform.aws.security.aws-glacier-vault-any-principal","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-glacier-vault-any-principal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."},"help":{"markdown":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."},"id":"opengrep-rules.terraform.aws.security.aws-iam-admin-policy","name":"opengrep-rules.terraform.aws.security.aws-iam-admin-policy","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-iam-admin-policy"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."},"help":{"markdown":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."},"id":"opengrep-rules.terraform.aws.security.aws-iam-admin-policy-ssoadmin","name":"opengrep-rules.terraform.aws.security.aws-iam-admin-policy-ssoadmin","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-iam-admin-policy-ssoadmin"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure ImageBuilder component is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure ImageBuilder component is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure ImageBuilder component is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\"."},"help":{"markdown":"Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\".\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\"."},"id":"opengrep-rules.terraform.aws.security.aws-insecure-api-gateway-tls-version","name":"opengrep-rules.terraform.aws.security.aws-insecure-api-gateway-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-insecure-api-gateway-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`."},"help":{"markdown":"Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`."},"id":"opengrep-rules.terraform.aws.security.aws-insecure-cloudfront-distribution-tls-version","name":"opengrep-rules.terraform.aws.security.aws-insecure-cloudfront-distribution-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-insecure-cloudfront-distribution-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`."},"help":{"markdown":"Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`."},"id":"opengrep-rules.terraform.aws.security.aws-insecure-redshift-ssl-configuration","name":"opengrep-rules.terraform.aws.security.aws-insecure-redshift-ssl-configuration","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-insecure-redshift-ssl-configuration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Kinesis stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure Kinesis stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Kinesis stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption."},"help":{"markdown":"The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type)\n - [https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html](https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html)\n","text":"The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption."},"id":"opengrep-rules.terraform.aws.security.aws-kinesis-stream-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-kinesis-stream-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-kinesis-stream-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Kinesis video stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure Kinesis video stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Kinesis video stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege."},"help":{"markdown":"Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n","text":"Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege."},"id":"opengrep-rules.terraform.aws.security.aws-kms-key-wildcard-principal","name":"opengrep-rules.terraform.aws.security.aws-kms-key-wildcard-principal","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-kms-key-wildcard-principal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`."},"help":{"markdown":"The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`."},"id":"opengrep-rules.terraform.aws.security.aws-kms-no-rotation","name":"opengrep-rules.terraform.aws.security.aws-kms-no-rotation","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-kms-no-rotation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.terraform.aws.security.aws-lambda-environment-credentials","name":"opengrep-rules.terraform.aws.security.aws-lambda-environment-credentials","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-lambda-environment-credentials"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By default, the AWS Lambda Environment is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your environment variables in Lambda. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"help":{"markdown":"By default, the AWS Lambda Environment is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your environment variables in Lambda. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"By default, the AWS Lambda Environment is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your environment variables in Lambda. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"id":"opengrep-rules.terraform.aws.security.aws-lambda-environment-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-lambda-environment-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-lambda-environment-unencrypted"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic."},"help":{"markdown":"The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission)\n - [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)\n","text":"The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic."},"id":"opengrep-rules.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn","name":"opengrep-rules.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts."},"help":{"markdown":"The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/778.html](https://cwe.mitre.org/data/definitions/778.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode)\n - [https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html)\n","text":"The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts."},"id":"opengrep-rules.terraform.aws.security.aws-lambda-x-ray-tracing-not-active","name":"opengrep-rules.terraform.aws.security.aws-lambda-x-ray-tracing-not-active","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","MEDIUM CONFIDENCE","OWASP-A09:2021 Security Logging and Monitoring Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-lambda-x-ray-tracing-not-active"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ingress and/or egress is allowed for all ports in the network ACL rule. Ensure access to specific required ports is allowed, and nothing else."},"help":{"markdown":"Ingress and/or egress is allowed for all ports in the network ACL rule. Ensure access to specific required ports is allowed, and nothing else.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl)\n - [https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html)\n","text":"Ingress and/or egress is allowed for all ports in the network ACL rule. Ensure access to specific required ports is allowed, and nothing else."},"id":"opengrep-rules.terraform.aws.security.aws-network-acl-allows-all-ports","name":"opengrep-rules.terraform.aws.security.aws-network-acl-allows-all-ports","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-network-acl-allows-all-ports"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The network ACL rule allows ingress from public internet. Opening up ACLs to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range."},"help":{"markdown":"The network ACL rule allows ingress from public internet. Opening up ACLs to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule#cidr_block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule#cidr_block)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl#cidr_block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl#cidr_block)\n - [https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html)\n","text":"The network ACL rule allows ingress from public internet. Opening up ACLs to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range."},"id":"opengrep-rules.terraform.aws.security.aws-network-acl-allows-public-ingress","name":"opengrep-rules.terraform.aws.security.aws-network-acl-allows-public-ingress","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-network-acl-allows-public-ingress"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure opensearch serverless is encrypted at rest using AWS KMS (Key Management Service) CMK (Customer Managed Keys). CMKs give you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure opensearch serverless is encrypted at rest using AWS KMS (Key Management Service) CMK (Customer Managed Keys). CMKs give you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies)\n","text":"Ensure opensearch serverless is encrypted at rest using AWS KMS (Key Management Service) CMK (Customer Managed Keys). CMKs give you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-opensearchserverless-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-opensearchserverless-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A2:2021 Cryptographic Failures","OWASP-A5:2021 Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-opensearchserverless-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"id":"opengrep-rules.terraform.aws.security.aws-provider-static-credentials","name":"opengrep-rules.terraform.aws.security.aws-provider-static-credentials","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-provider-static-credentials"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Provisioners are a tool of last resort and should be avoided where possible. Provisioner behavior cannot be mapped by Terraform as part of a plan, and execute arbitrary shell commands by design."},"help":{"markdown":"Provisioners are a tool of last resort and should be avoided where possible. Provisioner behavior cannot be mapped by Terraform as part of a plan, and execute arbitrary shell commands by design.\n\n<b>References:</b>\n - [https://developer.hashicorp.com/terraform/language/resources/provisioners/remote-exec](https://developer.hashicorp.com/terraform/language/resources/provisioners/remote-exec)\n - [https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec](https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec)\n","text":"Provisioners are a tool of last resort and should be avoided where possible. Provisioner behavior cannot be mapped by Terraform as part of a plan, and execute arbitrary shell commands by design."},"id":"opengrep-rules.terraform.aws.security.aws-provisioner-exec","name":"opengrep-rules.terraform.aws.security.aws-provisioner-exec","properties":{"precision":"very-high","tags":["CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')","CWE-94: Improper Control of Generation of Code ('Code Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-provisioner-exec"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`."},"help":{"markdown":"The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`."},"id":"opengrep-rules.terraform.aws.security.aws-rds-backup-no-retention","name":"opengrep-rules.terraform.aws.security.aws-rds-backup-no-retention","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-rds-backup-no-retention"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure AWS Redshift cluster is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure AWS Redshift cluster is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure AWS Redshift cluster is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure S3 bucket object is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure S3 bucket object is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure S3 bucket object is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure S3 object copies are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure S3 object copies are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure S3 object copies are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure AWS Sagemaker domains are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure AWS Sagemaker domains are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure AWS Sagemaker domains are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By default, AWS SecretManager secrets are encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your secrets in the Secret Manager. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"help":{"markdown":"By default, AWS SecretManager secrets are encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your secrets in the Secret Manager. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"By default, AWS SecretManager secrets are encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your secrets in the Secret Manager. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."},"id":"opengrep-rules.terraform.aws.security.aws-secretsmanager-secret-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-secretsmanager-secret-unencrypted","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-secretsmanager-secret-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS SNS topic is unencrypted. The SNS topic messages could be read if compromised. The AWS KMS encryption key protects topic contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS SNS topic is unencrypted. The SNS topic messages could be read if compromised. The AWS KMS encryption key protects topic contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"The AWS SNS topic is unencrypted. The SNS topic messages could be read if compromised. The AWS KMS encryption key protects topic contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-sns-topic-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-sns-topic-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-sns-topic-unencrypted"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Wildcard used in your SQS queue policy action. SQS queue policies should always grant least privilege - that is, only grant the permissions required to perform a specific task. Implementing least privilege is important to reducing security risks and reducing the effect of errors or malicious intent."},"help":{"markdown":"Wildcard used in your SQS queue policy action. SQS queue policies should always grant least privilege - that is, only grant the permissions required to perform a specific task. Implementing least privilege is important to reducing security risks and reducing the effect of errors or malicious intent.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy)\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html)\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-least-privilege-policy.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-least-privilege-policy.html)\n","text":"Wildcard used in your SQS queue policy action. SQS queue policies should always grant least privilege - that is, only grant the permissions required to perform a specific task. Implementing least privilege is important to reducing security risks and reducing the effect of errors or malicious intent."},"id":"opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-action","name":"opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-action","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-action"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege."},"help":{"markdown":"Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy)\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html)\n","text":"Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege."},"id":"opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal","name":"opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS SQS queue contents are unencrypted. The data could be read if compromised. Enable server-side encryption for your queue using SQS-managed encryption keys (SSE-SQS), or using your own AWS KMS key (SSE-KMS)."},"help":{"markdown":"The AWS SQS queue contents are unencrypted. The data could be read if compromised. Enable server-side encryption for your queue using SQS-managed encryption keys (SSE-SQS), or using your own AWS KMS key (SSE-KMS).\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue#server-side-encryption-sse](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue#server-side-encryption-sse)\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html)\n","text":"The AWS SQS queue contents are unencrypted. The data could be read if compromised. Enable server-side encryption for your queue using SQS-managed encryption keys (SSE-SQS), or using your own AWS KMS key (SSE-KMS)."},"id":"opengrep-rules.terraform.aws.security.aws-sqs-queue-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-sqs-queue-unencrypted","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-sqs-queue-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS SSM logs are unencrypted or disabled. Please enable logs and use AWS KMS encryption key to protect SSM logs. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS SSM logs are unencrypted or disabled. Please enable logs and use AWS KMS encryption key to protect SSM logs. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS SSM logs are unencrypted or disabled. Please enable logs and use AWS KMS encryption key to protect SSM logs. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-ssm-document-logging-issues","name":"opengrep-rules.terraform.aws.security.aws-ssm-document-logging-issues","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-ssm-document-logging-issues"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible."},"help":{"markdown":"Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses)\n","text":"Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible."},"id":"opengrep-rules.terraform.aws.security.aws-subnet-has-public-ip-address","name":"opengrep-rules.terraform.aws.security.aws-subnet-has-public-ip-address","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-subnet-has-public-ip-address"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Timestream database is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"help":{"markdown":"Ensure Timestream database is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Timestream database is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."},"id":"opengrep-rules.terraform.aws.security.aws-timestream-database-encrypted-with-cmk","name":"opengrep-rules.terraform.aws.security.aws-timestream-database-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-timestream-database-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Transfer Server endpoint type should not have public or null configured in order to block public access. To fix this, set your `endpoint_type` to `\"VPC\"`."},"help":{"markdown":"Transfer Server endpoint type should not have public or null configured in order to block public access. To fix this, set your `endpoint_type` to `\"VPC\"`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Transfer Server endpoint type should not have public or null configured in order to block public access. To fix this, set your `endpoint_type` to `\"VPC\"`."},"id":"opengrep-rules.terraform.aws.security.aws-transfer-server-is-public","name":"opengrep-rules.terraform.aws.security.aws-transfer-server-is-public","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-transfer-server-is-public"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Workspace root volume is unencrypted. The AWS KMS encryption key protects root volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS Workspace root volume is unencrypted. The AWS KMS encryption key protects root volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS Workspace root volume is unencrypted. The AWS KMS encryption key protects root volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-workspaces-root-volume-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-workspaces-root-volume-unencrypted","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-workspaces-root-volume-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Workspace user volume is unencrypted. The AWS KMS encryption key protects user volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"help":{"markdown":"The AWS Workspace user volume is unencrypted. The AWS KMS encryption key protects user volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS Workspace user volume is unencrypted. The AWS KMS encryption key protects user volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."},"id":"opengrep-rules.terraform.aws.security.aws-workspaces-user-volume-unencrypted","name":"opengrep-rules.terraform.aws.security.aws-workspaces-user-volume-unencrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.aws-workspaces-user-volume-unencrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS."},"help":{"markdown":"Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS.\n\n<b>References:</b>\n - [https://www.ietf.org/rfc/rfc5246.txt](https://www.ietf.org/rfc/rfc5246.txt)\n","text":"Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS."},"id":"opengrep-rules.terraform.aws.security.insecure-load-balancer-tls-version","name":"opengrep-rules.terraform.aws.security.insecure-load-balancer-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.insecure-load-balancer-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The AWS Athena Workgroup is unencrypted. Encryption protects query results in your workgroup. To enable, add: `encryption_configuration { encryption_option = \"SSE_KMS\" kms_key_arn =  aws_kms_key.example.arn }` within `result_configuration { }` in your resource block,  where `encryption_option` is your chosen encryption method and `kms_key_arn`  is your KMS key ARN."},"help":{"markdown":"The AWS Athena Workgroup is unencrypted. Encryption protects query results in your workgroup. To enable, add: `encryption_configuration { encryption_option = \"SSE_KMS\" kms_key_arn =  aws_kms_key.example.arn }` within `result_configuration { }` in your resource block,  where `encryption_option` is your chosen encryption method and `kms_key_arn`  is your KMS key ARN.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"The AWS Athena Workgroup is unencrypted. Encryption protects query results in your workgroup. To enable, add: `encryption_configuration { encryption_option = \"SSE_KMS\" kms_key_arn =  aws_kms_key.example.arn }` within `result_configuration { }` in your resource block,  where `encryption_option` is your chosen encryption method and `kms_key_arn`  is your KMS key ARN."},"id":"opengrep-rules.terraform.aws.security.missing-athena-workgroup-encryption","name":"opengrep-rules.terraform.aws.security.missing-athena-workgroup-encryption","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.missing-athena-workgroup-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this."},"help":{"markdown":"`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this.\n\n<b>References:</b>\n - [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#configuring-the-role-and-trust-policy](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#configuring-the-role-and-trust-policy)\n - [https://dagrz.com/writing/aws-security/hacking-github-aws-oidc/](https://dagrz.com/writing/aws-security/hacking-github-aws-oidc/)\n","text":"`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this."},"id":"opengrep-rules.terraform.aws.security.unrestricted-github-oidc-policy","name":"opengrep-rules.terraform.aws.security.unrestricted-github-oidc-policy","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.unrestricted-github-oidc-policy"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`."},"help":{"markdown":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.\n\n<b>References:</b>\n - [https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/](https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/)\n","text":"Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`."},"id":"opengrep-rules.terraform.aws.security.wildcard-assume-role","name":"opengrep-rules.terraform.aws.security.wildcard-assume-role","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.aws.security.wildcard-assume-role"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensures that Active Directory is used for authentication for Service Fabric\t"},"help":{"markdown":"Ensures that Active Directory is used for authentication for Service Fabric\t","text":"Ensures that Active Directory is used for authentication for Service Fabric\t"},"id":"opengrep-rules.terraform.azure.best-practice.azure-ad-used-auth-service-fabric","name":"opengrep-rules.terraform.azure.best-practice.azure-ad-used-auth-service-fabric","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-ad-used-auth-service-fabric"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that AKS uses Azure Policies Add-on"},"help":{"markdown":"Ensure that AKS uses Azure Policies Add-on","text":"Ensure that AKS uses Azure Policies Add-on"},"id":"opengrep-rules.terraform.azure.best-practice.azure-aks-uses-azure-policies-addon","name":"opengrep-rules.terraform.azure.best-practice.azure-aks-uses-azure-policies-addon","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-aks-uses-azure-policies-addon"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Application Gateway enables WAF"},"help":{"markdown":"Ensure that Application Gateway enables WAF","text":"Ensure that Application Gateway enables WAF"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appgateway-enables-waf","name":"opengrep-rules.terraform.azure.best-practice.azure-appgateway-enables-waf","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appgateway-enables-waf"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that Net Framework version is the latest, if used as a part of the web app"},"help":{"markdown":"Ensure that Net Framework version is the latest, if used as a part of the web app","text":"Ensure that Net Framework version is the latest, if used as a part of the web app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-dotnet-framework-version","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-dotnet-framework-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-dotnet-framework-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure FTP deployments are disabled"},"help":{"markdown":"Ensure FTP deployments are disabled","text":"Ensure FTP deployments are disabled"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-ftps-state","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-ftps-state","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-ftps-state"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that HTTP Version is the latest if used to run the web app"},"help":{"markdown":"Ensure that HTTP Version is the latest if used to run the web app","text":"Ensure that HTTP Version is the latest if used to run the web app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-https-20-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-https-20-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-https-20-enabled"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that Java version is the latest, if used to run the web app"},"help":{"markdown":"Ensure that Java version is the latest, if used to run the web app","text":"Ensure that Java version is the latest, if used to run the web app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-java-version","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-java-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-java-version"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that PHP version is the latest, if used to run the web app"},"help":{"markdown":"Ensure that PHP version is the latest, if used to run the web app","text":"Ensure that PHP version is the latest, if used to run the web app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-php-version","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-php-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-php-version"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that Python version is the latest, if used to run the web app"},"help":{"markdown":"Ensure that Python version is the latest, if used to run the web app","text":"Ensure that Python version is the latest, if used to run the web app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-python-version","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-python-version","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-python-version"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that app services use Azure Files"},"help":{"markdown":"Ensure that app services use Azure Files","text":"Ensure that app services use Azure Files"},"id":"opengrep-rules.terraform.azure.best-practice.azure-appservice-used-azure-files","name":"opengrep-rules.terraform.azure.best-practice.azure-appservice-used-azure-files","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-appservice-used-azure-files"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for App Service"},"help":{"markdown":"Ensure that Azure Defender is set to On for App Service","text":"Ensure that Azure Defender is set to On for App Service"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-appservices","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-appservices","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-appservices"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for Container"},"help":{"markdown":"Ensure that Azure Defender is set to On for Container","text":"Ensure that Azure Defender is set to On for Container"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-container-registry","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-container-registry","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-container-registry"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for Key Vault"},"help":{"markdown":"Ensure that Azure Defender is set to On for Key Vault","text":"Ensure that Azure Defender is set to On for Key Vault"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-keyvaults","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-keyvaults","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-keyvaults"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for Kubernetes"},"help":{"markdown":"Ensure that Azure Defender is set to On for Kubernetes","text":"Ensure that Azure Defender is set to On for Kubernetes"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-kubernetes","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-kubernetes","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-kubernetes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for Servers"},"help":{"markdown":"Ensure that Azure Defender is set to On for Servers","text":"Ensure that Azure Defender is set to On for Servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-servers","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-servers","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-servers"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for SQL servers"},"help":{"markdown":"Ensure that Azure Defender is set to On for SQL servers","text":"Ensure that Azure Defender is set to On for SQL servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for SQL servers on machines"},"help":{"markdown":"Ensure that Azure Defender is set to On for SQL servers on machines","text":"Ensure that Azure Defender is set to On for SQL servers on machines"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers-vms","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers-vms","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-sqlservers-vms"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Defender is set to On for Storage"},"help":{"markdown":"Ensure that Azure Defender is set to On for Storage","text":"Ensure that Azure Defender is set to On for Storage"},"id":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-storage","name":"opengrep-rules.terraform.azure.best-practice.azure-defenderon-storage","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-defenderon-storage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Front Door enables WAF"},"help":{"markdown":"Ensure that Azure Front Door enables WAF","text":"Ensure that Azure Front Door enables WAF"},"id":"opengrep-rules.terraform.azure.best-practice.azure-frontdoor-enables-waf","name":"opengrep-rules.terraform.azure.best-practice.azure-frontdoor-enables-waf","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-frontdoor-enables-waf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Front Door uses WAF and configured in “Detection” or “Prevention” modes"},"help":{"markdown":"Ensure that Azure Front Door uses WAF and configured in “Detection” or “Prevention” modes","text":"Ensure that Azure Front Door uses WAF and configured in “Detection” or “Prevention” modes"},"id":"opengrep-rules.terraform.azure.best-practice.azure-frontdoor-use-wafmode","name":"opengrep-rules.terraform.azure.best-practice.azure-frontdoor-use-wafmode","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-frontdoor-use-wafmode"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that HTTP Version is the latest if used to run the Function app"},"help":{"markdown":"Ensure that HTTP Version is the latest if used to run the Function app","text":"Ensure that HTTP Version is the latest if used to run the Function app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-functionapp-http-version-latest","name":"opengrep-rules.terraform.azure.best-practice.azure-functionapp-http-version-latest","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-functionapp-http-version-latest"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that HTTP Version is the latest if used to run the Function app"},"help":{"markdown":"Ensure that HTTP Version is the latest if used to run the Function app","text":"Ensure that HTTP Version is the latest if used to run the Function app"},"id":"opengrep-rules.terraform.azure.best-practice.azure-functionapps-accessible-over-https","name":"opengrep-rules.terraform.azure.best-practice.azure-functionapps-accessible-over-https","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-functionapps-accessible-over-https"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that key vault allows firewall rules settings"},"help":{"markdown":"Ensure that key vault allows firewall rules settings","text":"Ensure that key vault allows firewall rules settings"},"id":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-firewall-rules-settings","name":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-firewall-rules-settings","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-firewall-rules-settings"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that key vault enables purge protection"},"help":{"markdown":"Ensure that key vault enables purge protection","text":"Ensure that key vault enables purge protection"},"id":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-purge-protection","name":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-purge-protection","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-purge-protection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that key vault enables soft delete"},"help":{"markdown":"Ensure that key vault enables soft delete","text":"Ensure that key vault enables soft delete"},"id":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-soft-delete","name":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-soft-delete","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-keyvault-enables-soft-delete"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure the key vault is recoverable https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable"},"help":{"markdown":"Ensure the key vault is recoverable https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable](https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable)\n","text":"Ensure the key vault is recoverable https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable"},"id":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-recovery-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-keyvault-recovery-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-keyvault-recovery-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that MariaDB server enables geo-redundant backups"},"help":{"markdown":"Ensure that MariaDB server enables geo-redundant backups","text":"Ensure that MariaDB server enables geo-redundant backups"},"id":"opengrep-rules.terraform.azure.best-practice.azure-mariadb-geo-backup-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-mariadb-geo-backup-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-mariadb-geo-backup-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Enforce SSL connection is set to Enabled for MariaDB servers"},"help":{"markdown":"Ensure Enforce SSL connection is set to Enabled for MariaDB servers","text":"Ensure Enforce SSL connection is set to Enabled for MariaDB servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-mariadb-sslenforcement-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-mariadb-sslenforcement-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-mariadb-sslenforcement-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure audit profile captures all the activities"},"help":{"markdown":"Ensure audit profile captures all the activities","text":"Ensure audit profile captures all the activities"},"id":"opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-categories","name":"opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-categories","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-categories"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Activity Log Retention is set 365 days or greater"},"help":{"markdown":"Ensure that Activity Log Retention is set 365 days or greater","text":"Ensure that Activity Log Retention is set 365 days or greater"},"id":"opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-retention-days","name":"opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-retention-days","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-monitor-log-profile-retention-days"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that MySQL server enables geo-redundant backups"},"help":{"markdown":"Ensure that MySQL server enables geo-redundant backups","text":"Ensure that MySQL server enables geo-redundant backups"},"id":"opengrep-rules.terraform.azure.best-practice.azure-mysql-geo-backup-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-mysql-geo-backup-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-mysql-geo-backup-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Enforce SSL connection is set to Enabled for MySQL servers"},"help":{"markdown":"Ensure Enforce SSL connection is set to Enabled for MySQL servers","text":"Ensure Enforce SSL connection is set to Enabled for MySQL servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-mysql-server-tlsenforcement-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-mysql-server-tlsenforcement-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-mysql-server-tlsenforcement-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that MySQL server enables Threat detection policy"},"help":{"markdown":"Ensure that MySQL server enables Threat detection policy","text":"Ensure that MySQL server enables Threat detection policy"},"id":"opengrep-rules.terraform.azure.best-practice.azure-mysql-threat-detection-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-mysql-threat-detection-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-mysql-threat-detection-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Network Interfaces disable IP forwarding"},"help":{"markdown":"Ensure that Network Interfaces disable IP forwarding\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Network Interfaces disable IP forwarding"},"id":"opengrep-rules.terraform.azure.best-practice.azure-networkinterface-enable-ip-forwarding","name":"opengrep-rules.terraform.azure.best-practice.azure-networkinterface-enable-ip-forwarding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-networkinterface-enable-ip-forwarding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that PostgreSQL Flexible server enables geo-redundant backups"},"help":{"markdown":"Ensure that PostgreSQL Flexible server enables geo-redundant backups","text":"Ensure that PostgreSQL Flexible server enables geo-redundant backups"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-flexi-server-geo-backup-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-flexi-server-geo-backup-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-flexi-server-geo-backup-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that PostgreSQL server enables geo-redundant backups"},"help":{"markdown":"Ensure that PostgreSQL server enables geo-redundant backups","text":"Ensure that PostgreSQL server enables geo-redundant backups"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-geo-backup-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-geo-backup-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-geo-backup-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure server parameter connection_throttling is set to ON for PostgreSQL Database Server"},"help":{"markdown":"Ensure server parameter connection_throttling is set to ON for PostgreSQL Database Server","text":"Ensure server parameter connection_throttling is set to ON for PostgreSQL Database Server"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-connection-throttling-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-connection-throttling-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-connection-throttling-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure server parameter log_checkpoints is set to ON for PostgreSQL Database Server"},"help":{"markdown":"Ensure server parameter log_checkpoints is set to ON for PostgreSQL Database Server","text":"Ensure server parameter log_checkpoints is set to ON for PostgreSQL Database Server"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-checkpoint-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-checkpoint-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-checkpoint-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure server parameter log_connections is set to ON for PostgreSQL Database Server"},"help":{"markdown":"Ensure server parameter log_connections is set to ON for PostgreSQL Database Server","text":"Ensure server parameter log_connections is set to ON for PostgreSQL Database Server"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-connections-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-connections-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-server-log-connections-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Enforce SSL connection is set to Enabled for PostgreSQL servers"},"help":{"markdown":"Ensure Enforce SSL connection is set to Enabled for PostgreSQL servers","text":"Ensure Enforce SSL connection is set to Enabled for PostgreSQL servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-ssl-enforcement-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-ssl-enforcement-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-ssl-enforcement-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that PostgreSQL server enables Threat detection policy"},"help":{"markdown":"Ensure that PostgreSQL server enables Threat detection policy","text":"Ensure that PostgreSQL server enables Threat detection policy"},"id":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-threat-detection-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-postgresql-threat-detection-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-postgresql-threat-detection-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that key vault secrets have “content_type” set"},"help":{"markdown":"Ensure that key vault secrets have “content_type” set","text":"Ensure that key vault secrets have “content_type” set"},"id":"opengrep-rules.terraform.azure.best-practice.azure-secret-content-type","name":"opengrep-rules.terraform.azure.best-practice.azure-secret-content-type","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-secret-content-type"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that the expiration date is set on all secrets"},"help":{"markdown":"Ensure that the expiration date is set on all secrets","text":"Ensure that the expiration date is set on all secrets"},"id":"opengrep-rules.terraform.azure.best-practice.azure-secret-expiration-date","name":"opengrep-rules.terraform.azure.best-practice.azure-secret-expiration-date","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-secret-expiration-date"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Send email notification for high severity alerts is set to On"},"help":{"markdown":"Ensure that Send email notification for high severity alerts is set to On","text":"Ensure that Send email notification for high severity alerts is set to On"},"id":"opengrep-rules.terraform.azure.best-practice.azure-securitcenter-email-alert","name":"opengrep-rules.terraform.azure.best-practice.azure-securitcenter-email-alert","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-securitcenter-email-alert"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Security contact emails is set"},"help":{"markdown":"Ensure that Security contact emails is set","text":"Ensure that Security contact emails is set"},"id":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-emails","name":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-emails","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-emails"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Security contact Phone number is set"},"help":{"markdown":"Ensure that Security contact Phone number is set","text":"Ensure that Security contact Phone number is set"},"id":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-phone","name":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-phone","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-securitycenter-contact-phone"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Send email notification for high severity alerts is set to On"},"help":{"markdown":"Ensure that Send email notification for high severity alerts is set to On","text":"Ensure that Send email notification for high severity alerts is set to On"},"id":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-email-alert-admins","name":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-email-alert-admins","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-securitycenter-email-alert-admins"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that standard pricing tier is selected"},"help":{"markdown":"Ensure that standard pricing tier is selected","text":"Ensure that standard pricing tier is selected"},"id":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-standard-pricing","name":"opengrep-rules.terraform.azure.best-practice.azure-securitycenter-standard-pricing","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-securitycenter-standard-pricing"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Send Alerts To is enabled for MSSQL servers"},"help":{"markdown":"Ensure that Send Alerts To is enabled for MSSQL servers","text":"Ensure that Send Alerts To is enabled for MSSQL servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Email service and co-administrators is Enabled for MSSQL servers"},"help":{"markdown":"Ensure that Email service and co-administrators is Enabled for MSSQL servers","text":"Ensure that Email service and co-administrators is Enabled for MSSQL servers"},"id":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-toadmins-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-toadmins-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-sqlserver-email-alerts-toadmins-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Threat Detection types is set to All"},"help":{"markdown":"Ensure that Threat Detection types is set to All","text":"Ensure that Threat Detection types is set to All"},"id":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-threat-detection-types","name":"opengrep-rules.terraform.azure.best-practice.azure-sqlserver-threat-detection-types","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-sqlserver-threat-detection-types"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that storage account enables secure transfer"},"help":{"markdown":"Ensure that storage account enables secure transfer","text":"Ensure that storage account enables secure transfer"},"id":"opengrep-rules.terraform.azure.best-practice.azure-storage-account-enables-secure-transfer","name":"opengrep-rules.terraform.azure.best-practice.azure-storage-account-enables-secure-transfer","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-storage-account-enables-secure-transfer"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Synapse workspaces enables managed virtual networks"},"help":{"markdown":"Ensure that Azure Synapse workspaces enables managed virtual networks","text":"Ensure that Azure Synapse workspaces enables managed virtual networks"},"id":"opengrep-rules.terraform.azure.best-practice.azure-synapse-workscape-enables-managed-virtual-network","name":"opengrep-rules.terraform.azure.best-practice.azure-synapse-workscape-enables-managed-virtual-network","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-synapse-workscape-enables-managed-virtual-network"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that automatic OS image patching is enabled for Virtual Machine Scale Sets"},"help":{"markdown":"Ensure that automatic OS image patching is enabled for Virtual Machine Scale Sets","text":"Ensure that automatic OS image patching is enabled for Virtual Machine Scale Sets"},"id":"opengrep-rules.terraform.azure.best-practice.azure-vmscale-sets-auto-os-image-patching-enabled","name":"opengrep-rules.terraform.azure.best-practice.azure-vmscale-sets-auto-os-image-patching-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-vmscale-sets-auto-os-image-patching-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Application Gateway uses WAF in “Detection” or “Prevention” modes"},"help":{"markdown":"Ensure that Application Gateway uses WAF in “Detection” or “Prevention” modes","text":"Ensure that Application Gateway uses WAF in “Detection” or “Prevention” modes"},"id":"opengrep-rules.terraform.azure.best-practice.azure-waf-specificed-mode-app-gw","name":"opengrep-rules.terraform.azure.best-practice.azure-waf-specificed-mode-app-gw","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.best-practice.azure-waf-specificed-mode-app-gw"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure AKS has an API Server Authorized IP Ranges enabled\t"},"help":{"markdown":"Ensure AKS has an API Server Authorized IP Ranges enabled\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure AKS has an API Server Authorized IP Ranges enabled\t"},"id":"opengrep-rules.terraform.azure.security.aks.azure-aks-apiserver-auth-ip-ranges","name":"opengrep-rules.terraform.azure.security.aks.azure-aks-apiserver-auth-ip-ranges","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.aks.azure-aks-apiserver-auth-ip-ranges"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that AKS enables private clusters\t"},"help":{"markdown":"Ensure that AKS enables private clusters\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that AKS enables private clusters\t"},"id":"opengrep-rules.terraform.azure.security.aks.azure-aks-private-clusters-enabled","name":"opengrep-rules.terraform.azure.security.aks.azure-aks-private-clusters-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.aks.azure-aks-private-clusters-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that AKS uses disk encryption set"},"help":{"markdown":"Ensure that AKS uses disk encryption set\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that AKS uses disk encryption set"},"id":"opengrep-rules.terraform.azure.security.aks.azure-aks-uses-disk-encryptionset","name":"opengrep-rules.terraform.azure.security.aks.azure-aks-uses-disk-encryptionset","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.aks.azure-aks-uses-disk-encryptionset"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that API management services use virtual networks"},"help":{"markdown":"Ensure that API management services use virtual networks\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that API management services use virtual networks"},"id":"opengrep-rules.terraform.azure.security.apiservice.azure-apiservices-use-virtualnetwork","name":"opengrep-rules.terraform.azure.security.apiservice.azure-apiservices-use-virtualnetwork","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.apiservice.azure-apiservices-use-virtualnetwork"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Registering the identity used by an App with AD allows it to interact with other services without using username and password. Set the `identity` block in your appservice."},"help":{"markdown":"Registering the identity used by an App with AD allows it to interact with other services without using username and password. Set the `identity` block in your appservice.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#identity](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#identity)\n","text":"Registering the identity used by an App with AD allows it to interact with other services without using username and password. Set the `identity` block in your appservice."},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-account-identity-registered","name":"opengrep-rules.terraform.azure.security.appservice.appservice-account-identity-registered","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-account-identity-registered"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"},"help":{"markdown":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings)\n","text":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-authentication-enabled","name":"opengrep-rules.terraform.azure.security.appservice.appservice-authentication-enabled","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-authentication-enabled"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block"},"help":{"markdown":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled)\n","text":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block"},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-enable-http2","name":"opengrep-rules.terraform.azure.security.appservice.appservice-enable-http2","properties":{"precision":"very-high","tags":["CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-enable-http2"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting."},"help":{"markdown":"By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only)\n - [https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https](https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https)\n","text":"By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting."},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-enable-https-only","name":"opengrep-rules.terraform.azure.security.appservice.appservice-enable-https-only","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-enable-https-only"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block."},"help":{"markdown":"Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled)\n","text":"Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block."},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-require-client-cert","name":"opengrep-rules.terraform.azure.security.appservice.appservice-require-client-cert","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-require-client-cert"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block."},"help":{"markdown":"Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version)\n","text":"Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block."},"id":"opengrep-rules.terraform.azure.security.appservice.appservice-use-secure-tls-policy","name":"opengrep-rules.terraform.azure.security.appservice.appservice-use-secure-tls-policy","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.appservice-use-secure-tls-policy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure App Service Authentication is set on Azure App Service"},"help":{"markdown":"Ensure App Service Authentication is set on Azure App Service\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure App Service Authentication is set on Azure App Service"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-auth","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-auth","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-auth"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure the web app has Client Certificates"},"help":{"markdown":"Ensure the web app has Client Certificates\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure the web app has Client Certificates"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-client-certificate","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-client-certificate","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-client-certificate"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that App service enables detailed error messages"},"help":{"markdown":"Ensure that App service enables detailed error messages\n\n<b>References:</b>\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n","text":"Ensure that App service enables detailed error messages"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","MEDIUM CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that CORS disallows every resource to access app services"},"help":{"markdown":"Ensure that CORS disallows every resource to access app services\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"Ensure that CORS disallows every resource to access app services"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-disallowed-cors","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-disallowed-cors","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-disallowed-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that App service enables failed request tracing"},"help":{"markdown":"Ensure that App service enables failed request tracing\n\n<b>References:</b>\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n","text":"Ensure that App service enables failed request tracing"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-enabled-failed-request","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-enabled-failed-request","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-enabled-failed-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that App service enables HTTP logging"},"help":{"markdown":"Ensure that App service enables HTTP logging\n\n<b>References:</b>\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n","text":"Ensure that App service enables HTTP logging"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-http-logging-enabled","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-http-logging-enabled","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-http-logging-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot"},"help":{"markdown":"Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-https-only","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-https-only","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-https-only"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure App Service Authentication is set on Azure App Service"},"help":{"markdown":"Ensure App Service Authentication is set on Azure App Service\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure App Service Authentication is set on Azure App Service"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-identity","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-identity","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-identity"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Managed identity provider is enabled for app services"},"help":{"markdown":"Ensure that Managed identity provider is enabled for app services\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Managed identity provider is enabled for app services"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-identityprovider-enabled","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-identityprovider-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-identityprovider-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure web app is using the latest version of TLS encryption"},"help":{"markdown":"Ensure web app is using the latest version of TLS encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure web app is using the latest version of TLS encryption"},"id":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-min-tls-version","name":"opengrep-rules.terraform.azure.security.appservice.azure-appservice-min-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.appservice.azure-appservice-min-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Automation account variables are encrypted"},"help":{"markdown":"Ensure that Automation account variables are encrypted\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Automation account variables are encrypted"},"id":"opengrep-rules.terraform.azure.security.azure-automation-encrypted","name":"opengrep-rules.terraform.azure.security.azure-automation-encrypted","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-automation-encrypted"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Batch account uses key vault to encrypt data"},"help":{"markdown":"Ensure that Azure Batch account uses key vault to encrypt data\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Azure Batch account uses key vault to encrypt data"},"id":"opengrep-rules.terraform.azure.security.azure-batchaccount-uses-keyvault-encrpytion","name":"opengrep-rules.terraform.azure.security.azure-batchaccount-uses-keyvault-encrpytion","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-batchaccount-uses-keyvault-encrpytion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Cognitive Services accounts disable public network access"},"help":{"markdown":"Ensure that Cognitive Services accounts disable public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Cognitive Services accounts disable public network access"},"id":"opengrep-rules.terraform.azure.security.azure-cognitiveservices-disables-public-network","name":"opengrep-rules.terraform.azure.security.azure-cognitiveservices-disables-public-network","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-cognitiveservices-disables-public-network"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Container group is deployed into virtual network"},"help":{"markdown":"Ensure that Azure Container group is deployed into virtual network\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Container group is deployed into virtual network"},"id":"opengrep-rules.terraform.azure.security.azure-containergroup-deployed-into-virtualnetwork","name":"opengrep-rules.terraform.azure.security.azure-containergroup-deployed-into-virtualnetwork","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-containergroup-deployed-into-virtualnetwork"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Cosmos DB accounts have restricted access"},"help":{"markdown":"Ensure Cosmos DB accounts have restricted access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Cosmos DB accounts have restricted access"},"id":"opengrep-rules.terraform.azure.security.azure-cosmosdb-accounts-restricted-access","name":"opengrep-rules.terraform.azure.security.azure-cosmosdb-accounts-restricted-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-cosmosdb-accounts-restricted-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Cosmos DB accounts have access key write capability disabled"},"help":{"markdown":"Ensure that Cosmos DB accounts have access key write capability disabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Cosmos DB accounts have access key write capability disabled"},"id":"opengrep-rules.terraform.azure.security.azure-cosmosdb-disable-access-key-write","name":"opengrep-rules.terraform.azure.security.azure-cosmosdb-disable-access-key-write","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-cosmosdb-disable-access-key-write"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Cosmos DB disables public network access"},"help":{"markdown":"Ensure that Azure Cosmos DB disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Cosmos DB disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-cosmosdb-disables-public-network","name":"opengrep-rules.terraform.azure.security.azure-cosmosdb-disables-public-network","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-cosmosdb-disables-public-network"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"},"help":{"markdown":"Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"},"id":"opengrep-rules.terraform.azure.security.azure-cosmosdb-have-cmk","name":"opengrep-rules.terraform.azure.security.azure-cosmosdb-have-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-cosmosdb-have-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that no custom subscription owner roles are created"},"help":{"markdown":"Ensure that no custom subscription owner roles are created\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that no custom subscription owner roles are created"},"id":"opengrep-rules.terraform.azure.security.azure-customrole-definition-subscription-owner","name":"opengrep-rules.terraform.azure.security.azure-customrole-definition-subscription-owner","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-customrole-definition-subscription-owner"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Data Explorer uses double encryption"},"help":{"markdown":"Ensure that Azure Data Explorer uses double encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Azure Data Explorer uses double encryption"},"id":"opengrep-rules.terraform.azure.security.azure-dataexplorer-double-encryption-enabled","name":"opengrep-rules.terraform.azure.security.azure-dataexplorer-double-encryption-enabled","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-dataexplorer-double-encryption-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Data Explorer uses disk encryption"},"help":{"markdown":"Ensure that Azure Data Explorer uses disk encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Azure Data Explorer uses disk encryption"},"id":"opengrep-rules.terraform.azure.security.azure-dataexplorer-uses-disk-encryption","name":"opengrep-rules.terraform.azure.security.azure-dataexplorer-uses-disk-encryption","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-dataexplorer-uses-disk-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Data factory public network access is disabled"},"help":{"markdown":"Ensure that Azure Data factory public network access is disabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Data factory public network access is disabled"},"id":"opengrep-rules.terraform.azure.security.azure-datafactory-no-public-network-access","name":"opengrep-rules.terraform.azure.security.azure-datafactory-no-public-network-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-datafactory-no-public-network-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Data Factory uses Git repository for source control"},"help":{"markdown":"Ensure that Azure Data Factory uses Git repository for source control\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Data Factory uses Git repository for source control"},"id":"opengrep-rules.terraform.azure.security.azure-datafactory-uses-git-repository","name":"opengrep-rules.terraform.azure.security.azure-datafactory-uses-git-repository","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-datafactory-uses-git-repository"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Data Lake Store accounts enables encryption"},"help":{"markdown":"Ensure that Data Lake Store accounts enables encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Data Lake Store accounts enables encryption"},"id":"opengrep-rules.terraform.azure.security.azure-datalake-store-encryption","name":"opengrep-rules.terraform.azure.security.azure-datalake-store-encryption","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-datalake-store-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Event Grid Domain public network access is disabled"},"help":{"markdown":"Ensure that Azure Event Grid Domain public network access is disabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Event Grid Domain public network access is disabled"},"id":"opengrep-rules.terraform.azure.security.azure-eventgrid-domain-network-access","name":"opengrep-rules.terraform.azure.security.azure-eventgrid-domain-network-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-eventgrid-domain-network-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ensure that CORS disallows all resources to access Function app"},"help":{"markdown":"ensure that CORS disallows all resources to access Function app\n\n<b>References:</b>\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"ensure that CORS disallows all resources to access Function app"},"id":"opengrep-rules.terraform.azure.security.azure-functionapp-disallow-cors","name":"opengrep-rules.terraform.azure.security.azure-functionapp-disallow-cors","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-functionapp-disallow-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that function apps enables Authentication"},"help":{"markdown":"Ensure that function apps enables Authentication\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that function apps enables Authentication"},"id":"opengrep-rules.terraform.azure.security.azure-functionapps-enable-auth","name":"opengrep-rules.terraform.azure.security.azure-functionapps-enable-auth","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-functionapps-enable-auth"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Virtual Machine Extensions are not Installed"},"help":{"markdown":"Ensure Virtual Machine Extensions are not Installed\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Virtual Machine Extensions are not Installed"},"id":"opengrep-rules.terraform.azure.security.azure-instance-extensions","name":"opengrep-rules.terraform.azure.security.azure-instance-extensions","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-instance-extensions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure IoT Hub disables public network access"},"help":{"markdown":"Ensure that Azure IoT Hub disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure IoT Hub disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-iot-no-public-network-access","name":"opengrep-rules.terraform.azure.security.azure-iot-no-public-network-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-iot-no-public-network-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that key vault key is backed by HSM"},"help":{"markdown":"Ensure that key vault key is backed by HSM\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that key vault key is backed by HSM"},"id":"opengrep-rules.terraform.azure.security.azure-key-backedby-hsm","name":"opengrep-rules.terraform.azure.security.azure-key-backedby-hsm","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-key-backedby-hsm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that the expiration date is set on all keys"},"help":{"markdown":"Ensure that the expiration date is set on all keys\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that the expiration date is set on all keys"},"id":"opengrep-rules.terraform.azure.security.azure-key-no-expiration-date","name":"opengrep-rules.terraform.azure.security.azure-key-no-expiration-date","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-key-no-expiration-date"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Azure managed disk has encryption enabled"},"help":{"markdown":"Ensure Azure managed disk has encryption enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Azure managed disk has encryption enabled"},"id":"opengrep-rules.terraform.azure.security.azure-managed-disk-encryption","name":"opengrep-rules.terraform.azure.security.azure-managed-disk-encryption","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-managed-disk-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"},"help":{"markdown":"Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"},"id":"opengrep-rules.terraform.azure.security.azure-managed-disk-encryption-set","name":"opengrep-rules.terraform.azure.security.azure-managed-disk-encryption-set","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-managed-disk-encryption-set"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure public network access enabled is set to False for MariaDB servers"},"help":{"markdown":"Ensure public network access enabled is set to False for MariaDB servers\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure public network access enabled is set to False for MariaDB servers"},"id":"opengrep-rules.terraform.azure.security.azure-mariadb-public-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-mariadb-public-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-mariadb-public-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Activity Log Retention is set 365 days or greater"},"help":{"markdown":"Ensure that Activity Log Retention is set 365 days or greater","text":"Ensure that Activity Log Retention is set 365 days or greater"},"id":"opengrep-rules.terraform.azure.security.azure-monitor-log-profile-retention-days","name":"opengrep-rules.terraform.azure.security.azure-monitor-log-profile-retention-days","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-monitor-log-profile-retention-days"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure MSSQL is using the latest version of TLS encryption"},"help":{"markdown":"Ensure MSSQL is using the latest version of TLS encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure MSSQL is using the latest version of TLS encryption"},"id":"opengrep-rules.terraform.azure.security.azure-mssql-service-mintls-version","name":"opengrep-rules.terraform.azure.security.azure-mssql-service-mintls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-mssql-service-mintls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that MySQL server enables infrastructure encryption"},"help":{"markdown":"Ensure that MySQL server enables infrastructure encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that MySQL server enables infrastructure encryption"},"id":"opengrep-rules.terraform.azure.security.azure-mysql-encryption-enabled","name":"opengrep-rules.terraform.azure.security.azure-mysql-encryption-enabled","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-mysql-encryption-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure MySQL is using the latest version of TLS encryption"},"help":{"markdown":"Ensure MySQL is using the latest version of TLS encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure MySQL is using the latest version of TLS encryption"},"id":"opengrep-rules.terraform.azure.security.azure-mysql-mintls-version","name":"opengrep-rules.terraform.azure.security.azure-mysql-mintls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-mysql-mintls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure public network access enabled is set to False for MySQL servers"},"help":{"markdown":"Ensure public network access enabled is set to False for MySQL servers\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure public network access enabled is set to False for MySQL servers"},"id":"opengrep-rules.terraform.azure.security.azure-mysql-public-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-mysql-public-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-mysql-public-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Network Security Group Flow Log retention period is 90 days or greater"},"help":{"markdown":"Ensure that Network Security Group Flow Log retention period is 90 days or greater","text":"Ensure that Network Security Group Flow Log retention period is 90 days or greater"},"id":"opengrep-rules.terraform.azure.security.azure-network-watcher-flowlog-period","name":"opengrep-rules.terraform.azure.security.azure-network-watcher-flowlog-period","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-network-watcher-flowlog-period"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that PostgreSQL server enables infrastructure encryption"},"help":{"markdown":"Ensure that PostgreSQL server enables infrastructure encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that PostgreSQL server enables infrastructure encryption"},"id":"opengrep-rules.terraform.azure.security.azure-postgresql-encryption-enabled","name":"opengrep-rules.terraform.azure.security.azure-postgresql-encryption-enabled","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-postgresql-encryption-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL is using the latest version of TLS encryption"},"help":{"markdown":"Ensure PostgreSQL is using the latest version of TLS encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure PostgreSQL is using the latest version of TLS encryption"},"id":"opengrep-rules.terraform.azure.security.azure-postgresql-min-tls-version","name":"opengrep-rules.terraform.azure.security.azure-postgresql-min-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-postgresql-min-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure public network access enabled is set to False for PostgreSQL servers"},"help":{"markdown":"Ensure public network access enabled is set to False for PostgreSQL servers\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure public network access enabled is set to False for PostgreSQL servers"},"id":"opengrep-rules.terraform.azure.security.azure-postgresql-server-public-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-postgresql-server-public-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-postgresql-server-public-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that only SSL are enabled for Cache for Redis"},"help":{"markdown":"Ensure that only SSL are enabled for Cache for Redis\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that only SSL are enabled for Cache for Redis"},"id":"opengrep-rules.terraform.azure.security.azure-redis-cache-enable-non-ssl-port","name":"opengrep-rules.terraform.azure.security.azure-redis-cache-enable-non-ssl-port","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-redis-cache-enable-non-ssl-port"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Cache for Redis disables public network access"},"help":{"markdown":"Ensure that Azure Cache for Redis disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Cache for Redis disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-redis-cache-public-network-access-enabled","name":"opengrep-rules.terraform.azure.security.azure-redis-cache-public-network-access-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-redis-cache-public-network-access-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that remote debugging is not enabled for app services"},"help":{"markdown":"Ensure that remote debugging is not enabled for app services\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that remote debugging is not enabled for app services"},"id":"opengrep-rules.terraform.azure.security.azure-remote-debugging-not-enabled","name":"opengrep-rules.terraform.azure.security.azure-remote-debugging-not-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-remote-debugging-not-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Virtual machine does not enable password authentication"},"help":{"markdown":"Ensure that Virtual machine does not enable password authentication\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Virtual machine does not enable password authentication"},"id":"opengrep-rules.terraform.azure.security.azure-scale-set-password","name":"opengrep-rules.terraform.azure.security.azure-scale-set-password","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-scale-set-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure Cognitive Search disables public network access"},"help":{"markdown":"Ensure that Azure Cognitive Search disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure Cognitive Search disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-search-publicnetwork-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-search-publicnetwork-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-search-publicnetwork-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Service Fabric use three levels of protection available"},"help":{"markdown":"Ensure that Service Fabric use three levels of protection available\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Service Fabric use three levels of protection available"},"id":"opengrep-rules.terraform.azure.security.azure-service-fabric-cluster-protection-level","name":"opengrep-rules.terraform.azure.security.azure-service-fabric-cluster-protection-level","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-service-fabric-cluster-protection-level"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"},"help":{"markdown":"Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"},"id":"opengrep-rules.terraform.azure.security.azure-sqlserver-no-public-access","name":"opengrep-rules.terraform.azure.security.azure-sqlserver-no-public-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-sqlserver-no-public-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that SQL server disables public network access"},"help":{"markdown":"Ensure that SQL server disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that SQL server disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-sqlserver-public-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-sqlserver-public-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-sqlserver-public-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure default network access rule for Storage Accounts is set to deny"},"help":{"markdown":"Ensure default network access rule for Storage Accounts is set to deny\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure default network access rule for Storage Accounts is set to deny"},"id":"opengrep-rules.terraform.azure.security.azure-storage-account-disable-public-access","name":"opengrep-rules.terraform.azure.security.azure-storage-account-disable-public-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-storage-account-disable-public-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Storage Account is using the latest version of TLS encryption"},"help":{"markdown":"Ensure Storage Account is using the latest version of TLS encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Storage Account is using the latest version of TLS encryption"},"id":"opengrep-rules.terraform.azure.security.azure-storage-account-minimum-tlsversion","name":"opengrep-rules.terraform.azure.security.azure-storage-account-minimum-tlsversion","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-storage-account-minimum-tlsversion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Public access level is set to Private for blob containers"},"help":{"markdown":"Ensure that Public access level is set to Private for blob containers\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Public access level is set to Private for blob containers"},"id":"opengrep-rules.terraform.azure.security.azure-storage-blob-service-container-private-access","name":"opengrep-rules.terraform.azure.security.azure-storage-blob-service-container-private-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-storage-blob-service-container-private-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Azure File Sync disables public network access"},"help":{"markdown":"Ensure that Azure File Sync disables public network access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Azure File Sync disables public network access"},"id":"opengrep-rules.terraform.azure.security.azure-storage-sync-public-access-disabled","name":"opengrep-rules.terraform.azure.security.azure-storage-sync-public-access-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-storage-sync-public-access-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Virtual machine scale sets have encryption at host enabled"},"help":{"markdown":"Ensure that Virtual machine scale sets have encryption at host enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that Virtual machine scale sets have encryption at host enabled"},"id":"opengrep-rules.terraform.azure.security.azure-vmencryption-at-host-enabled","name":"opengrep-rules.terraform.azure.security.azure-vmencryption-at-host-enabled","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.azure-vmencryption-at-host-enabled"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"},"help":{"markdown":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#enabled)\n","text":"Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"},"id":"opengrep-rules.terraform.azure.security.functionapp.functionapp-authentication-enabled","name":"opengrep-rules.terraform.azure.security.functionapp.functionapp-authentication-enabled","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.functionapp.functionapp-authentication-enabled"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your function app resource block"},"help":{"markdown":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your function app resource block\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#http2_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#http2_enabled)\n","text":"Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your function app resource block"},"id":"opengrep-rules.terraform.azure.security.functionapp.functionapp-enable-http2","name":"opengrep-rules.terraform.azure.security.functionapp.functionapp-enable-http2","properties":{"precision":"very-high","tags":["CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.functionapp.functionapp-enable-http2"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Key vault Secret should have a content type set"},"help":{"markdown":"Key vault Secret should have a content type set\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#content_type](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#content_type)\n - [https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets](https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets)\n","text":"Key vault Secret should have a content type set"},"id":"opengrep-rules.terraform.azure.security.keyvault.keyvault-content-type-for-secret","name":"opengrep-rules.terraform.azure.security.keyvault.keyvault-content-type-for-secret","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.keyvault.keyvault-content-type-for-secret"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that the expiration date is set on all keys"},"help":{"markdown":"Ensure that the expiration date is set on all keys\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date)\n - [https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags](https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags)\n","text":"Ensure that the expiration date is set on all keys"},"id":"opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-key-expires","name":"opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-key-expires","properties":{"precision":"very-high","tags":["CWE-262: Not Using Password Aging","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-key-expires"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that the expiration date is set on all secrets"},"help":{"markdown":"Ensure that the expiration date is set on all secrets\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date)\n - [https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets](https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets)\n","text":"Ensure that the expiration date is set on all secrets"},"id":"opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-secret-expires","name":"opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-secret-expires","properties":{"precision":"very-high","tags":["CWE-262: Not Using Password Aging","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.keyvault.keyvault-ensure-secret-expires"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Key vault should have purge protection enabled"},"help":{"markdown":"Key vault should have purge protection enabled\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled)\n - [https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection](https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection)\n","text":"Key vault should have purge protection enabled"},"id":"opengrep-rules.terraform.azure.security.keyvault.keyvault-purge-enabled","name":"opengrep-rules.terraform.azure.security.keyvault.keyvault-purge-enabled","properties":{"precision":"very-high","tags":["CWE-693: Protection Mechanism Failure","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.keyvault.keyvault-purge-enabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Network ACLs allow you to reduce your exposure to risk by limiting what can access your key vault. The default action of the Network ACL should be set to deny for when IPs are not matched. Azure services can be allowed to bypass."},"help":{"markdown":"Network ACLs allow you to reduce your exposure to risk by limiting what can access your key vault. The default action of the Network ACL should be set to deny for when IPs are not matched. Azure services can be allowed to bypass.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#network_acls](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#network_acls)\n - [https://docs.microsoft.com/en-us/azure/key-vault/general/network-security](https://docs.microsoft.com/en-us/azure/key-vault/general/network-security)\n","text":"Network ACLs allow you to reduce your exposure to risk by limiting what can access your key vault. The default action of the Network ACL should be set to deny for when IPs are not matched. Azure services can be allowed to bypass."},"id":"opengrep-rules.terraform.azure.security.keyvault.keyvault-specify-network-acl","name":"opengrep-rules.terraform.azure.security.keyvault.keyvault-specify-network-acl","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.keyvault.keyvault-specify-network-acl"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules"},"help":{"markdown":"Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass)\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass)\n - [https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security#trusted-microsoft-services](https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security#trusted-microsoft-services)\n","text":"Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules"},"id":"opengrep-rules.terraform.azure.security.storage.storage-allow-microsoft-service-bypass","name":"opengrep-rules.terraform.azure.security.storage.storage-allow-microsoft-service-bypass","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.storage.storage-allow-microsoft-service-bypass"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a Storage that was not configured to deny action by default. Add `default_action = \"Deny\"` in your resource block."},"help":{"markdown":"Detected a Storage that was not configured to deny action by default. Add `default_action = \"Deny\"` in your resource block.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#default_action](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#default_action)\n - [https://docs.microsoft.com/en-us/azure/firewall/rule-processing](https://docs.microsoft.com/en-us/azure/firewall/rule-processing)\n","text":"Detected a Storage that was not configured to deny action by default. Add `default_action = \"Deny\"` in your resource block."},"id":"opengrep-rules.terraform.azure.security.storage.storage-default-action-deny","name":"opengrep-rules.terraform.azure.security.storage.storage-default-action-deny","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.storage.storage-default-action-deny"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block."},"help":{"markdown":"Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only)\n - [https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer](https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer)\n","text":"Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block."},"id":"opengrep-rules.terraform.azure.security.storage.storage-enforce-https","name":"opengrep-rules.terraform.azure.security.storage.storage-enforce-https","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.storage.storage-enforce-https"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis."},"help":{"markdown":"Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging)\n - [https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics-logging?tabs=dotnet](https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics-logging?tabs=dotnet)\n","text":"Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis."},"id":"opengrep-rules.terraform.azure.security.storage.storage-queue-services-logging","name":"opengrep-rules.terraform.azure.security.storage.storage-queue-services-logging","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.storage.storage-queue-services-logging"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2."},"help":{"markdown":"Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version)\n - [https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version](https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version)\n","text":"Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2."},"id":"opengrep-rules.terraform.azure.security.storage.storage-use-secure-tls-policy","name":"opengrep-rules.terraform.azure.security.storage.storage-use-secure-tls-policy","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.azure.security.storage.storage-use-secure-tls-policy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Compute instances are launched with Shielded VM enabled"},"help":{"markdown":"Ensure Compute instances are launched with Shielded VM enabled\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Compute instances are launched with Shielded VM enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-compute-shielded-vm","name":"opengrep-rules.terraform.gcp.best-practice.gcp-compute-shielded-vm","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-compute-shielded-vm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Compute instances are launched with Shielded VM enabled"},"help":{"markdown":"Ensure Compute instances are launched with Shielded VM enabled\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Compute instances are launched with Shielded VM enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-compute-template-shielded-vm","name":"opengrep-rules.terraform.gcp.best-practice.gcp-compute-template-shielded-vm","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-compute-template-shielded-vm"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"},"help":{"markdown":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t","text":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-dnssec-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-dnssec-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-dnssec-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Kubernetes Cluster is created with Alias IP ranges enabled"},"help":{"markdown":"Ensure Kubernetes Cluster is created with Alias IP ranges enabled","text":"Ensure Kubernetes Cluster is created with Alias IP ranges enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-alias-ip-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-alias-ip-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-alias-ip-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure use of Binary Authorization\t"},"help":{"markdown":"Ensure use of Binary Authorization\t","text":"Ensure use of Binary Authorization\t"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-binary-authorization","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-binary-authorization","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-binary-authorization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Shielded GKE Nodes are Enabled"},"help":{"markdown":"Ensure Shielded GKE Nodes are Enabled","text":"Ensure Shielded GKE Nodes are Enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-enable-shielded-nodes","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-enable-shielded-nodes","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-enable-shielded-nodes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Kubernetes Clusters are configured with Labels"},"help":{"markdown":"Ensure Kubernetes Clusters are configured with Labels","text":"Ensure Kubernetes Clusters are configured with Labels"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-has-labels","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-has-labels","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-has-labels"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure the GKE Metadata Server is Enabled\t"},"help":{"markdown":"Ensure the GKE Metadata Server is Enabled\t","text":"Ensure the GKE Metadata Server is Enabled\t"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-metadata-server-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-metadata-server-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-metadata-server-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"},"help":{"markdown":"Ensure 'Automatic node repair' is enabled for Kubernetes Clusters","text":"Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-repair-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-repair-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-repair-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"},"help":{"markdown":"Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters","text":"Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-upgrade-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-upgrade-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-auto-upgrade-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure the GKE Metadata Server is Enabled\t"},"help":{"markdown":"Ensure the GKE Metadata Server is Enabled\t","text":"Ensure the GKE Metadata Server is Enabled\t"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-metadata-server-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-metadata-server-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-metadata-server-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t"},"help":{"markdown":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t","text":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-secure-boot-for-shielded-nodes","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-secure-boot-for-shielded-nodes","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-nodepool-secure-boot-for-shielded-nodes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure all Cloud SQL database instance have backup configuration enabled"},"help":{"markdown":"Ensure all Cloud SQL database instance have backup configuration enabled","text":"Ensure all Cloud SQL database instance have backup configuration enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-sql-backup-configuration-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-sql-backup-configuration-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-sql-backup-configuration-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"},"help":{"markdown":"Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image","text":"Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-use-cos-image","name":"opengrep-rules.terraform.gcp.best-practice.gcp-gke-use-cos-image","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-gke-use-cos-image"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Private google access is enabled for IPV6"},"help":{"markdown":"Ensure that Private google access is enabled for IPV6","text":"Ensure that Private google access is enabled for IPV6"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-ipv6-private-google-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-ipv6-private-google-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-ipv6-private-google-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure MySQL database 'local_infile' flag is set to 'off'"},"help":{"markdown":"Ensure MySQL database 'local_infile' flag is set to 'off'","text":"Ensure MySQL database 'local_infile' flag is set to 'off'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-mysql-local-in-file-off","name":"opengrep-rules.terraform.gcp.best-practice.gcp-mysql-local-in-file-off","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-mysql-local-in-file-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"},"help":{"markdown":"Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'","text":"Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-checkpoints","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-checkpoints","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-checkpoints"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_connections' flag is set to 'on'"},"help":{"markdown":"Ensure PostgreSQL database 'log_connections' flag is set to 'on'","text":"Ensure PostgreSQL database 'log_connections' flag is set to 'on'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-connection","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-connection","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"},"help":{"markdown":"Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'","text":"Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-disconnection","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-disconnection","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-disconnection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"},"help":{"markdown":"Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'","text":"Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-lock-waits","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-lock-waits","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-lock-waits"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"},"help":{"markdown":"Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'","text":"Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-duration","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-duration","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-duration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"},"help":{"markdown":"Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value","text":"Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-message","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-message","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-min-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PostgreSQL database 'log_temp_files' flag is set to '0'"},"help":{"markdown":"Ensure PostgreSQL database 'log_temp_files' flag is set to '0'","text":"Ensure PostgreSQL database 'log_temp_files' flag is set to '0'"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-temp","name":"opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-temp","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-postgresql-log-temp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Cloud storage has versioning enabled"},"help":{"markdown":"Ensure Cloud storage has versioning enabled","text":"Ensure Cloud storage has versioning enabled"},"id":"opengrep-rules.terraform.gcp.best-practice.gcp-storage-versioning-enabled","name":"opengrep-rules.terraform.gcp.best-practice.gcp-storage-versioning-enabled","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.best-practice.gcp-storage-versioning-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Artifact Registry Repositories are encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure Artifact Registry Repositories are encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Artifact Registry Repositories are encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-artifact-registry-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t"},"help":{"markdown":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t"},"help":{"markdown":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-artifact-registry-private-repo-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that BigQuery datasets are not anonymously or publicly accessible\t"},"help":{"markdown":"Ensure that BigQuery datasets are not anonymously or publicly accessible\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that BigQuery datasets are not anonymously or publicly accessible\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-bigquery-dataset-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-bigquery-dataset-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-bigquery-dataset-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t"},"help":{"markdown":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t"},"help":{"markdown":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-bigquery-private-table-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Big Query Tables are encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"help":{"markdown":"Ensure Big Query Tables are encrypted with Customer Supplied Encryption Keys (CSEK)\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Big Query Tables are encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-bigquery-table-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-bigquery-table-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-bigquery-table-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Big Table Instances are encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"help":{"markdown":"Ensure Big Table Instances are encrypted with Customer Supplied Encryption Keys (CSEK)\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Big Table Instances are encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-bigtable-instance-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-bigtable-instance-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-bigtable-instance-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Cloud build workers are private\t"},"help":{"markdown":"Ensure Cloud build workers are private\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Cloud build workers are private\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-build-workers-private","name":"opengrep-rules.terraform.gcp.security.gcp-build-workers-private","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-build-workers-private"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure bucket logs access."},"help":{"markdown":"Ensure bucket logs access.\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure bucket logs access."},"id":"opengrep-rules.terraform.gcp.security.gcp-cloud-storage-logging","name":"opengrep-rules.terraform.gcp.security.gcp-cloud-storage-logging","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","MEDIUM CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-cloud-storage-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-boot-disk-encryption","name":"opengrep-rules.terraform.gcp.security.gcp-compute-boot-disk-encryption","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-boot-disk-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-disk-encryption","name":"opengrep-rules.terraform.gcp.security.gcp-compute-disk-encryption","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-disk-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted FTP access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted FTP access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted FTP access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-20","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-20","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-20"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted FTP access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted FTP access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted FTP access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-21","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-21","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-21"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted SSH access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted SSH access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted SSH access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-22","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-22","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-22"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted MySQL access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted MySQL access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted MySQL access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3306","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3306","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3306"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted RDP access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted RDP access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted RDP access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3389","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3389","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-3389"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Google compute firewall ingress does not allow unrestricted HTTP access"},"help":{"markdown":"Ensure Google compute firewall ingress does not allow unrestricted HTTP access\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Google compute firewall ingress does not allow unrestricted HTTP access"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-80","name":"opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-80","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-firewall-unrestricted-ingress-80"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.\t"},"help":{"markdown":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-ip-forward","name":"opengrep-rules.terraform.gcp.security.gcp-compute-ip-forward","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-ip-forward"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that no instance in the project overrides the project setting for enabling OSLogin (OSLogin needs to be enabled in project metadata for all instances)\t"},"help":{"markdown":"Ensure that no instance in the project overrides the project setting for enabling OSLogin (OSLogin needs to be enabled in project metadata for all instances)\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that no instance in the project overrides the project setting for enabling OSLogin (OSLogin needs to be enabled in project metadata for all instances)\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-os-login","name":"opengrep-rules.terraform.gcp.security.gcp-compute-os-login","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-os-login"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure oslogin is enabled for a Project\t"},"help":{"markdown":"Ensure oslogin is enabled for a Project\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure oslogin is enabled for a Project\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-project-os-login","name":"opengrep-rules.terraform.gcp.security.gcp-compute-project-os-login","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-project-os-login"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Compute instances do not have public IP addresses\t"},"help":{"markdown":"Ensure that Compute instances do not have public IP addresses\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that Compute instances do not have public IP addresses\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-public-ip","name":"opengrep-rules.terraform.gcp.security.gcp-compute-public-ip","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-public-ip"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure 'Enable connecting to serial ports' is not enabled for VM Instance\t"},"help":{"markdown":"Ensure 'Enable connecting to serial ports' is not enabled for VM Instance\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure 'Enable connecting to serial ports' is not enabled for VM Instance\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-serial-ports","name":"opengrep-rules.terraform.gcp.security.gcp-compute-serial-ports","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-serial-ports"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no HTTPS or SSL proxy load balancers permit SSL policies with weak cipher suites"},"help":{"markdown":"Ensure no HTTPS or SSL proxy load balancers permit SSL policies with weak cipher suites\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure no HTTPS or SSL proxy load balancers permit SSL policies with weak cipher suites"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-ssl-policy","name":"opengrep-rules.terraform.gcp.security.gcp-compute-ssl-policy","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-ssl-policy"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages."},"help":{"markdown":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.\n\n<b>References:</b>\n - [https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/ComputeEngine/disable-ip-forwarding.html](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/ComputeEngine/disable-ip-forwarding.html)\n","text":"Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages."},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-template-ip-forward","name":"opengrep-rules.terraform.gcp.security.gcp-compute-template-ip-forward","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-template-ip-forward"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Compute instances do not have public IP addresses\t"},"help":{"markdown":"Ensure that Compute instances do not have public IP addresses\t\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure that Compute instances do not have public IP addresses\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-compute-template-public-ip","name":"opengrep-rules.terraform.gcp.security.gcp-compute-template-public-ip","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-compute-template-public-ip"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure data flow jobs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure data flow jobs are encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure data flow jobs are encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataflow-job-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-dataflow-job-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataflow-job-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Dataflow jobs are private"},"help":{"markdown":"Ensure Dataflow jobs are private\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Ensure Dataflow jobs are private"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataflow-private-job","name":"opengrep-rules.terraform.gcp.security.gcp-dataflow-private-job","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataflow-private-job"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Data fusion instances are private"},"help":{"markdown":"Ensure Data fusion instances are private\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Data fusion instances are private"},"id":"opengrep-rules.terraform.gcp.security.gcp-datafusion-private-instance","name":"opengrep-rules.terraform.gcp.security.gcp-datafusion-private-instance","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-datafusion-private-instance"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Datafusion has stack driver logging enabled."},"help":{"markdown":"Ensure Datafusion has stack driver logging enabled.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Datafusion has stack driver logging enabled."},"id":"opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-logging","name":"opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-logging","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Datafusion has stack driver monitoring enabled."},"help":{"markdown":"Ensure Datafusion has stack driver monitoring enabled.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Datafusion has stack driver monitoring enabled."},"id":"opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-monitoring","name":"opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-monitoring","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-datafusion-stack-driver-monitoring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Dataproc cluster is encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"help":{"markdown":"Ensure Dataproc cluster is encrypted with Customer Supplied Encryption Keys (CSEK)\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Dataproc cluster is encrypted with Customer Supplied Encryption Keys (CSEK)\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Dataproc Clusters do not have public IPs"},"help":{"markdown":"Ensure Dataproc Clusters do not have public IPs\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Dataproc Clusters do not have public IPs"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-public-ip","name":"opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-public-ip","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataproc-cluster-public-ip"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Dataproc clusters are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Dataproc clusters are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Dataproc clusters are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Dataproc clusters are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Dataproc clusters are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Dataproc clusters are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dataproc-private-cluster-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"},"help":{"markdown":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-dns-key-specs-rsasha1","name":"opengrep-rules.terraform.gcp.security.gcp-dns-key-specs-rsasha1","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-dns-key-specs-rsasha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t"},"help":{"markdown":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t"},"help":{"markdown":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-folder-impersonation-roles-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Default Service account is not used at a folder level"},"help":{"markdown":"Ensure Default Service account is not used at a folder level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Default Service account is not used at a folder level"},"id":"opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Default Service account is not used at a folder level"},"help":{"markdown":"Ensure Default Service account is not used at a folder level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Default Service account is not used at a folder level"},"id":"opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-folder-member-default-service-account-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure GKE basic auth is disabled\t"},"help":{"markdown":"Ensure GKE basic auth is disabled\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure GKE basic auth is disabled\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-basic-auth","name":"opengrep-rules.terraform.gcp.security.gcp-gke-basic-auth","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-basic-auth"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure client certificate authentication to Kubernetes Engine Clusters is disabled"},"help":{"markdown":"Ensure client certificate authentication to Kubernetes Engine Clusters is disabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure client certificate authentication to Kubernetes Engine Clusters is disabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-client-certificate-disabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-client-certificate-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-client-certificate-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure logging is set to Enabled on Kubernetes Engine Clusters"},"help":{"markdown":"Ensure logging is set to Enabled on Kubernetes Engine Clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure logging is set to Enabled on Kubernetes Engine Clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-cluster-logging","name":"opengrep-rules.terraform.gcp.security.gcp-gke-cluster-logging","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-cluster-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Enable VPC Flow Logs and Intranode Visibility"},"help":{"markdown":"Enable VPC Flow Logs and Intranode Visibility\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Enable VPC Flow Logs and Intranode Visibility"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-enabled-vpc-flow-logs","name":"opengrep-rules.terraform.gcp.security.gcp-gke-enabled-vpc-flow-logs","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-enabled-vpc-flow-logs"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"},"help":{"markdown":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-ensure-integrity-monitoring","name":"opengrep-rules.terraform.gcp.security.gcp-gke-ensure-integrity-monitoring","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-ensure-integrity-monitoring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Manage Kubernetes RBAC users with Google Groups for GKE"},"help":{"markdown":"Manage Kubernetes RBAC users with Google Groups for GKE\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Manage Kubernetes RBAC users with Google Groups for GKE"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-kubernetes-rbac-google-groups","name":"opengrep-rules.terraform.gcp.security.gcp-gke-kubernetes-rbac-google-groups","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-kubernetes-rbac-google-groups"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"},"help":{"markdown":"Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-legacy-auth-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-legacy-auth-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-legacy-auth-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure legacy Compute Engine instance metadata APIs are Disabled"},"help":{"markdown":"Ensure legacy Compute Engine instance metadata APIs are Disabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure legacy Compute Engine instance metadata APIs are Disabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-legacy-instance-metadata-disabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-legacy-instance-metadata-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-legacy-instance-metadata-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure master authorized networks is set to enabled in GKE clusters"},"help":{"markdown":"Ensure master authorized networks is set to enabled in GKE clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure master authorized networks is set to enabled in GKE clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-master-authz-networks-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-master-authz-networks-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-master-authz-networks-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure monitoring is set to Enabled on Kubernetes Engine Clusters"},"help":{"markdown":"Ensure monitoring is set to Enabled on Kubernetes Engine Clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure monitoring is set to Enabled on Kubernetes Engine Clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-monitoring-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-monitoring-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-monitoring-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Network Policy is enabled on Kubernetes Engine Clusters"},"help":{"markdown":"Ensure Network Policy is enabled on Kubernetes Engine Clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Network Policy is enabled on Kubernetes Engine Clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-network-policy-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-network-policy-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-network-policy-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"},"help":{"markdown":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-nodepool-integrity-monitoring","name":"opengrep-rules.terraform.gcp.security.gcp-gke-nodepool-integrity-monitoring","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-nodepool-integrity-monitoring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"},"help":{"markdown":"Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-pod-security-policy-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-gke-pod-security-policy-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-pod-security-policy-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Kubernetes Cluster is created with Private cluster enabled"},"help":{"markdown":"Ensure Kubernetes Cluster is created with Private cluster enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Kubernetes Cluster is created with Private cluster enabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-private-cluster-config","name":"opengrep-rules.terraform.gcp.security.gcp-gke-private-cluster-config","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-private-cluster-config"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure GKE Control Plane is not public"},"help":{"markdown":"Ensure GKE Control Plane is not public\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure GKE Control Plane is not public"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-public-control-plane","name":"opengrep-rules.terraform.gcp.security.gcp-gke-public-control-plane","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-public-control-plane"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t"},"help":{"markdown":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t","text":"Ensure Secure Boot for Shielded GKE Nodes is Enabled\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-gke-secure-boot-for-shielded-nodes","name":"opengrep-rules.terraform.gcp.security.gcp-gke-secure-boot-for-shielded-nodes","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-gke-secure-boot-for-shielded-nodes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected GCP Load Balancer to be using an insecure version of TLS. To fix this set your \"min_tls_version\" to \"TLS_1_2\""},"help":{"markdown":"Detected GCP Load Balancer to be using an insecure version of TLS. To fix this set your \"min_tls_version\" to \"TLS_1_2\"\n\n<b>References:</b>\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n","text":"Detected GCP Load Balancer to be using an insecure version of TLS. To fix this set your \"min_tls_version\" to \"TLS_1_2\""},"id":"opengrep-rules.terraform.gcp.security.gcp-insecure-load-balancer-tls-version","name":"opengrep-rules.terraform.gcp.security.gcp-insecure-load-balancer-tls-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-insecure-load-balancer-tls-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure KMS keys are protected from deletion"},"help":{"markdown":"Ensure KMS keys are protected from deletion\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure KMS keys are protected from deletion"},"id":"opengrep-rules.terraform.gcp.security.gcp-kms-prevent-destroy","name":"opengrep-rules.terraform.gcp.security.gcp-kms-prevent-destroy","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-kms-prevent-destroy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Memorystore for Redis has AUTH enabled"},"help":{"markdown":"Ensure Memorystore for Redis has AUTH enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Memorystore for Redis has AUTH enabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-auth-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-auth-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-auth-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Memorystore for Redis uses intransit encryption"},"help":{"markdown":"Ensure Memorystore for Redis uses intransit encryption\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Memorystore for Redis uses intransit encryption"},"id":"opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-intransit-encryption","name":"opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-intransit-encryption","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-memory-store-for-redis-intransit-encryption"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t"},"help":{"markdown":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t"},"help":{"markdown":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t"},"id":"opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-org-impersonation-roles-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure default service account is not used at an organization level"},"help":{"markdown":"Ensure default service account is not used at an organization level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure default service account is not used at an organization level"},"id":"opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure default service account is not used at an organization level"},"help":{"markdown":"Ensure default service account is not used at an organization level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure default service account is not used at an organization level"},"id":"opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-org-member-default-service-account-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that the default network does not exist in a project. Set auto_create_network to `false`."},"help":{"markdown":"Ensure that the default network does not exist in a project. Set auto_create_network to `false`.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that the default network does not exist in a project. Set auto_create_network to `false`."},"id":"opengrep-rules.terraform.gcp.security.gcp-project-default-network","name":"opengrep-rules.terraform.gcp.security.gcp-project-default-network","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-project-default-network"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Default Service account is not used at a project level"},"help":{"markdown":"Ensure Default Service account is not used at a project level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Default Service account is not used at a project level"},"id":"opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Default Service account is not used at a project level"},"help":{"markdown":"Ensure Default Service account is not used at a project level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Default Service account is not used at a project level"},"id":"opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-project-member-default-service-account-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"},"help":{"markdown":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"},"id":"opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"},"help":{"markdown":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"},"id":"opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-project-service-account-user-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure PubSub Topics are encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure PubSub Topics are encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure PubSub Topics are encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-pubsub-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-pubsub-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-pubsub-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Pub/Sub Topics are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-pubsub-private-topic-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that GCP Cloud Run services are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-run-private-service-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Spanner Database is encrypted with Customer Supplied Encryption Keys (CSEK)"},"help":{"markdown":"Ensure Spanner Database is encrypted with Customer Supplied Encryption Keys (CSEK)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Spanner Database is encrypted with Customer Supplied Encryption Keys (CSEK)"},"id":"opengrep-rules.terraform.gcp.security.gcp-spanner-database-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-spanner-database-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-spanner-database-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure all Cloud SQL database instance requires all incoming connections to use SSL"},"help":{"markdown":"Ensure all Cloud SQL database instance requires all incoming connections to use SSL\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure all Cloud SQL database instance requires all incoming connections to use SSL"},"id":"opengrep-rules.terraform.gcp.security.gcp-sql-database-require-ssl","name":"opengrep-rules.terraform.gcp.security.gcp-sql-database-require-ssl","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-sql-database-require-ssl"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Cloud SQL database Instances are not open to the world"},"help":{"markdown":"Ensure that Cloud SQL database Instances are not open to the world\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Cloud SQL database Instances are not open to the world"},"id":"opengrep-rules.terraform.gcp.security.gcp-sql-public-database","name":"opengrep-rules.terraform.gcp.security.gcp-sql-public-database","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-sql-public-database"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Cloud SQL database does not have public IP"},"help":{"markdown":"Ensure Cloud SQL database does not have public IP\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Cloud SQL database does not have public IP"},"id":"opengrep-rules.terraform.gcp.security.gcp-sqlserver-no-public-ip","name":"opengrep-rules.terraform.gcp.security.gcp-sqlserver-no-public-ip","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-sqlserver-no-public-ip"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Container Registry repositories are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Container Registry repositories are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Container Registry repositories are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-binding","name":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-binding","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-binding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Container Registry repositories are not anonymously or publicly accessible"},"help":{"markdown":"Ensure that Container Registry repositories are not anonymously or publicly accessible\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Container Registry repositories are not anonymously or publicly accessible"},"id":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-member","name":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-member","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-storage-bucket-not-public-iam-member"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that Cloud Storage buckets have uniform bucket-level access enabled"},"help":{"markdown":"Ensure that Cloud Storage buckets have uniform bucket-level access enabled\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that Cloud Storage buckets have uniform bucket-level access enabled"},"id":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-uniform-access","name":"opengrep-rules.terraform.gcp.security.gcp-storage-bucket-uniform-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-storage-bucket-uniform-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"},"help":{"markdown":"Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"},"id":"opengrep-rules.terraform.gcp.security.gcp-sub-network-logging-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-sub-network-logging-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-sub-network-logging-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that private_ip_google_access is enabled for Subnet"},"help":{"markdown":"Ensure that private_ip_google_access is enabled for Subnet\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure that private_ip_google_access is enabled for Subnet"},"id":"opengrep-rules.terraform.gcp.security.gcp-sub-network-private-google-enabled","name":"opengrep-rules.terraform.gcp.security.gcp-sub-network-private-google-enabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-sub-network-private-google-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Vertex AI datasets uses a CMK (Customer Manager Key)"},"help":{"markdown":"Ensure Vertex AI datasets uses a CMK (Customer Manager Key)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Vertex AI datasets uses a CMK (Customer Manager Key)"},"id":"opengrep-rules.terraform.gcp.security.gcp-vertexai-dataset-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-vertexai-dataset-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-vertexai-dataset-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Vertex AI Metadata Store uses a CMK (Customer Manager Key)"},"help":{"markdown":"Ensure Vertex AI Metadata Store uses a CMK (Customer Manager Key)\n\n<b>References:</b>\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Ensure Vertex AI Metadata Store uses a CMK (Customer Manager Key)"},"id":"opengrep-rules.terraform.gcp.security.gcp-vertexai-metadata-store-encrypted-with-cmk","name":"opengrep-rules.terraform.gcp.security.gcp-vertexai-metadata-store-encrypted-with-cmk","properties":{"precision":"very-high","tags":["CWE-320: CWE CATEGORY: Key Management Errors","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-vertexai-metadata-store-encrypted-with-cmk"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure Vertex AI instances are private"},"help":{"markdown":"Ensure Vertex AI instances are private\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Ensure Vertex AI instances are private"},"id":"opengrep-rules.terraform.gcp.security.gcp-vertexai-private-instance","name":"opengrep-rules.terraform.gcp.security.gcp-vertexai-private-instance","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.gcp.security.gcp-vertexai-private-instance"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CORS rule on bucket permits any origin"},"help":{"markdown":"CORS rule on bucket permits any origin\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors)\n","text":"CORS rule on bucket permits any origin"},"id":"opengrep-rules.terraform.lang.security.all-origins-allowed","name":"opengrep-rules.terraform.lang.security.all-origins-allowed","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.all-origins-allowed"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS EC2 Instance allowing use of the IMDSv1"},"help":{"markdown":"AWS EC2 Instance allowing use of the IMDSv1\n\n<b>References:</b>\n - [https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service](https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options)\n","text":"AWS EC2 Instance allowing use of the IMDSv1"},"id":"opengrep-rules.terraform.lang.security.ec2-imdsv1-optional","name":"opengrep-rules.terraform.lang.security.ec2-imdsv1-optional","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.ec2-imdsv1-optional"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The ECR Repository isn't configured to scan images on push"},"help":{"markdown":"The ECR Repository isn't configured to scan images on push\n\n<b>References:</b>\n - [https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components](https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components)\n","text":"The ECR Repository isn't configured to scan images on push"},"id":"opengrep-rules.terraform.lang.security.ecr-image-scan-on-push","name":"opengrep-rules.terraform.lang.security.ecr-image-scan-on-push","properties":{"precision":"very-high","tags":["CWE-1104: Use of Unmaintained Third Party Components","LOW CONFIDENCE","OWASP-A06:2021 - Vulnerable and Outdated Components","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.ecr-image-scan-on-push"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Missing EKS control plane logging. It is recommended to enable at least Kubernetes API server component logs (\"api\") and audit logs (\"audit\") of the EKS control plane through the enabled_cluster_log_types attribute."},"help":{"markdown":"Missing EKS control plane logging. It is recommended to enable at least Kubernetes API server component logs (\"api\") and audit logs (\"audit\") of the EKS control plane through the enabled_cluster_log_types attribute.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster#enabling-control-plane-logging](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster#enabling-control-plane-logging)\n - [https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)\n","text":"Missing EKS control plane logging. It is recommended to enable at least Kubernetes API server component logs (\"api\") and audit logs (\"audit\") of the EKS control plane through the enabled_cluster_log_types attribute."},"id":"opengrep-rules.terraform.lang.security.eks-insufficient-control-plane-logging","name":"opengrep-rules.terraform.lang.security.eks-insufficient-control-plane-logging","properties":{"precision":"very-high","tags":["CWE-778: Insufficient Logging","LOW CONFIDENCE","OWASP-A09:2021 - Security Logging and Monitoring Failures","OWASP-A10:2017 - Insufficient Logging & Monitoring","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.eks-insufficient-control-plane-logging"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access"},"help":{"markdown":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access"},"id":"opengrep-rules.terraform.lang.security.eks-public-endpoint-enabled","name":"opengrep-rules.terraform.lang.security.eks-public-endpoint-enabled","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.eks-public-endpoint-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Encryption at rest is not enabled for the elastic search domain resource"},"help":{"markdown":"Encryption at rest is not enabled for the elastic search domain resource\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Encryption at rest is not enabled for the elastic search domain resource"},"id":"opengrep-rules.terraform.lang.security.elastic-search-encryption-at-rest","name":"opengrep-rules.terraform.lang.security.elastic-search-encryption-at-rest","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.elastic-search-encryption-at-rest"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE"},"help":{"markdown":"IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE\n\n<b>References:</b>\n - [https://github.com/bridgecrewio/checkov/blob/master/checkov/terraform/checks/data/aws/AdminPolicyDocument.py](https://github.com/bridgecrewio/checkov/blob/master/checkov/terraform/checks/data/aws/AdminPolicyDocument.py)\n","text":"IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE"},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-admin-privileges","name":"opengrep-rules.terraform.lang.security.iam.no-iam-admin-privileges","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-admin-privileges"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response."},"help":{"markdown":"Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response.\n\n<b>References:</b>\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/credentials-exposure/](https://cloudsplaining.readthedocs.io/en/latest/glossary/credentials-exposure/)\n - [https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMCredentialsExposure.py](https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMCredentialsExposure.py)\n","text":"Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-creds-exposure","name":"opengrep-rules.terraform.lang.security.iam.no-iam-creds-exposure","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-creds-exposure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources."},"help":{"markdown":"Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources.\n\n<b>References:</b>\n - [https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMDataExfiltration.py](https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMDataExfiltration.py)\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/data-exfiltration/](https://cloudsplaining.readthedocs.io/en/latest/glossary/data-exfiltration/)\n","text":"Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-data-exfiltration","name":"opengrep-rules.terraform.lang.security.iam.no-iam-data-exfiltration","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-data-exfiltration"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions."},"help":{"markdown":"Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions.\n\n<b>References:</b>\n - [https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/](https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/)\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/](https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/)\n","text":"Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-funcs","name":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-funcs","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-funcs"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE"},"help":{"markdown":"Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE\n\n<b>References:</b>\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/](https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/)\n - [https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPrivilegeEscalation.py](https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPrivilegeEscalation.py)\n","text":"Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE"},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-other-users","name":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-other-users","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-other-users"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction."},"help":{"markdown":"Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction.\n\n<b>References:</b>\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/](https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/)\n - [https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/](https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/)\n","text":"Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-roles","name":"opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-roles","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-priv-esc-roles"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources."},"help":{"markdown":"Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources.\n\n<b>References:</b>\n - [https://cloudsplaining.readthedocs.io/en/latest/glossary/resource-exposure/](https://cloudsplaining.readthedocs.io/en/latest/glossary/resource-exposure/)\n - [https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPermissionsManagement.py](https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPermissionsManagement.py)\n","text":"Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-resource-exposure","name":"opengrep-rules.terraform.lang.security.iam.no-iam-resource-exposure","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-resource-exposure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take."},"help":{"markdown":"Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy)\n - [https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/StarActionPolicyDocument.py](https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/StarActionPolicyDocument.py)\n","text":"Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take."},"id":"opengrep-rules.terraform.lang.security.iam.no-iam-star-actions","name":"opengrep-rules.terraform.lang.security.iam.no-iam-star-actions","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.iam.no-iam-star-actions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource."},"help":{"markdown":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password)\n - [https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password)\n","text":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource."},"id":"opengrep-rules.terraform.lang.security.rds-insecure-password-storage-in-source-code","name":"opengrep-rules.terraform.lang.security.rds-insecure-password-storage-in-source-code","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.rds-insecure-password-storage-in-source-code"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RDS instance accessible from the Internet detected."},"help":{"markdown":"RDS instance accessible from the Internet detected.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#publicly_accessible](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#publicly_accessible)\n - [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding)\n","text":"RDS instance accessible from the Internet detected."},"id":"opengrep-rules.terraform.lang.security.rds-public-access","name":"opengrep-rules.terraform.lang.security.rds-public-access","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.rds-public-access"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"S3 bucket with public read access detected."},"help":{"markdown":"S3 bucket with public read access detected.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl)\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)\n","text":"S3 bucket with public read access detected."},"id":"opengrep-rules.terraform.lang.security.s3-public-read-bucket","name":"opengrep-rules.terraform.lang.security.s3-public-read-bucket","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.s3-public-read-bucket"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"S3 bucket with public read-write access detected."},"help":{"markdown":"S3 bucket with public read-write access detected.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl)\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)\n","text":"S3 bucket with public read-write access detected."},"id":"opengrep-rules.terraform.lang.security.s3-public-rw-bucket","name":"opengrep-rules.terraform.lang.security.s3-public-rw-bucket","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.s3-public-rw-bucket"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info."},"help":{"markdown":"This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info.\n\n<b>References:</b>\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration)\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html)\n","text":"This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info."},"id":"opengrep-rules.terraform.lang.security.s3-unencrypted-bucket","name":"opengrep-rules.terraform.lang.security.s3-unencrypted-bucket","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.terraform.lang.security.s3-unencrypted-bucket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context."},"help":{"markdown":"Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.\n\n<b>References:</b>\n - [https://angular.io/api/platform-browser/DomSanitizer](https://angular.io/api/platform-browser/DomSanitizer)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context."},"id":"opengrep-rules.typescript.angular.security.audit.angular-bypasssecuritytrust","name":"opengrep-rules.typescript.angular.security.audit.angular-bypasssecuritytrust","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.angular.security.audit.angular-bypasssecuritytrust"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Moment is a legacy project in maintenance mode. Consider using libraries that are actively supported, e.g. `dayjs`."},"help":{"markdown":"Moment is a legacy project in maintenance mode. Consider using libraries that are actively supported, e.g. `dayjs`.\n\n<b>References:</b>\n - [https://momentjs.com/docs/#/-project-status/](https://momentjs.com/docs/#/-project-status/)\n - [https://day.js.org/](https://day.js.org/)\n","text":"Moment is a legacy project in maintenance mode. Consider using libraries that are actively supported, e.g. `dayjs`."},"id":"opengrep-rules.typescript.lang.best-practice.moment-deprecated","name":"opengrep-rules.typescript.lang.best-practice.moment-deprecated","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.lang.best-practice.moment-deprecated"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"It looks like no matter how $CONDITION is evaluated, this expression returns $ANS. This is probably a copy-paste error."},"help":{"markdown":"It looks like no matter how $CONDITION is evaluated, this expression returns $ANS. This is probably a copy-paste error.","text":"It looks like no matter how $CONDITION is evaluated, this expression returns $ANS. This is probably a copy-paste error."},"id":"opengrep-rules.typescript.lang.correctness.useless-ternary","name":"opengrep-rules.typescript.lang.correctness.useless-ternary","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.lang.correctness.useless-ternary"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Unescaped '.' character in CORS domain regex $CORS: $PATTERN"},"help":{"markdown":"Unescaped '.' character in CORS domain regex $CORS: $PATTERN\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Unescaped '.' character in CORS domain regex $CORS: $PATTERN"},"id":"opengrep-rules.typescript.lang.security.audit.cors-regex-wildcard","name":"opengrep-rules.typescript.lang.security.audit.cors-regex-wildcard","properties":{"precision":"very-high","tags":["CWE-183: Permissive List of Allowed Inputs","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.lang.security.audit.cors-regex-wildcard"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"help":{"markdown":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."},"id":"opengrep-rules.typescript.nestjs.security.audit.nestjs-header-cors-any","name":"opengrep-rules.typescript.nestjs.security.audit.nestjs-header-cors-any","properties":{"precision":"very-high","tags":["CWE-183: Permissive List of Allowed Inputs","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.nestjs.security.audit.nestjs-header-cors-any"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter."},"help":{"markdown":"X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter."},"id":"opengrep-rules.typescript.nestjs.security.audit.nestjs-header-xss-disabled","name":"opengrep-rules.typescript.nestjs.security.audit.nestjs-header-xss-disabled","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.nestjs.security.audit.nestjs-header-xss-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Untrusted user input in {url: ...} can result in Open Redirect vulnerability."},"help":{"markdown":"Untrusted user input in {url: ...} can result in Open Redirect vulnerability.\n\n<b>References:</b>\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Untrusted user input in {url: ...} can result in Open Redirect vulnerability."},"id":"opengrep-rules.typescript.nestjs.security.audit.nestjs-open-redirect","name":"opengrep-rules.typescript.nestjs.security.audit.nestjs-open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.nestjs.security.audit.nestjs-open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"By declaring a styled component inside the render method of a react component, you are dynamically creating a new component on every render. This means that React will have to discard and re-calculate that part of the DOM subtree on each subsequent render, instead of just calculating the difference of what changed between them. This leads to performance bottlenecks and unpredictable behavior."},"help":{"markdown":"By declaring a styled component inside the render method of a react component, you are dynamically creating a new component on every render. This means that React will have to discard and re-calculate that part of the DOM subtree on each subsequent render, instead of just calculating the difference of what changed between them. This leads to performance bottlenecks and unpredictable behavior.\n\n<b>References:</b>\n - [https://styled-components.com/docs/faqs#why-should-i-avoid-declaring-styled-components-in-the-render-method](https://styled-components.com/docs/faqs#why-should-i-avoid-declaring-styled-components-in-the-render-method)\n","text":"By declaring a styled component inside the render method of a react component, you are dynamically creating a new component on every render. This means that React will have to discard and re-calculate that part of the DOM subtree on each subsequent render, instead of just calculating the difference of what changed between them. This leads to performance bottlenecks and unpredictable behavior."},"id":"opengrep-rules.typescript.react.best-practice.define-styled-components-on-module-level","name":"opengrep-rules.typescript.react.best-practice.define-styled-components-on-module-level","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.best-practice.define-styled-components-on-module-level"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction."},"help":{"markdown":"findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction.\n\n<b>References:</b>\n - [https://react.dev/reference/react-dom/findDOMNode](https://react.dev/reference/react-dom/findDOMNode)\n - [https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220](https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220)\n","text":"findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction."},"id":"opengrep-rules.typescript.react.best-practice.react-find-dom","name":"opengrep-rules.typescript.react.best-practice.react-find-dom","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.best-practice.react-find-dom"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Legacy component lifecycle was detected - $METHOD."},"help":{"markdown":"Legacy component lifecycle was detected - $METHOD.","text":"Legacy component lifecycle was detected - $METHOD."},"id":"opengrep-rules.typescript.react.best-practice.react-legacy-component","name":"opengrep-rules.typescript.react.best-practice.react-legacy-component","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.best-practice.react-legacy-component"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Copying a prop into state in React -- this is bad practice as all updates to it are ignored. Instead, read props directly in your component and avoid copying props into state."},"help":{"markdown":"Copying a prop into state in React -- this is bad practice as all updates to it are ignored. Instead, read props directly in your component and avoid copying props into state.\n\n<b>References:</b>\n - [https://overreacted.io/writing-resilient-components/#principle-1-dont-stop-the-data-flow](https://overreacted.io/writing-resilient-components/#principle-1-dont-stop-the-data-flow)\n","text":"Copying a prop into state in React -- this is bad practice as all updates to it are ignored. Instead, read props directly in your component and avoid copying props into state."},"id":"opengrep-rules.typescript.react.best-practice.react-props-in-state","name":"opengrep-rules.typescript.react.best-practice.react-props-in-state","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.best-practice.react-props-in-state"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It's best practice to explicitly pass props to an HTML component rather than use the spread operator. The spread operator risks passing invalid HTML props to an HTML element, which can cause console warnings or worse, give malicious actors a way to inject unexpected attributes."},"help":{"markdown":"It's best practice to explicitly pass props to an HTML component rather than use the spread operator. The spread operator risks passing invalid HTML props to an HTML element, which can cause console warnings or worse, give malicious actors a way to inject unexpected attributes.\n\n<b>References:</b>\n - [https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md)\n","text":"It's best practice to explicitly pass props to an HTML component rather than use the spread operator. The spread operator risks passing invalid HTML props to an HTML element, which can cause console warnings or worse, give malicious actors a way to inject unexpected attributes."},"id":"opengrep-rules.typescript.react.best-practice.react-props-spreading","name":"opengrep-rules.typescript.react.best-practice.react-props-spreading","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.best-practice.react-props-spreading"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Translation key '$KEY' should match format 'MODULE.FEATURE.*'"},"help":{"markdown":"Translation key '$KEY' should match format 'MODULE.FEATURE.*'\n\n<b>References:</b>\n - [https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024](https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024)\n - [https://mui.com/](https://mui.com/)\n - [https://react.i18next.com/](https://react.i18next.com/)\n","text":"Translation key '$KEY' should match format 'MODULE.FEATURE.*'"},"id":"opengrep-rules.typescript.react.portability.i18next.i18next-key-format","name":"opengrep-rules.typescript.react.portability.i18next.i18next-key-format","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.portability.i18next.i18next-key-format"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JSX Component label not internationalized: '$MESSAGE'"},"help":{"markdown":"JSX Component label not internationalized: '$MESSAGE'\n\n<b>References:</b>\n - [https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024](https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024)\n - [https://mui.com/](https://mui.com/)\n - [https://react.i18next.com/](https://react.i18next.com/)\n","text":"JSX Component label not internationalized: '$MESSAGE'"},"id":"opengrep-rules.typescript.react.portability.i18next.jsx-label-not-i18n","name":"opengrep-rules.typescript.react.portability.i18next.jsx-label-not-i18n","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.portability.i18next.jsx-label-not-i18n"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JSX element not internationalized: '$MESSAGE'.  You should support different languages in your website or app with internationalization. Instead, use packages such as `i18next` in order to internationalize your elements."},"help":{"markdown":"JSX element not internationalized: '$MESSAGE'.  You should support different languages in your website or app with internationalization. Instead, use packages such as `i18next` in order to internationalize your elements.\n\n<b>References:</b>\n - [https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024](https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024)\n - [https://mui.com/](https://mui.com/)\n - [https://react.i18next.com/](https://react.i18next.com/)\n","text":"JSX element not internationalized: '$MESSAGE'.  You should support different languages in your website or app with internationalization. Instead, use packages such as `i18next` in order to internationalize your elements."},"id":"opengrep-rules.typescript.react.portability.i18next.jsx-not-internationalized","name":"opengrep-rules.typescript.react.portability.i18next.jsx-not-internationalized","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.portability.i18next.jsx-not-internationalized"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"React MUI enqueueSnackbar() title is not internationalized: '$MESSAGE'"},"help":{"markdown":"React MUI enqueueSnackbar() title is not internationalized: '$MESSAGE'\n\n<b>References:</b>\n - [https://hendyirawan.notion.site/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024](https://hendyirawan.notion.site/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024)\n - [https://mui.com/](https://mui.com/)\n - [https://react.i18next.com/](https://react.i18next.com/)\n","text":"React MUI enqueueSnackbar() title is not internationalized: '$MESSAGE'"},"id":"opengrep-rules.typescript.react.portability.i18next.mui-snackbar-message","name":"opengrep-rules.typescript.react.portability.i18next.mui-snackbar-message","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.portability.i18next.mui-snackbar-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"React useSelect() label is not internationalized - '$LABEL'. You should support different langauges in your website or app with internationalization. Instead, use packages such as `i18next` to internationalize your elements."},"help":{"markdown":"React useSelect() label is not internationalized - '$LABEL'. You should support different langauges in your website or app with internationalization. Instead, use packages such as `i18next` to internationalize your elements.\n\n<b>References:</b>\n - [https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024](https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024)\n - [https://react.i18next.com/](https://react.i18next.com/)\n","text":"React useSelect() label is not internationalized - '$LABEL'. You should support different langauges in your website or app with internationalization. Instead, use packages such as `i18next` to internationalize your elements."},"id":"opengrep-rules.typescript.react.portability.i18next.useselect-label-not-i18n","name":"opengrep-rules.typescript.react.portability.i18next.useselect-label-not-i18n","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.portability.i18next.useselect-label-not-i18n"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"help":{"markdown":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n<b>References:</b>\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\n","text":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"id":"opengrep-rules.typescript.react.security.audit.react-dangerouslysetinnerhtml","name":"opengrep-rules.typescript.react.security.audit.react-dangerouslysetinnerhtml","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-dangerouslysetinnerhtml"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a variable used in an anchor tag with the 'href' attribute. A malicious actor may be able to input the 'javascript:' URI, which could cause cross-site scripting (XSS). It is recommended to disallow 'javascript:' URIs within your application."},"help":{"markdown":"Detected a variable used in an anchor tag with the 'href' attribute. A malicious actor may be able to input the 'javascript:' URI, which could cause cross-site scripting (XSS). It is recommended to disallow 'javascript:' URIs within your application.\n\n<b>References:</b>\n - [https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls](https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls)\n - [https://pragmaticwebsecurity.com/articles/spasecurity/react-xss-part1.html](https://pragmaticwebsecurity.com/articles/spasecurity/react-xss-part1.html)\n","text":"Detected a variable used in an anchor tag with the 'href' attribute. A malicious actor may be able to input the 'javascript:' URI, which could cause cross-site scripting (XSS). It is recommended to disallow 'javascript:' URIs within your application."},"id":"opengrep-rules.typescript.react.security.audit.react-href-var","name":"opengrep-rules.typescript.react.security.audit.react-href-var","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-href-var"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Property decoded from JWT token without verifying and cannot be trustworthy."},"help":{"markdown":"Property decoded from JWT token without verifying and cannot be trustworthy.\n\n<b>References:</b>\n - [https://pragmaticwebsecurity.com/articles/oauthoidc/localstorage-xss.html](https://pragmaticwebsecurity.com/articles/oauthoidc/localstorage-xss.html)\n","text":"Property decoded from JWT token without verifying and cannot be trustworthy."},"id":"opengrep-rules.typescript.react.security.audit.react-jwt-decoded-property","name":"opengrep-rules.typescript.react.security.audit.react-jwt-decoded-property","properties":{"precision":"very-high","tags":["CWE-922: Insecure Storage of Sensitive Information","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-jwt-decoded-property"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie."},"help":{"markdown":"Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n","text":"Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie."},"id":"opengrep-rules.typescript.react.security.audit.react-jwt-in-localstorage","name":"opengrep-rules.typescript.react.security.audit.react-jwt-in-localstorage","properties":{"precision":"very-high","tags":["CWE-922: Insecure Storage of Sensitive Information","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-jwt-in-localstorage"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"help":{"markdown":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n<b>References:</b>\n - [https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln](https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln)\n - [https://developer.mozilla.org/en-US/docs/Web/API/Document/write](https://developer.mozilla.org/en-US/docs/Web/API/Document/write)\n - [https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n","text":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"id":"opengrep-rules.typescript.react.security.audit.react-unsanitized-method","name":"opengrep-rules.typescript.react.security.audit.react-unsanitized-method","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-unsanitized-method"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"help":{"markdown":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n<b>References:</b>\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\n","text":"Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"id":"opengrep-rules.typescript.react.security.audit.react-unsanitized-property","name":"opengrep-rules.typescript.react.security.audit.react-unsanitized-property","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.audit.react-unsanitized-property"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unencrypted request over HTTP detected."},"help":{"markdown":"Unencrypted request over HTTP detected.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\n","text":"Unencrypted request over HTTP detected."},"id":"opengrep-rules.typescript.react.security.react-insecure-request","name":"opengrep-rules.typescript.react.security.react-insecure-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.react-insecure-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors."},"help":{"markdown":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\n\n<b>References:</b>\n - [https://www.npmjs.com/package/react-markdown#security](https://www.npmjs.com/package/react-markdown#security)\n","text":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors."},"id":"opengrep-rules.typescript.react.security.react-markdown-insecure-html","name":"opengrep-rules.typescript.react.security.react-markdown-insecure-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.typescript.react.security.react-markdown-insecure-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The parameter `$VALUE` to this WorkflowEventBinding includes hyphens, which will, very confusingly, throw an error when Argo Workflows tries to invoke the workflow. Set the payload value to use underscores instead."},"help":{"markdown":"The parameter `$VALUE` to this WorkflowEventBinding includes hyphens, which will, very confusingly, throw an error when Argo Workflows tries to invoke the workflow. Set the payload value to use underscores instead.\n\n<b>References:</b>\n - [https://argoproj.github.io/argo-workflows/variables/#expression](https://argoproj.github.io/argo-workflows/variables/#expression)\n","text":"The parameter `$VALUE` to this WorkflowEventBinding includes hyphens, which will, very confusingly, throw an error when Argo Workflows tries to invoke the workflow. Set the payload value to use underscores instead."},"id":"opengrep-rules.yaml.argo.correctness.event-binding-payload-with-hyphen","name":"opengrep-rules.yaml.argo.correctness.event-binding-payload-with-hyphen","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.argo.correctness.event-binding-payload-with-hyphen"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."},"help":{"markdown":"Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead.\n\n<b>References:</b>\n - [https://github.com/argoproj/argo-workflows/issues/5061](https://github.com/argoproj/argo-workflows/issues/5061)\n - [https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370](https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370)\n","text":"Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."},"id":"opengrep-rules.yaml.argo.security.argo-workflow-parameter-command-injection","name":"opengrep-rules.yaml.argo.security.argo-workflow-parameter-command-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 – Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.argo.security.argo-workflow-parameter-command-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from volumes to prevent this."},"help":{"markdown":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from volumes to prevent this.\n\n<b>References:</b>\n - [https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference](https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers)\n","text":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from volumes to prevent this."},"id":"opengrep-rules.yaml.docker-compose.security.exposing-docker-socket-volume","name":"opengrep-rules.yaml.docker-compose.security.exposing-docker-socket-volume","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.exposing-docker-socket-volume"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"help":{"markdown":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\n\n<b>References:</b>\n - [https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/](https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n","text":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"id":"opengrep-rules.yaml.docker-compose.security.no-new-privileges","name":"opengrep-rules.yaml.docker-compose.security.no-new-privileges","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.no-new-privileges"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."},"help":{"markdown":"Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.\n\n<b>References:</b>\n - [https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html](https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html)\n - [https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/](https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/)\n","text":"Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."},"id":"opengrep-rules.yaml.docker-compose.security.privileged-service","name":"opengrep-rules.yaml.docker-compose.security.privileged-service","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.privileged-service"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this."},"help":{"markdown":"Service '$SERVICE' is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this.\n\n<b>References:</b>\n - [https://docs.docker.com/engine/security/seccomp/](https://docs.docker.com/engine/security/seccomp/)\n","text":"Service '$SERVICE' is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this."},"id":"opengrep-rules.yaml.docker-compose.security.seccomp-confinement-disabled","name":"opengrep-rules.yaml.docker-compose.security.seccomp-confinement-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.seccomp-confinement-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' is explicitly disabling SELinux separation. This runs the service as an unconfined type. Remove 'label:disable' to prevent this."},"help":{"markdown":"Service '$SERVICE' is explicitly disabling SELinux separation. This runs the service as an unconfined type. Remove 'label:disable' to prevent this.\n\n<b>References:</b>\n - [https://www.projectatomic.io/blog/2016/03/dwalsh_selinux_containers/](https://www.projectatomic.io/blog/2016/03/dwalsh_selinux_containers/)\n - [https://docs.docker.com/engine/reference/run/#security-configuration](https://docs.docker.com/engine/reference/run/#security-configuration)\n","text":"Service '$SERVICE' is explicitly disabling SELinux separation. This runs the service as an unconfined type. Remove 'label:disable' to prevent this."},"id":"opengrep-rules.yaml.docker-compose.security.selinux-separation-disabled","name":"opengrep-rules.yaml.docker-compose.security.selinux-separation-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.selinux-separation-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"help":{"markdown":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\n\n<b>References:</b>\n - [https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir](https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir)\n - [https://blog.atomist.com/security-of-docker-kubernetes/](https://blog.atomist.com/security-of-docker-kubernetes/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only)\n","text":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"id":"opengrep-rules.yaml.docker-compose.security.writable-filesystem-service","name":"opengrep-rules.yaml.docker-compose.security.writable-filesystem-service","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.docker-compose.security.writable-filesystem-service"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information."},"help":{"markdown":"The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information.\n\n<b>References:</b>\n - [https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/](https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/)\n - [https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w](https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w)\n - [https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files](https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files)\n","text":"The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information."},"id":"opengrep-rules.yaml.github-actions.security.allowed-unsecure-commands","name":"opengrep-rules.yaml.github-actions.security.allowed-unsecure-commands","properties":{"precision":"very-high","tags":["CWE-749: Exposed Dangerous Method or Function","MEDIUM CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.allowed-unsecure-commands"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"GitHub Actions provides the **'add-mask'** workflow command to mask sensitive data in the workflow logs. If **'add-mask'** is not used or if workflow commands have been stopped, sensitive data can leaked into the workflow logs. An attacker could simply copy the workflow to another branch and add the following payload `echo \"::stop-commands::$stopMarker\"` to stop workflow command processing ([described here](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#stopping-and-starting-workflow-commands)), which will cause the secret token to be exposed despite the **'add-mask'** usage. For more information, please refer to the [GitHub documentation](https://github.com/actions/toolkit/blob/main/docs/commands.md#register-a-secret)."},"help":{"markdown":"GitHub Actions provides the **'add-mask'** workflow command to mask sensitive data in the workflow logs. If **'add-mask'** is not used or if workflow commands have been stopped, sensitive data can leaked into the workflow logs. An attacker could simply copy the workflow to another branch and add the following payload `echo \"::stop-commands::$stopMarker\"` to stop workflow command processing ([described here](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#stopping-and-starting-workflow-commands)), which will cause the secret token to be exposed despite the **'add-mask'** usage. For more information, please refer to the [GitHub documentation](https://github.com/actions/toolkit/blob/main/docs/commands.md#register-a-secret).\n\n<b>References:</b>\n - [https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/](https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/)\n - [https://github.com/actions/runner/issues/159](https://github.com/actions/runner/issues/159)\n - [https://github.com/actions/runner/issues/475](https://github.com/actions/runner/issues/475)\n - [https://github.com/actions/runner/issues/807](https://github.com/actions/runner/issues/807)\n - [https://0xn3va.gitbook.io/cheat-sheets/ci-cd/github/actions#misuse-of-sensitive-data-in-workflows](https://0xn3va.gitbook.io/cheat-sheets/ci-cd/github/actions#misuse-of-sensitive-data-in-workflows)\n - [https://github.com/github/docs/blob/main/content/actions/using-workflows/workflow-commands-for-github-actions.md#masking-a-value-in-a-log](https://github.com/github/docs/blob/main/content/actions/using-workflows/workflow-commands-for-github-actions.md#masking-a-value-in-a-log)\n","text":"GitHub Actions provides the **'add-mask'** workflow command to mask sensitive data in the workflow logs. If **'add-mask'** is not used or if workflow commands have been stopped, sensitive data can leaked into the workflow logs. An attacker could simply copy the workflow to another branch and add the following payload `echo \"::stop-commands::$stopMarker\"` to stop workflow command processing ([described here](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#stopping-and-starting-workflow-commands)), which will cause the secret token to be exposed despite the **'add-mask'** usage. For more information, please refer to the [GitHub documentation](https://github.com/actions/toolkit/blob/main/docs/commands.md#register-a-secret)."},"id":"opengrep-rules.yaml.github-actions.security.audit.unsafe-add-mask-workflow-command","name":"opengrep-rules.yaml.github-actions.security.audit.unsafe-add-mask-workflow-command","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.audit.unsafe-add-mask-workflow-command"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"help":{"markdown":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.\n\n<b>References:</b>\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n","text":"Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."},"id":"opengrep-rules.yaml.github-actions.security.curl-eval","name":"opengrep-rules.yaml.github-actions.security.curl-eval","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.curl-eval"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."},"help":{"markdown":"Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n<b>References:</b>\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n - [https://github.com/actions/github-script](https://github.com/actions/github-script)\n","text":"Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."},"id":"opengrep-rules.yaml.github-actions.security.github-script-injection","name":"opengrep-rules.yaml.github-actions.security.github-script-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","HIGH CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.github-script-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."},"help":{"markdown":"This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.\n\n<b>References:</b>\n - [https://securitylab.github.com/research/github-actions-preventing-pwn-requests/](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n - [https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md](https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md)\n","text":"This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."},"id":"opengrep-rules.yaml.github-actions.security.pull-request-target-code-checkout","name":"opengrep-rules.yaml.github-actions.security.pull-request-target-code-checkout","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.pull-request-target-code-checkout"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."},"help":{"markdown":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n<b>References:</b>\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n","text":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."},"id":"opengrep-rules.yaml.github-actions.security.run-shell-injection","name":"opengrep-rules.yaml.github-actions.security.run-shell-injection","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.run-shell-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."},"help":{"markdown":"This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.\n\n<b>References:</b>\n - [https://securitylab.github.com/research/github-actions-preventing-pwn-requests/](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n - [https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md](https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md)\n - [https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability](https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability)\n","text":"This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."},"id":"opengrep-rules.yaml.github-actions.security.workflow-run-target-code-checkout","name":"opengrep-rules.yaml.github-actions.security.workflow-run-target-code-checkout","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.github-actions.security.workflow-run-target-code-checkout"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This Gitlab CI YAML will never run on default branches due to a `changes` rule with `when:never`. To fix this, make sure the triggering event is a push event. You can do this with `if: '$CI_PIPELINE_SOURCE == \"push\"'`. See https://docs.gitlab.com/ee/ci/yaml/index.html#ruleschanges"},"help":{"markdown":"This Gitlab CI YAML will never run on default branches due to a `changes` rule with `when:never`. To fix this, make sure the triggering event is a push event. You can do this with `if: '$CI_PIPELINE_SOURCE == \"push\"'`. See https://docs.gitlab.com/ee/ci/yaml/index.html#ruleschanges","text":"This Gitlab CI YAML will never run on default branches due to a `changes` rule with `when:never`. To fix this, make sure the triggering event is a push event. You can do this with `if: '$CI_PIPELINE_SOURCE == \"push\"'`. See https://docs.gitlab.com/ee/ci/yaml/index.html#ruleschanges"},"id":"opengrep-rules.yaml.gitlab.correctness.changes-with-when-never","name":"opengrep-rules.yaml.gitlab.correctness.changes-with-when-never","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.gitlab.correctness.changes-with-when-never"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When you set a fractional CPU limit on a container, the CPU cycles available will be throttled, even though most nodes can handle processes alternating between using 100% of the CPU."},"help":{"markdown":"When you set a fractional CPU limit on a container, the CPU cycles available will be throttled, even though most nodes can handle processes alternating between using 100% of the CPU.","text":"When you set a fractional CPU limit on a container, the CPU cycles available will be throttled, even though most nodes can handle processes alternating between using 100% of the CPU."},"id":"opengrep-rules.yaml.kubernetes.best-practice.no-fractional-cpu-limits","name":"opengrep-rules.yaml.kubernetes.best-practice.no-fractional-cpu-limits","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.best-practice.no-fractional-cpu-limits"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"help":{"markdown":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n","text":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation","name":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"help":{"markdown":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n","text":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext","name":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks."},"help":{"markdown":"In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n","text":"In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-true","name":"opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-true","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.allow-privilege-escalation-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Do not set FLASK_ENV to \"development\" since that sets `debug=True` in Flask. Use \"dev\" or a similar term instead."},"help":{"markdown":"Do not set FLASK_ENV to \"development\" since that sets `debug=True` in Flask. Use \"dev\" or a similar term instead.\n\n<b>References:</b>\n - [https://flask.palletsprojects.com/en/2.0.x/debugging/](https://flask.palletsprojects.com/en/2.0.x/debugging/)\n - [https://flask.palletsprojects.com/en/2.0.x/config/#ENV](https://flask.palletsprojects.com/en/2.0.x/config/#ENV)\n","text":"Do not set FLASK_ENV to \"development\" since that sets `debug=True` in Flask. Use \"dev\" or a similar term instead."},"id":"opengrep-rules.yaml.kubernetes.security.env.flask-debugging-enabled","name":"opengrep-rules.yaml.kubernetes.security.env.flask-debugging-enabled","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.env.flask-debugging-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."},"help":{"markdown":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/storage/volumes/#hostpath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers)\n","text":"Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."},"id":"opengrep-rules.yaml.kubernetes.security.exposing-docker-socket-hostpath","name":"opengrep-rules.yaml.kubernetes.security.exposing-docker-socket-hostpath","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.exposing-docker-socket-hostpath"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality."},"help":{"markdown":"Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)\n","text":"Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality."},"id":"opengrep-rules.yaml.kubernetes.security.hostipc-pod","name":"opengrep-rules.yaml.kubernetes.security.hostipc-pod","properties":{"precision":"very-high","tags":["CWE-693: Protection Mechanism Failure","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.hostipc-pod"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality."},"help":{"markdown":"Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)\n","text":"Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality."},"id":"opengrep-rules.yaml.kubernetes.security.hostnetwork-pod","name":"opengrep-rules.yaml.kubernetes.security.hostnetwork-pod","properties":{"precision":"very-high","tags":["CWE-406: Insufficient Control of Network Message Volume (Network Amplification)","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.hostnetwork-pod"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality."},"help":{"markdown":"Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)\n","text":"Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality."},"id":"opengrep-rules.yaml.kubernetes.security.hostpid-pod","name":"opengrep-rules.yaml.kubernetes.security.hostpid-pod","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.hostpid-pod"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "},"help":{"markdown":"Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. \n\n<b>References:</b>\n - [https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole)\n - [https://kubernetes.io/docs/concepts/security/rbac-good-practices/#general-good-practice](https://kubernetes.io/docs/concepts/security/rbac-good-practices/#general-good-practice)\n - [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#api-groups](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#api-groups)\n","text":"Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "},"id":"opengrep-rules.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions","name":"opengrep-rules.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."},"help":{"markdown":"Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n","text":"Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."},"id":"opengrep-rules.yaml.kubernetes.security.privileged-container","name":"opengrep-rules.yaml.kubernetes.security.privileged-container","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.privileged-container"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."},"help":{"markdown":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n","text":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.run-as-non-root","name":"opengrep-rules.yaml.kubernetes.security.run-as-non-root","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.run-as-non-root"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"help":{"markdown":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n","text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level","name":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"help":{"markdown":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n","text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level-missing-security-context","name":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level-missing-security-context","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.run-as-non-root-container-level-missing-security-context"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"help":{"markdown":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n","text":"When running containers in Kubernetes, it's important to ensure that they are properly secured to prevent privilege escalation attacks. One potential vulnerability is when a container is allowed to run applications as the root user, which could allow an attacker to gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container, with the parameter `runAsNonRoot` set to `true`. This will ensure that the container runs as a non-root user, limiting the damage that could be caused by any potential attacks. By adding a `securityContext` to the container in your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-security-context-pod-level","name":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-security-context-pod-level","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.run-as-non-root-security-context-pod-level"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."},"help":{"markdown":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\n\n<b>References:</b>\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n","text":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."},"id":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-unsafe-value","name":"opengrep-rules.yaml.kubernetes.security.run-as-non-root-unsafe-value","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.run-as-non-root-unsafe-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."},"help":{"markdown":"Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n","text":"Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."},"id":"opengrep-rules.yaml.kubernetes.security.seccomp-confinement-disabled","name":"opengrep-rules.yaml.kubernetes.security.seccomp-confinement-disabled","properties":{"precision":"very-high","tags":["CWE-284: Improper Access Control","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.seccomp-confinement-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. "},"help":{"markdown":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)\n - [https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF](https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF)\n - [https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html](https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html)\n - [https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/](https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/)\n - [https://github.com/bitnami-labs/sealed-secrets](https://github.com/bitnami-labs/sealed-secrets)\n - [https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/](https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/)\n - [https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/](https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/)\n","text":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. "},"id":"opengrep-rules.yaml.kubernetes.security.secrets-in-config-file","name":"opengrep-rules.yaml.kubernetes.security.secrets-in-config-file","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.secrets-in-config-file"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."},"help":{"markdown":"Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster](https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster)\n","text":"Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."},"id":"opengrep-rules.yaml.kubernetes.security.skip-tls-verify-cluster","name":"opengrep-rules.yaml.kubernetes.security.skip-tls-verify-cluster","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.skip-tls-verify-cluster"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."},"help":{"markdown":"Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io)\n","text":"Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."},"id":"opengrep-rules.yaml.kubernetes.security.skip-tls-verify-service","name":"opengrep-rules.yaml.kubernetes.security.skip-tls-verify-service","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.skip-tls-verify-service"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Container $CONTAINER is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this."},"help":{"markdown":"Container $CONTAINER is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this.\n\n<b>References:</b>\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://blog.atomist.com/security-of-docker-kubernetes/](https://blog.atomist.com/security-of-docker-kubernetes/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only)\n","text":"Container $CONTAINER is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this."},"id":"opengrep-rules.yaml.kubernetes.security.writable-filesystem-container","name":"opengrep-rules.yaml.kubernetes.security.writable-filesystem-container","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.kubernetes.security.writable-filesystem-container"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The $SECURITY_SCHEME security scheme passes an API key in a query parameter. API keys should not be passed as query parameters in security schemes.  Pass the API key in the header or body. If using a query parameter is necessary, ensure that the API key is tightly scoped and short lived."},"help":{"markdown":"The $SECURITY_SCHEME security scheme passes an API key in a query parameter. API keys should not be passed as query parameters in security schemes.  Pass the API key in the header or body. If using a query parameter is necessary, ensure that the API key is tightly scoped and short lived.\n\n<b>References:</b>\n - [https://datatracker.ietf.org/doc/html/rfc6749](https://datatracker.ietf.org/doc/html/rfc6749)\n - [https://cwe.mitre.org/data/definitions/598.html](https://cwe.mitre.org/data/definitions/598.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n","text":"The $SECURITY_SCHEME security scheme passes an API key in a query parameter. API keys should not be passed as query parameters in security schemes.  Pass the API key in the header or body. If using a query parameter is necessary, ensure that the API key is tightly scoped and short lived."},"id":"opengrep-rules.yaml.openapi.security.api-key-in-query-parameter","name":"opengrep-rules.yaml.openapi.security.api-key-in-query-parameter","properties":{"precision":"very-high","tags":["CWE-598: Use of GET Request Method With Sensitive Query Strings","LOW CONFIDENCE","OWASP-A04:2021 Insecure Design","OWASP-A07:2021 Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.openapi.security.api-key-in-query-parameter"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found 'x-openai-isConsequential: false' in a state-changing HTTP method: $METHOD $PATH. This Action configuration will enable the 'Always Allow' option for state-changing HTTP methods, such as POST, PUT, PATCH, or DELETE. The risk of a user selecting the 'Always Allow' button is that the agent could perform unintended actions on behalf of the user. When working with sensitive functionality, it is always best to include a Human In The Loop (HITL) type of control. Consider the trade-off between security  and user friction and then make a risk-based decision about this function."},"help":{"markdown":"Found 'x-openai-isConsequential: false' in a state-changing HTTP method: $METHOD $PATH. This Action configuration will enable the 'Always Allow' option for state-changing HTTP methods, such as POST, PUT, PATCH, or DELETE. The risk of a user selecting the 'Always Allow' button is that the agent could perform unintended actions on behalf of the user. When working with sensitive functionality, it is always best to include a Human In The Loop (HITL) type of control. Consider the trade-off between security  and user friction and then make a risk-based decision about this function.\n\n<b>References:</b>\n - [https://platform.openai.com/docs/actions/consequential-flag](https://platform.openai.com/docs/actions/consequential-flag)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n - [https://owasp.org/www-project-top-10-for-large-language-model-applications/assets/PDF/OWASP-Top-10-for-LLMs-2023-v1_1.pdf](https://owasp.org/www-project-top-10-for-large-language-model-applications/assets/PDF/OWASP-Top-10-for-LLMs-2023-v1_1.pdf)\n","text":"Found 'x-openai-isConsequential: false' in a state-changing HTTP method: $METHOD $PATH. This Action configuration will enable the 'Always Allow' option for state-changing HTTP methods, such as POST, PUT, PATCH, or DELETE. The risk of a user selecting the 'Always Allow' button is that the agent could perform unintended actions on behalf of the user. When working with sensitive functionality, it is always best to include a Human In The Loop (HITL) type of control. Consider the trade-off between security  and user friction and then make a risk-based decision about this function."},"id":"opengrep-rules.yaml.openapi.security.openai-consequential-action-false","name":"opengrep-rules.yaml.openapi.security.openai-consequential-action-false","properties":{"precision":"very-high","tags":["CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')","HIGH CONFIDENCE","OWASP-A04:2021 Insecure Design","OWASP-LLM08:2023 - Excessive Agency","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.openapi.security.openai-consequential-action-false"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS."},"help":{"markdown":"Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/287.html](https://cwe.mitre.org/data/definitions/287.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n","text":"Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS."},"id":"opengrep-rules.yaml.openapi.security.use-of-basic-authentication","name":"opengrep-rules.yaml.openapi.security.use-of-basic-authentication","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","HIGH CONFIDENCE","OWASP-A04:2021 Insecure Design","OWASP-A07:2021 Identification and Authentication Failures","security"]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.openapi.security.use-of-basic-authentication"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'bash' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'bash' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'bash' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-bash","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-bash","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-bash"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'cpp' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'cpp' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'cpp' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-cpp","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-cpp","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-cpp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'csharp' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'csharp' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'csharp' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-csharp","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-csharp","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-csharp"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'dockerfile' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'dockerfile' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'dockerfile' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-dockerfile","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-dockerfile","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-dockerfile"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'elixir' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'elixir' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'elixir' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-elixir","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-elixir","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-elixir"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'go' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'go' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'go' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-go","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-go","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-go"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'hcl' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'hcl' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'hcl' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-hcl","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-hcl","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-hcl"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'js' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'js' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'js' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-js","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-js","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-js"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'kotlin' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'kotlin' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'kotlin' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-kotlin","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-kotlin","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-kotlin"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'python' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'python' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'python' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-python","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-python","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-python"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'regex' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'regex' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'regex' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-regex","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-regex","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-regex"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'solidity' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'solidity' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'solidity' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-solidity","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-solidity","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-solidity"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'ts' instead."},"help":{"markdown":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'ts' instead.","text":"Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'ts' instead."},"id":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-ts","name":"opengrep-rules.yaml.semgrep.consistency.lang-consistency-ts","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.consistency.lang-consistency-ts"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The 'id' field $X was used multiple times. The 'id' field needs to be unique."},"help":{"markdown":"The 'id' field $X was used multiple times. The 'id' field needs to be unique.","text":"The 'id' field $X was used multiple times. The 'id' field needs to be unique."},"id":"opengrep-rules.yaml.semgrep.duplicate-id","name":"opengrep-rules.yaml.semgrep.duplicate-id","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.duplicate-id"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Two identical pattern clauses were detected. This will cause Semgrep to run the same pattern twice. Remove one of the duplicate pattern clauses."},"help":{"markdown":"Two identical pattern clauses were detected. This will cause Semgrep to run the same pattern twice. Remove one of the duplicate pattern clauses.","text":"Two identical pattern clauses were detected. This will cause Semgrep to run the same pattern twice. Remove one of the duplicate pattern clauses."},"id":"opengrep-rules.yaml.semgrep.duplicate-pattern","name":"opengrep-rules.yaml.semgrep.duplicate-pattern","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.duplicate-pattern"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This rule has an empty message field. Consider adding a message field that communicates why this rule is an issue and how to fix it. This will increase the chance that the finding gets addressed."},"help":{"markdown":"This rule has an empty message field. Consider adding a message field that communicates why this rule is an issue and how to fix it. This will increase the chance that the finding gets addressed.","text":"This rule has an empty message field. Consider adding a message field that communicates why this rule is an issue and how to fix it. This will increase the chance that the finding gets addressed."},"id":"opengrep-rules.yaml.semgrep.empty-message","name":"opengrep-rules.yaml.semgrep.empty-message","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.empty-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`interfile: true` should be under the `options` field, not the `metadata` field."},"help":{"markdown":"`interfile: true` should be under the `options` field, not the `metadata` field.","text":"`interfile: true` should be under the `options` field, not the `metadata` field."},"id":"opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-no-options","name":"opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-no-options","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-no-options"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"`interfile: true` should be under the `options` field, not the `metadata` field."},"help":{"markdown":"`interfile: true` should be under the `options` field, not the `metadata` field.","text":"`interfile: true` should be under the `options` field, not the `metadata` field."},"id":"opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-options-already-present","name":"opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-options-already-present","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.interfile-true-under-metadata-and-options-already-present"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like you have an additional space in your rule message, this can look awkward in the finding output, please remove the additional whitespace!"},"help":{"markdown":"It looks like you have an additional space in your rule message, this can look awkward in the finding output, please remove the additional whitespace!\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository)\n","text":"It looks like you have an additional space in your rule message, this can look awkward in the finding output, please remove the additional whitespace!"},"id":"opengrep-rules.yaml.semgrep.message-whitespace-check","name":"opengrep-rules.yaml.semgrep.message-whitespace-check","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.message-whitespace-check"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This Semgrep rule is missing a valid 'category' field in the 'metadata'. 'category' must be one of 'security', 'correctness', 'best-practice', 'performance', 'maintainability', or 'portability'."},"help":{"markdown":"This Semgrep rule is missing a valid 'category' field in the 'metadata'. 'category' must be one of 'security', 'correctness', 'best-practice', 'performance', 'maintainability', or 'portability'.","text":"This Semgrep rule is missing a valid 'category' field in the 'metadata'. 'category' must be one of 'security', 'correctness', 'best-practice', 'performance', 'maintainability', or 'portability'."},"id":"opengrep-rules.yaml.semgrep.metadata-category","name":"opengrep-rules.yaml.semgrep.metadata-category","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-category"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This Semgrep rule is missing a valid 'confidence' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"This Semgrep rule is missing a valid 'confidence' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository)\n","text":"This Semgrep rule is missing a valid 'confidence' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-confidence","name":"opengrep-rules.yaml.semgrep.metadata-confidence","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-confidence"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep rule confidence: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"Semgrep rule confidence: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"Semgrep rule confidence: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-confidence-incorrect-value","name":"opengrep-rules.yaml.semgrep.metadata-confidence-incorrect-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-confidence-incorrect-value"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"$...CWE The cwe tag in rule metadata should always be in the format \"CWE-000: Title\"."},"help":{"markdown":"$...CWE The cwe tag in rule metadata should always be in the format \"CWE-000: Title\".","text":"$...CWE The cwe tag in rule metadata should always be in the format \"CWE-000: Title\"."},"id":"opengrep-rules.yaml.semgrep.metadata-cwe","name":"opengrep-rules.yaml.semgrep.metadata-cwe","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-cwe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"We no longer support `deepsemgrep: true`, please use `interfile:true`"},"help":{"markdown":"We no longer support `deepsemgrep: true`, please use `interfile:true`\n\n<b>References:</b>\n - [https://semgrep.dev/](https://semgrep.dev/)\n","text":"We no longer support `deepsemgrep: true`, please use `interfile:true`"},"id":"opengrep-rules.yaml.semgrep.metadata-deepsemgrep","name":"opengrep-rules.yaml.semgrep.metadata-deepsemgrep","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-deepsemgrep"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This Semgrep rule is missing a valid 'impact' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"This Semgrep rule is missing a valid 'impact' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/writing-rules/rule-syntax/#TODO](https://semgrep.dev/docs/writing-rules/rule-syntax/#TODO)\n","text":"This Semgrep rule is missing a valid 'impact' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-impact","name":"opengrep-rules.yaml.semgrep.metadata-impact","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-impact"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep rule impact: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"Semgrep rule impact: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"Semgrep rule impact: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-impact-incorrect-value","name":"opengrep-rules.yaml.semgrep.metadata-impact-incorrect-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-impact-incorrect-value"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"It looks like $KEY is not in the default list of expected options, if this is a new key update this rule"},"help":{"markdown":"It looks like $KEY is not in the default list of expected options, if this is a new key update this rule\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository)\n","text":"It looks like $KEY is not in the default list of expected options, if this is a new key update this rule"},"id":"opengrep-rules.yaml.semgrep.metadata-incorrect-option","name":"opengrep-rules.yaml.semgrep.metadata-incorrect-option","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-incorrect-option"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This Semgrep rule is missing a valid 'likelihood' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"This Semgrep rule is missing a valid 'likelihood' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"This Semgrep rule is missing a valid 'likelihood' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-likelihood","name":"opengrep-rules.yaml.semgrep.metadata-likelihood","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-likelihood"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep rule likelihood: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"Semgrep rule likelihood: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"Semgrep rule likelihood: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-likelihood-incorrect-value","name":"opengrep-rules.yaml.semgrep.metadata-likelihood-incorrect-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-likelihood-incorrect-value"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The `owasp` tag in Semgrep rule metadata should start with the format \"A00:YYYY\", where A00 is the OWASP Top 10 number and YYYY is the OWASP Top 10 year."},"help":{"markdown":"The `owasp` tag in Semgrep rule metadata should start with the format \"A00:YYYY\", where A00 is the OWASP Top 10 number and YYYY is the OWASP Top 10 year.","text":"The `owasp` tag in Semgrep rule metadata should start with the format \"A00:YYYY\", where A00 is the OWASP Top 10 number and YYYY is the OWASP Top 10 year."},"id":"opengrep-rules.yaml.semgrep.metadata-owasp","name":"opengrep-rules.yaml.semgrep.metadata-owasp","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-owasp"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The references in rule metadata should always be a list, even if there's only one."},"help":{"markdown":"The references in rule metadata should always be a list, even if there's only one.","text":"The references in rule metadata should always be a list, even if there's only one."},"id":"opengrep-rules.yaml.semgrep.metadata-references","name":"opengrep-rules.yaml.semgrep.metadata-references","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-references"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This Semgrep rule is missing a valid 'subcategory' field in the 'metadata'. which should be either audit, vuln, or secure default. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"This Semgrep rule is missing a valid 'subcategory' field in the 'metadata'. which should be either audit, vuln, or secure default. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"This Semgrep rule is missing a valid 'subcategory' field in the 'metadata'. which should be either audit, vuln, or secure default. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-subcategory","name":"opengrep-rules.yaml.semgrep.metadata-subcategory","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-subcategory"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Semgrep rule likelihood: $VALUE detected, but the value must be vuln, audit, or secure default. For more information visit: https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"help":{"markdown":"Semgrep rule likelihood: $VALUE detected, but the value must be vuln, audit, or secure default. For more information visit: https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/)\n","text":"Semgrep rule likelihood: $VALUE detected, but the value must be vuln, audit, or secure default. For more information visit: https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/"},"id":"opengrep-rules.yaml.semgrep.metadata-subcategory-incorrect-value","name":"opengrep-rules.yaml.semgrep.metadata-subcategory-incorrect-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-subcategory-incorrect-value"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"This Semgrep rule is missing a 'technology' field in the 'metadata'. Consider adding a list of technologies based on the rule's associated library or framework, or another piece of relevant information."},"help":{"markdown":"This Semgrep rule is missing a 'technology' field in the 'metadata'. Consider adding a list of technologies based on the rule's associated library or framework, or another piece of relevant information.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/#technology](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/#technology)\n","text":"This Semgrep rule is missing a 'technology' field in the 'metadata'. Consider adding a list of technologies based on the rule's associated library or framework, or another piece of relevant information."},"id":"opengrep-rules.yaml.semgrep.metadata-technology","name":"opengrep-rules.yaml.semgrep.metadata-technology","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.metadata-technology"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Looks like this value is deconstructing a const/var/let you need to use all three `const {...} =` `var {...} =` and `let {...} =` to provide accurate coverage consider adding the missing patterns in a `pattern-inside` for better coverage."},"help":{"markdown":"Looks like this value is deconstructing a const/var/let you need to use all three `const {...} =` `var {...} =` and `let {...} =` to provide accurate coverage consider adding the missing patterns in a `pattern-inside` for better coverage.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository)\n","text":"Looks like this value is deconstructing a const/var/let you need to use all three `const {...} =` `var {...} =` and `let {...} =` to provide accurate coverage consider adding the missing patterns in a `pattern-inside` for better coverage."},"id":"opengrep-rules.yaml.semgrep.missing-deconstructed-value","name":"opengrep-rules.yaml.semgrep.missing-deconstructed-value","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.missing-deconstructed-value"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Please include a 'languages' field for your rule $RULEID!"},"help":{"markdown":"Please include a 'languages' field for your rule $RULEID!\n\n<b>References:</b>\n - [https://semgrep.dev/docs/writing-rules/rule-syntax/#required](https://semgrep.dev/docs/writing-rules/rule-syntax/#required)\n","text":"Please include a 'languages' field for your rule $RULEID!"},"id":"opengrep-rules.yaml.semgrep.missing-language-field","name":"opengrep-rules.yaml.semgrep.missing-language-field","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.missing-language-field"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This rule does not have a message. Semgrep requires that rules have a message. Include a message to explain what the rule does. Consider writing a message that explains why this is an issue and how to fix it."},"help":{"markdown":"This rule does not have a message. Semgrep requires that rules have a message. Include a message to explain what the rule does. Consider writing a message that explains why this is an issue and how to fix it.\n\n<b>References:</b>\n - [https://semgrep.dev/docs/writing-rules/rule-syntax/](https://semgrep.dev/docs/writing-rules/rule-syntax/)\n","text":"This rule does not have a message. Semgrep requires that rules have a message. Include a message to explain what the rule does. Consider writing a message that explains why this is an issue and how to fix it."},"id":"opengrep-rules.yaml.semgrep.missing-message-field","name":"opengrep-rules.yaml.semgrep.missing-message-field","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.missing-message-field"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This rule has a multi-line message field, which may display poorly in a terminal. Consider ensuring it is on one line. For example, use `message: >-`, not `message: |`."},"help":{"markdown":"This rule has a multi-line message field, which may display poorly in a terminal. Consider ensuring it is on one line. For example, use `message: >-`, not `message: |`.\n\n<b>References:</b>\n - [https://github.com/returntocorp/semgrep-rules/issues/1431](https://github.com/returntocorp/semgrep-rules/issues/1431)\n","text":"This rule has a multi-line message field, which may display poorly in a terminal. Consider ensuring it is on one line. For example, use `message: >-`, not `message: |`."},"id":"opengrep-rules.yaml.semgrep.multi-line-message","name":"opengrep-rules.yaml.semgrep.multi-line-message","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.multi-line-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using patterns like `function (...) {...}` is too general it will probably slow down the rule performance."},"help":{"markdown":"Using patterns like `function (...) {...}` is too general it will probably slow down the rule performance.","text":"Using patterns like `function (...) {...}` is too general it will probably slow down the rule performance."},"id":"opengrep-rules.yaml.semgrep.slow-pattern-general-func","name":"opengrep-rules.yaml.semgrep.slow-pattern-general-func","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.slow-pattern-general-func"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using patterns like `$X.$Y` may be too general and may slow down the rule performance."},"help":{"markdown":"Using patterns like `$X.$Y` may be too general and may slow down the rule performance.","text":"Using patterns like `$X.$Y` may be too general and may slow down the rule performance."},"id":"opengrep-rules.yaml.semgrep.slow-pattern-general-property","name":"opengrep-rules.yaml.semgrep.slow-pattern-general-property","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.slow-pattern-general-property"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using a single metavariable as a pattern drastically slows down the rule performance because it will match every expression in a file. Instead, try to match something specific such as a function name, or anchor on a statement that may occur above or below the pattern. The more specific you can be, the faster the pattern will run."},"help":{"markdown":"Using a single metavariable as a pattern drastically slows down the rule performance because it will match every expression in a file. Instead, try to match something specific such as a function name, or anchor on a statement that may occur above or below the pattern. The more specific you can be, the faster the pattern will run.","text":"Using a single metavariable as a pattern drastically slows down the rule performance because it will match every expression in a file. Instead, try to match something specific such as a function name, or anchor on a statement that may occur above or below the pattern. The more specific you can be, the faster the pattern will run."},"id":"opengrep-rules.yaml.semgrep.slow-pattern-single-metavariable","name":"opengrep-rules.yaml.semgrep.slow-pattern-single-metavariable","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.slow-pattern-single-metavariable"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using the ellipsis operator `...` at the top of the pattern drastically slows down the rule performance."},"help":{"markdown":"Using the ellipsis operator `...` at the top of the pattern drastically slows down the rule performance.","text":"Using the ellipsis operator `...` at the top of the pattern drastically slows down the rule performance."},"id":"opengrep-rules.yaml.semgrep.slow-pattern-top-ellipsis","name":"opengrep-rules.yaml.semgrep.slow-pattern-top-ellipsis","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.slow-pattern-top-ellipsis"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Unnecessary parent operator. Remove one to fix."},"help":{"markdown":"Unnecessary parent operator. Remove one to fix.","text":"Unnecessary parent operator. Remove one to fix."},"id":"opengrep-rules.yaml.semgrep.unnecessary-parent-operator","name":"opengrep-rules.yaml.semgrep.unnecessary-parent-operator","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.unnecessary-parent-operator"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"You can not use 'pattern' $A and 'pattern-not' $A together; this will always be empty."},"help":{"markdown":"You can not use 'pattern' $A and 'pattern-not' $A together; this will always be empty.","text":"You can not use 'pattern' $A and 'pattern-not' $A together; this will always be empty."},"id":"opengrep-rules.yaml.semgrep.unsatisfiable-rule","name":"opengrep-rules.yaml.semgrep.unsatisfiable-rule","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.unsatisfiable-rule"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like you have an YAML indentation issue -- instead of writing `$KEY`,  put a space between the hyphen and what comes after! Otherwise, it reads  as a single string. "},"help":{"markdown":"It looks like you have an YAML indentation issue -- instead of writing `$KEY`,  put a space between the hyphen and what comes after! Otherwise, it reads  as a single string. \n\n<b>References:</b>\n - [https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository](https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository)\n","text":"It looks like you have an YAML indentation issue -- instead of writing `$KEY`,  put a space between the hyphen and what comes after! Otherwise, it reads  as a single string. "},"id":"opengrep-rules.yaml.semgrep.yaml-key-indentation-check","name":"opengrep-rules.yaml.semgrep.yaml-key-indentation-check","properties":{"precision":"very-high","tags":[]},"shortDescription":{"text":"Opengrep Finding: opengrep-rules.yaml.semgrep.yaml-key-indentation-check"}}],"semanticVersion":"1.8.6"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}